/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.versions;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Node <code>xsi:type</code> in the
 * versions namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface INode extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"versions", "Node", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createAttribute("immutable", "http://www.w3.org/2001/XMLSchema", "boolean", null, null),
			XArchPropertyMetadata.createElement("versionID", "versions", "VersionID", 1, 1),
			XArchPropertyMetadata.createElement("parent", "instance", "XMLLink", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this Node.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this Node.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this Node.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this Node
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this Node
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the immutable attribute on this Node.
	 * @param immutable immutable
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setImmutable(String immutable);

	/**
	 * Remove the immutable attribute from this Node.
	 */
	public void clearImmutable();

	/**
	 * Get the immutable attribute from this Node.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return immutable on this Node
	 */
	public String getImmutable();

	/**
	 * Determine if the immutable attribute on this Node
	 * has the given value.
	 * @param immutable Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasImmutable(String immutable);


	/**
	 * Set the versionID for this Node.
	 * @param value new versionID
	 */
	public void setVersionID(IVersionID value);

	/**
	 * Clear the versionID from this Node.
	 */
	public void clearVersionID();

	/**
	 * Get the versionID from this Node.
	 * @return versionID
	 */
	public IVersionID getVersionID();

	/**
	 * Determine if this Node has the given versionID
	 * @param versionIDToCheck versionID to compare
	 * @return <code>true</code> if the versionIDs are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasVersionID(IVersionID versionIDToCheck);

	/**
	 * Add a parent to this Node.
	 * @param newParent parent to add.
	 */
	public void addParent(edu.uci.isr.xarch.instance.IXMLLink newParent);

	/**
	 * Add a collection of parents to this Node.
	 * @param parents parents to add.
	 */
	public void addParents(Collection parents);

	/**
	 * Remove all parents from this Node.
	 */
	public void clearParents();

	/**
	 * Remove the given parent from this Node.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param parentToRemove parent to remove.
	 */
	public void removeParent(edu.uci.isr.xarch.instance.IXMLLink parentToRemove);

	/**
	 * Remove all the given parents from this Node.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param parents parent to remove.
	 */
	public void removeParents(Collection parents);

	/**
	 * Get all the parents from this Node.
	 * @return all parents in this Node.
	 */
	public Collection getAllParents();

	/**
	 * Determine if this Node contains a given parent.
	 * @return <code>true</code> if this Node contains the given
	 * parentToCheck, <code>false</code> otherwise.
	 */
	public boolean hasParent(edu.uci.isr.xarch.instance.IXMLLink parentToCheck);

	/**
	 * Determine if this Node contains the given set of parents.
	 * @param parentsToCheck parents to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>parents</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasParents(Collection parentsToCheck);

	/**
	 * Determine if this Node contains each element in the 
	 * given set of parents.
	 * @param parentsToCheck parents to check for.
	 * @return <code>true</code> if every element in
	 * <code>parents</code> is found in this Node,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllParents(Collection parentsToCheck);

	/**
	 * Determine if another Node has the same
	 * id as this one.
	 * @param NodeToCheck Node to compare with this
	 * one.
	 */
	public boolean isEqual(INode NodeToCheck);
	/**
	 * Determine if another Node is equivalent to this one, ignoring
	 * ID's.
	 * @param NodeToCheck Node to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Node are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(INode NodeToCheck);

}
