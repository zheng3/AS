/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.types;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchStructure <code>xsi:type</code> in the
 * types namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchStructure extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"types", "ArchStructure", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("component", "types", "Component", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("connector", "types", "Connector", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("link", "types", "Link", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("group", "instance", "Group", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this ArchStructure.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this ArchStructure.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this ArchStructure.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this ArchStructure
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this ArchStructure
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this ArchStructure.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this ArchStructure.
	 */
	public void clearDescription();

	/**
	 * Get the description from this ArchStructure.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this ArchStructure has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Add a component to this ArchStructure.
	 * @param newComponent component to add.
	 */
	public void addComponent(IComponent newComponent);

	/**
	 * Add a collection of components to this ArchStructure.
	 * @param components components to add.
	 */
	public void addComponents(Collection components);

	/**
	 * Remove all components from this ArchStructure.
	 */
	public void clearComponents();

	/**
	 * Remove the given component from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentToRemove component to remove.
	 */
	public void removeComponent(IComponent componentToRemove);

	/**
	 * Remove all the given components from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param components component to remove.
	 */
	public void removeComponents(Collection components);

	/**
	 * Get all the components from this ArchStructure.
	 * @return all components in this ArchStructure.
	 */
	public Collection getAllComponents();

	/**
	 * Determine if this ArchStructure contains a given component.
	 * @return <code>true</code> if this ArchStructure contains the given
	 * componentToCheck, <code>false</code> otherwise.
	 */
	public boolean hasComponent(IComponent componentToCheck);

	/**
	 * Determine if this ArchStructure contains the given set of components.
	 * @param componentsToCheck components to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>components</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasComponents(Collection componentsToCheck);

	/**
	 * Determine if this ArchStructure contains each element in the 
	 * given set of components.
	 * @param componentsToCheck components to check for.
	 * @return <code>true</code> if every element in
	 * <code>components</code> is found in this ArchStructure,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllComponents(Collection componentsToCheck);

	/**
	 * Gets the component from this ArchStructure with the given
	 * id.
	 * @param id ID to look for.
	 * @return component with the given ID, or <code>null</code> if not found.
	 */
	public IComponent getComponent(String id);

	/**
	 * Gets the components from this ArchStructure with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return components with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getComponents(Collection ids);


	/**
	 * Add a connector to this ArchStructure.
	 * @param newConnector connector to add.
	 */
	public void addConnector(IConnector newConnector);

	/**
	 * Add a collection of connectors to this ArchStructure.
	 * @param connectors connectors to add.
	 */
	public void addConnectors(Collection connectors);

	/**
	 * Remove all connectors from this ArchStructure.
	 */
	public void clearConnectors();

	/**
	 * Remove the given connector from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorToRemove connector to remove.
	 */
	public void removeConnector(IConnector connectorToRemove);

	/**
	 * Remove all the given connectors from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectors connector to remove.
	 */
	public void removeConnectors(Collection connectors);

	/**
	 * Get all the connectors from this ArchStructure.
	 * @return all connectors in this ArchStructure.
	 */
	public Collection getAllConnectors();

	/**
	 * Determine if this ArchStructure contains a given connector.
	 * @return <code>true</code> if this ArchStructure contains the given
	 * connectorToCheck, <code>false</code> otherwise.
	 */
	public boolean hasConnector(IConnector connectorToCheck);

	/**
	 * Determine if this ArchStructure contains the given set of connectors.
	 * @param connectorsToCheck connectors to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>connectors</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasConnectors(Collection connectorsToCheck);

	/**
	 * Determine if this ArchStructure contains each element in the 
	 * given set of connectors.
	 * @param connectorsToCheck connectors to check for.
	 * @return <code>true</code> if every element in
	 * <code>connectors</code> is found in this ArchStructure,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllConnectors(Collection connectorsToCheck);

	/**
	 * Gets the connector from this ArchStructure with the given
	 * id.
	 * @param id ID to look for.
	 * @return connector with the given ID, or <code>null</code> if not found.
	 */
	public IConnector getConnector(String id);

	/**
	 * Gets the connectors from this ArchStructure with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return connectors with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getConnectors(Collection ids);


	/**
	 * Add a link to this ArchStructure.
	 * @param newLink link to add.
	 */
	public void addLink(ILink newLink);

	/**
	 * Add a collection of links to this ArchStructure.
	 * @param links links to add.
	 */
	public void addLinks(Collection links);

	/**
	 * Remove all links from this ArchStructure.
	 */
	public void clearLinks();

	/**
	 * Remove the given link from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param linkToRemove link to remove.
	 */
	public void removeLink(ILink linkToRemove);

	/**
	 * Remove all the given links from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param links link to remove.
	 */
	public void removeLinks(Collection links);

	/**
	 * Get all the links from this ArchStructure.
	 * @return all links in this ArchStructure.
	 */
	public Collection getAllLinks();

	/**
	 * Determine if this ArchStructure contains a given link.
	 * @return <code>true</code> if this ArchStructure contains the given
	 * linkToCheck, <code>false</code> otherwise.
	 */
	public boolean hasLink(ILink linkToCheck);

	/**
	 * Determine if this ArchStructure contains the given set of links.
	 * @param linksToCheck links to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>links</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasLinks(Collection linksToCheck);

	/**
	 * Determine if this ArchStructure contains each element in the 
	 * given set of links.
	 * @param linksToCheck links to check for.
	 * @return <code>true</code> if every element in
	 * <code>links</code> is found in this ArchStructure,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllLinks(Collection linksToCheck);

	/**
	 * Gets the link from this ArchStructure with the given
	 * id.
	 * @param id ID to look for.
	 * @return link with the given ID, or <code>null</code> if not found.
	 */
	public ILink getLink(String id);

	/**
	 * Gets the links from this ArchStructure with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return links with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getLinks(Collection ids);


	/**
	 * Add a group to this ArchStructure.
	 * @param newGroup group to add.
	 */
	public void addGroup(edu.uci.isr.xarch.instance.IGroup newGroup);

	/**
	 * Add a collection of groups to this ArchStructure.
	 * @param groups groups to add.
	 */
	public void addGroups(Collection groups);

	/**
	 * Remove all groups from this ArchStructure.
	 */
	public void clearGroups();

	/**
	 * Remove the given group from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param groupToRemove group to remove.
	 */
	public void removeGroup(edu.uci.isr.xarch.instance.IGroup groupToRemove);

	/**
	 * Remove all the given groups from this ArchStructure.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param groups group to remove.
	 */
	public void removeGroups(Collection groups);

	/**
	 * Get all the groups from this ArchStructure.
	 * @return all groups in this ArchStructure.
	 */
	public Collection getAllGroups();

	/**
	 * Determine if this ArchStructure contains a given group.
	 * @return <code>true</code> if this ArchStructure contains the given
	 * groupToCheck, <code>false</code> otherwise.
	 */
	public boolean hasGroup(edu.uci.isr.xarch.instance.IGroup groupToCheck);

	/**
	 * Determine if this ArchStructure contains the given set of groups.
	 * @param groupsToCheck groups to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>groups</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasGroups(Collection groupsToCheck);

	/**
	 * Determine if this ArchStructure contains each element in the 
	 * given set of groups.
	 * @param groupsToCheck groups to check for.
	 * @return <code>true</code> if every element in
	 * <code>groups</code> is found in this ArchStructure,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllGroups(Collection groupsToCheck);

	/**
	 * Gets the group from this ArchStructure with the given
	 * id.
	 * @param id ID to look for.
	 * @return group with the given ID, or <code>null</code> if not found.
	 */
	public edu.uci.isr.xarch.instance.IGroup getGroup(String id);

	/**
	 * Gets the groups from this ArchStructure with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return groups with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getGroups(Collection ids);

	/**
	 * Determine if another ArchStructure has the same
	 * id as this one.
	 * @param ArchStructureToCheck ArchStructure to compare with this
	 * one.
	 */
	public boolean isEqual(IArchStructure ArchStructureToCheck);
	/**
	 * Determine if another ArchStructure is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchStructureToCheck ArchStructure to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchStructure are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchStructure ArchStructureToCheck);

}
