/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.tronanalysis;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Test <code>xsi:type</code> in the
 * tronanalysis namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface ITest extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"tronanalysis", "Test", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createAttribute("enabled", "http://www.w3.org/2001/XMLSchema", "boolean", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this Test.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this Test.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this Test.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this Test
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this Test
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the enabled attribute on this Test.
	 * @param enabled enabled
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setEnabled(String enabled);

	/**
	 * Remove the enabled attribute from this Test.
	 */
	public void clearEnabled();

	/**
	 * Get the enabled attribute from this Test.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return enabled on this Test
	 */
	public String getEnabled();

	/**
	 * Determine if the enabled attribute on this Test
	 * has the given value.
	 * @param enabled Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasEnabled(String enabled);


	/**
	 * Set the description for this Test.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this Test.
	 */
	public void clearDescription();

	/**
	 * Get the description from this Test.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this Test has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);
	/**
	 * Determine if another Test has the same
	 * id as this one.
	 * @param TestToCheck Test to compare with this
	 * one.
	 */
	public boolean isEqual(ITest TestToCheck);
	/**
	 * Determine if another Test is equivalent to this one, ignoring
	 * ID's.
	 * @param TestToCheck Test to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Test are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(ITest TestToCheck);

}
