/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.features;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Feature <code>xsi:type</code> in the
 * features namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IFeature extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"features", "Feature", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("featureName", "features", "FeatureName", 1, 1),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("type", "features", "FeatureType", 1, 1),
			XArchPropertyMetadata.createElement("bindingTime", "features", "BindingTime", 1, 1),
			XArchPropertyMetadata.createElement("defaultValue", "features", "DefaultValue", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this Feature.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this Feature.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this Feature.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this Feature
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this Feature
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the featureName for this Feature.
	 * @param value new featureName
	 */
	public void setFeatureName(IFeatureName value);

	/**
	 * Clear the featureName from this Feature.
	 */
	public void clearFeatureName();

	/**
	 * Get the featureName from this Feature.
	 * @return featureName
	 */
	public IFeatureName getFeatureName();

	/**
	 * Determine if this Feature has the given featureName
	 * @param featureNameToCheck featureName to compare
	 * @return <code>true</code> if the featureNames are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasFeatureName(IFeatureName featureNameToCheck);

	/**
	 * Set the description for this Feature.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this Feature.
	 */
	public void clearDescription();

	/**
	 * Get the description from this Feature.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this Feature has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Set the type for this Feature.
	 * @param value new type
	 */
	public void setType(IFeatureType value);

	/**
	 * Clear the type from this Feature.
	 */
	public void clearType();

	/**
	 * Get the type from this Feature.
	 * @return type
	 */
	public IFeatureType getType();

	/**
	 * Determine if this Feature has the given type
	 * @param typeToCheck type to compare
	 * @return <code>true</code> if the types are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasType(IFeatureType typeToCheck);

	/**
	 * Set the bindingTime for this Feature.
	 * @param value new bindingTime
	 */
	public void setBindingTime(IBindingTime value);

	/**
	 * Clear the bindingTime from this Feature.
	 */
	public void clearBindingTime();

	/**
	 * Get the bindingTime from this Feature.
	 * @return bindingTime
	 */
	public IBindingTime getBindingTime();

	/**
	 * Determine if this Feature has the given bindingTime
	 * @param bindingTimeToCheck bindingTime to compare
	 * @return <code>true</code> if the bindingTimes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasBindingTime(IBindingTime bindingTimeToCheck);

	/**
	 * Set the defaultValue for this Feature.
	 * @param value new defaultValue
	 */
	public void setDefaultValue(IDefaultValue value);

	/**
	 * Clear the defaultValue from this Feature.
	 */
	public void clearDefaultValue();

	/**
	 * Get the defaultValue from this Feature.
	 * @return defaultValue
	 */
	public IDefaultValue getDefaultValue();

	/**
	 * Determine if this Feature has the given defaultValue
	 * @param defaultValueToCheck defaultValue to compare
	 * @return <code>true</code> if the defaultValues are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDefaultValue(IDefaultValue defaultValueToCheck);
	/**
	 * Determine if another Feature has the same
	 * id as this one.
	 * @param FeatureToCheck Feature to compare with this
	 * one.
	 */
	public boolean isEqual(IFeature FeatureToCheck);
	/**
	 * Determine if another Feature is equivalent to this one, ignoring
	 * ID's.
	 * @param FeatureToCheck Feature to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Feature are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IFeature FeatureToCheck);

}
