/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.messages;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * MessageCausalitySpecification <code>xsi:type</code> in the
 * messages namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IMessageCausalitySpecification extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"messages", "MessageCausalitySpecification", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("rule", "instance", "XMLLink", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Add a rule to this MessageCausalitySpecification.
	 * @param newRule rule to add.
	 */
	public void addRule(edu.uci.isr.xarch.instance.IXMLLink newRule);

	/**
	 * Add a collection of rules to this MessageCausalitySpecification.
	 * @param rules rules to add.
	 */
	public void addRules(Collection rules);

	/**
	 * Remove all rules from this MessageCausalitySpecification.
	 */
	public void clearRules();

	/**
	 * Remove the given rule from this MessageCausalitySpecification.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param ruleToRemove rule to remove.
	 */
	public void removeRule(edu.uci.isr.xarch.instance.IXMLLink ruleToRemove);

	/**
	 * Remove all the given rules from this MessageCausalitySpecification.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param rules rule to remove.
	 */
	public void removeRules(Collection rules);

	/**
	 * Get all the rules from this MessageCausalitySpecification.
	 * @return all rules in this MessageCausalitySpecification.
	 */
	public Collection getAllRules();

	/**
	 * Determine if this MessageCausalitySpecification contains a given rule.
	 * @return <code>true</code> if this MessageCausalitySpecification contains the given
	 * ruleToCheck, <code>false</code> otherwise.
	 */
	public boolean hasRule(edu.uci.isr.xarch.instance.IXMLLink ruleToCheck);

	/**
	 * Determine if this MessageCausalitySpecification contains the given set of rules.
	 * @param rulesToCheck rules to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>rules</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasRules(Collection rulesToCheck);

	/**
	 * Determine if this MessageCausalitySpecification contains each element in the 
	 * given set of rules.
	 * @param rulesToCheck rules to check for.
	 * @return <code>true</code> if every element in
	 * <code>rules</code> is found in this MessageCausalitySpecification,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllRules(Collection rulesToCheck);

	/**
	 * Determine if another MessageCausalitySpecification is equivalent to this one, ignoring
	 * ID's.
	 * @param MessageCausalitySpecificationToCheck MessageCausalitySpecification to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * MessageCausalitySpecification are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IMessageCausalitySpecification MessageCausalitySpecificationToCheck);

}
