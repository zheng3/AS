/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.diff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Add <code>xsi:type</code> in the
 * diff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IAdd extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"diff", "Add", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("component", "types", "Component", 1, 1),
			XArchPropertyMetadata.createElement("connector", "types", "Connector", 1, 1),
			XArchPropertyMetadata.createElement("link", "types", "Link", 1, 1),
			XArchPropertyMetadata.createElement("group", "instance", "Group", 1, 1),
			XArchPropertyMetadata.createElement("componentType", "types", "ComponentType", 1, 1),
			XArchPropertyMetadata.createElement("connectorType", "types", "ConnectorType", 1, 1),
			XArchPropertyMetadata.createElement("interfaceType", "types", "InterfaceType", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the component for this Add.
	 * @param value new component
	 */
	public void setComponent(edu.uci.isr.xarch.types.IComponent value);

	/**
	 * Clear the component from this Add.
	 */
	public void clearComponent();

	/**
	 * Get the component from this Add.
	 * @return component
	 */
	public edu.uci.isr.xarch.types.IComponent getComponent();

	/**
	 * Determine if this Add has the given component
	 * @param componentToCheck component to compare
	 * @return <code>true</code> if the components are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasComponent(edu.uci.isr.xarch.types.IComponent componentToCheck);

	/**
	 * Set the connector for this Add.
	 * @param value new connector
	 */
	public void setConnector(edu.uci.isr.xarch.types.IConnector value);

	/**
	 * Clear the connector from this Add.
	 */
	public void clearConnector();

	/**
	 * Get the connector from this Add.
	 * @return connector
	 */
	public edu.uci.isr.xarch.types.IConnector getConnector();

	/**
	 * Determine if this Add has the given connector
	 * @param connectorToCheck connector to compare
	 * @return <code>true</code> if the connectors are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasConnector(edu.uci.isr.xarch.types.IConnector connectorToCheck);

	/**
	 * Set the link for this Add.
	 * @param value new link
	 */
	public void setLink(edu.uci.isr.xarch.types.ILink value);

	/**
	 * Clear the link from this Add.
	 */
	public void clearLink();

	/**
	 * Get the link from this Add.
	 * @return link
	 */
	public edu.uci.isr.xarch.types.ILink getLink();

	/**
	 * Determine if this Add has the given link
	 * @param linkToCheck link to compare
	 * @return <code>true</code> if the links are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasLink(edu.uci.isr.xarch.types.ILink linkToCheck);

	/**
	 * Set the group for this Add.
	 * @param value new group
	 */
	public void setGroup(edu.uci.isr.xarch.instance.IGroup value);

	/**
	 * Clear the group from this Add.
	 */
	public void clearGroup();

	/**
	 * Get the group from this Add.
	 * @return group
	 */
	public edu.uci.isr.xarch.instance.IGroup getGroup();

	/**
	 * Determine if this Add has the given group
	 * @param groupToCheck group to compare
	 * @return <code>true</code> if the groups are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasGroup(edu.uci.isr.xarch.instance.IGroup groupToCheck);

	/**
	 * Set the componentType for this Add.
	 * @param value new componentType
	 */
	public void setComponentType(edu.uci.isr.xarch.types.IComponentType value);

	/**
	 * Clear the componentType from this Add.
	 */
	public void clearComponentType();

	/**
	 * Get the componentType from this Add.
	 * @return componentType
	 */
	public edu.uci.isr.xarch.types.IComponentType getComponentType();

	/**
	 * Determine if this Add has the given componentType
	 * @param componentTypeToCheck componentType to compare
	 * @return <code>true</code> if the componentTypes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasComponentType(edu.uci.isr.xarch.types.IComponentType componentTypeToCheck);

	/**
	 * Set the connectorType for this Add.
	 * @param value new connectorType
	 */
	public void setConnectorType(edu.uci.isr.xarch.types.IConnectorType value);

	/**
	 * Clear the connectorType from this Add.
	 */
	public void clearConnectorType();

	/**
	 * Get the connectorType from this Add.
	 * @return connectorType
	 */
	public edu.uci.isr.xarch.types.IConnectorType getConnectorType();

	/**
	 * Determine if this Add has the given connectorType
	 * @param connectorTypeToCheck connectorType to compare
	 * @return <code>true</code> if the connectorTypes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasConnectorType(edu.uci.isr.xarch.types.IConnectorType connectorTypeToCheck);

	/**
	 * Set the interfaceType for this Add.
	 * @param value new interfaceType
	 */
	public void setInterfaceType(edu.uci.isr.xarch.types.IInterfaceType value);

	/**
	 * Clear the interfaceType from this Add.
	 */
	public void clearInterfaceType();

	/**
	 * Get the interfaceType from this Add.
	 * @return interfaceType
	 */
	public edu.uci.isr.xarch.types.IInterfaceType getInterfaceType();

	/**
	 * Determine if this Add has the given interfaceType
	 * @param interfaceTypeToCheck interfaceType to compare
	 * @return <code>true</code> if the interfaceTypes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasInterfaceType(edu.uci.isr.xarch.types.IInterfaceType interfaceTypeToCheck);
	/**
	 * Determine if another Add is equivalent to this one, ignoring
	 * ID's.
	 * @param AddToCheck Add to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Add are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IAdd AddToCheck);

}
