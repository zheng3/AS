/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.analysis;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchAnalysis <code>xsi:type</code> in the
 * analysis namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchAnalysis extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"analysis", "ArchAnalysis", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("analysis", "analysis", "Analysis", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Add a analysis to this ArchAnalysis.
	 * @param newAnalysis analysis to add.
	 */
	public void addAnalysis(IAnalysis newAnalysis);

	/**
	 * Add a collection of analysiss to this ArchAnalysis.
	 * @param analysiss analysiss to add.
	 */
	public void addAnalysiss(Collection analysiss);

	/**
	 * Remove all analysiss from this ArchAnalysis.
	 */
	public void clearAnalysiss();

	/**
	 * Remove the given analysis from this ArchAnalysis.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param analysisToRemove analysis to remove.
	 */
	public void removeAnalysis(IAnalysis analysisToRemove);

	/**
	 * Remove all the given analysiss from this ArchAnalysis.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param analysiss analysis to remove.
	 */
	public void removeAnalysiss(Collection analysiss);

	/**
	 * Get all the analysiss from this ArchAnalysis.
	 * @return all analysiss in this ArchAnalysis.
	 */
	public Collection getAllAnalysiss();

	/**
	 * Determine if this ArchAnalysis contains a given analysis.
	 * @return <code>true</code> if this ArchAnalysis contains the given
	 * analysisToCheck, <code>false</code> otherwise.
	 */
	public boolean hasAnalysis(IAnalysis analysisToCheck);

	/**
	 * Determine if this ArchAnalysis contains the given set of analysiss.
	 * @param analysissToCheck analysiss to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>analysiss</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasAnalysiss(Collection analysissToCheck);

	/**
	 * Determine if this ArchAnalysis contains each element in the 
	 * given set of analysiss.
	 * @param analysissToCheck analysiss to check for.
	 * @return <code>true</code> if every element in
	 * <code>analysiss</code> is found in this ArchAnalysis,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllAnalysiss(Collection analysissToCheck);

	/**
	 * Determine if another ArchAnalysis is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchAnalysisToCheck ArchAnalysis to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchAnalysis are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchAnalysis ArchAnalysisToCheck);

}
