/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * DiffPart <code>xsi:type</code> in the
 * pladiff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IDiffPart extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"pladiff", "DiffPart", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("diffLocation", "pladiff", "DiffLocation", 1, 1),
			XArchPropertyMetadata.createElement("add", "pladiff", "Add", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("remove", "pladiff", "Remove", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("diffPart", "pladiff", "DiffPart", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the diffLocation for this DiffPart.
	 * @param value new diffLocation
	 */
	public void setDiffLocation(IDiffLocation value);

	/**
	 * Clear the diffLocation from this DiffPart.
	 */
	public void clearDiffLocation();

	/**
	 * Get the diffLocation from this DiffPart.
	 * @return diffLocation
	 */
	public IDiffLocation getDiffLocation();

	/**
	 * Determine if this DiffPart has the given diffLocation
	 * @param diffLocationToCheck diffLocation to compare
	 * @return <code>true</code> if the diffLocations are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDiffLocation(IDiffLocation diffLocationToCheck);

	/**
	 * Add a add to this DiffPart.
	 * @param newAdd add to add.
	 */
	public void addAdd(IAdd newAdd);

	/**
	 * Add a collection of adds to this DiffPart.
	 * @param adds adds to add.
	 */
	public void addAdds(Collection adds);

	/**
	 * Remove all adds from this DiffPart.
	 */
	public void clearAdds();

	/**
	 * Remove the given add from this DiffPart.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param addToRemove add to remove.
	 */
	public void removeAdd(IAdd addToRemove);

	/**
	 * Remove all the given adds from this DiffPart.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param adds add to remove.
	 */
	public void removeAdds(Collection adds);

	/**
	 * Get all the adds from this DiffPart.
	 * @return all adds in this DiffPart.
	 */
	public Collection getAllAdds();

	/**
	 * Determine if this DiffPart contains a given add.
	 * @return <code>true</code> if this DiffPart contains the given
	 * addToCheck, <code>false</code> otherwise.
	 */
	public boolean hasAdd(IAdd addToCheck);

	/**
	 * Determine if this DiffPart contains the given set of adds.
	 * @param addsToCheck adds to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>adds</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasAdds(Collection addsToCheck);

	/**
	 * Determine if this DiffPart contains each element in the 
	 * given set of adds.
	 * @param addsToCheck adds to check for.
	 * @return <code>true</code> if every element in
	 * <code>adds</code> is found in this DiffPart,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllAdds(Collection addsToCheck);


	/**
	 * Add a remove to this DiffPart.
	 * @param newRemove remove to add.
	 */
	public void addRemove(IRemove newRemove);

	/**
	 * Add a collection of removes to this DiffPart.
	 * @param removes removes to add.
	 */
	public void addRemoves(Collection removes);

	/**
	 * Remove all removes from this DiffPart.
	 */
	public void clearRemoves();

	/**
	 * Remove the given remove from this DiffPart.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param removeToRemove remove to remove.
	 */
	public void removeRemove(IRemove removeToRemove);

	/**
	 * Remove all the given removes from this DiffPart.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param removes remove to remove.
	 */
	public void removeRemoves(Collection removes);

	/**
	 * Get all the removes from this DiffPart.
	 * @return all removes in this DiffPart.
	 */
	public Collection getAllRemoves();

	/**
	 * Determine if this DiffPart contains a given remove.
	 * @return <code>true</code> if this DiffPart contains the given
	 * removeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasRemove(IRemove removeToCheck);

	/**
	 * Determine if this DiffPart contains the given set of removes.
	 * @param removesToCheck removes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>removes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasRemoves(Collection removesToCheck);

	/**
	 * Determine if this DiffPart contains each element in the 
	 * given set of removes.
	 * @param removesToCheck removes to check for.
	 * @return <code>true</code> if every element in
	 * <code>removes</code> is found in this DiffPart,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllRemoves(Collection removesToCheck);


	/**
	 * Add a diffPart to this DiffPart.
	 * @param newDiffPart diffPart to add.
	 */
	public void addDiffPart(IDiffPart newDiffPart);

	/**
	 * Add a collection of diffParts to this DiffPart.
	 * @param diffParts diffParts to add.
	 */
	public void addDiffParts(Collection diffParts);

	/**
	 * Remove all diffParts from this DiffPart.
	 */
	public void clearDiffParts();

	/**
	 * Remove the given diffPart from this DiffPart.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param diffPartToRemove diffPart to remove.
	 */
	public void removeDiffPart(IDiffPart diffPartToRemove);

	/**
	 * Remove all the given diffParts from this DiffPart.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param diffParts diffPart to remove.
	 */
	public void removeDiffParts(Collection diffParts);

	/**
	 * Get all the diffParts from this DiffPart.
	 * @return all diffParts in this DiffPart.
	 */
	public Collection getAllDiffParts();

	/**
	 * Determine if this DiffPart contains a given diffPart.
	 * @return <code>true</code> if this DiffPart contains the given
	 * diffPartToCheck, <code>false</code> otherwise.
	 */
	public boolean hasDiffPart(IDiffPart diffPartToCheck);

	/**
	 * Determine if this DiffPart contains the given set of diffParts.
	 * @param diffPartsToCheck diffParts to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>diffParts</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasDiffParts(Collection diffPartsToCheck);

	/**
	 * Determine if this DiffPart contains each element in the 
	 * given set of diffParts.
	 * @param diffPartsToCheck diffParts to check for.
	 * @return <code>true</code> if every element in
	 * <code>diffParts</code> is found in this DiffPart,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllDiffParts(Collection diffPartsToCheck);

	/**
	 * Determine if another DiffPart is equivalent to this one, ignoring
	 * ID's.
	 * @param DiffPartToCheck DiffPart to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * DiffPart are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IDiffPart DiffPartToCheck);

}
