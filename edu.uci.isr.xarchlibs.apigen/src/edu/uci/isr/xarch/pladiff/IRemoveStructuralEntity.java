/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * RemoveStructuralEntity <code>xsi:type</code> in the
 * pladiff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IRemoveStructuralEntity extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"pladiff", "RemoveStructuralEntity", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("component", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("connector", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("link", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("removeInterface", "pladiff", "RemoveInterface", 1, 1),
			XArchPropertyMetadata.createElement("removeOptional", "pladiff", "RemoveOptional", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the component for this RemoveStructuralEntity.
	 * @param value new component
	 */
	public void setComponent(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the component from this RemoveStructuralEntity.
	 */
	public void clearComponent();

	/**
	 * Get the component from this RemoveStructuralEntity.
	 * @return component
	 */
	public edu.uci.isr.xarch.instance.IDescription getComponent();

	/**
	 * Determine if this RemoveStructuralEntity has the given component
	 * @param componentToCheck component to compare
	 * @return <code>true</code> if the components are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasComponent(edu.uci.isr.xarch.instance.IDescription componentToCheck);

	/**
	 * Set the connector for this RemoveStructuralEntity.
	 * @param value new connector
	 */
	public void setConnector(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the connector from this RemoveStructuralEntity.
	 */
	public void clearConnector();

	/**
	 * Get the connector from this RemoveStructuralEntity.
	 * @return connector
	 */
	public edu.uci.isr.xarch.instance.IDescription getConnector();

	/**
	 * Determine if this RemoveStructuralEntity has the given connector
	 * @param connectorToCheck connector to compare
	 * @return <code>true</code> if the connectors are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasConnector(edu.uci.isr.xarch.instance.IDescription connectorToCheck);

	/**
	 * Set the link for this RemoveStructuralEntity.
	 * @param value new link
	 */
	public void setLink(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the link from this RemoveStructuralEntity.
	 */
	public void clearLink();

	/**
	 * Get the link from this RemoveStructuralEntity.
	 * @return link
	 */
	public edu.uci.isr.xarch.instance.IDescription getLink();

	/**
	 * Determine if this RemoveStructuralEntity has the given link
	 * @param linkToCheck link to compare
	 * @return <code>true</code> if the links are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasLink(edu.uci.isr.xarch.instance.IDescription linkToCheck);

	/**
	 * Set the removeInterface for this RemoveStructuralEntity.
	 * @param value new removeInterface
	 */
	public void setRemoveInterface(IRemoveInterface value);

	/**
	 * Clear the removeInterface from this RemoveStructuralEntity.
	 */
	public void clearRemoveInterface();

	/**
	 * Get the removeInterface from this RemoveStructuralEntity.
	 * @return removeInterface
	 */
	public IRemoveInterface getRemoveInterface();

	/**
	 * Determine if this RemoveStructuralEntity has the given removeInterface
	 * @param removeInterfaceToCheck removeInterface to compare
	 * @return <code>true</code> if the removeInterfaces are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasRemoveInterface(IRemoveInterface removeInterfaceToCheck);

	/**
	 * Set the removeOptional for this RemoveStructuralEntity.
	 * @param value new removeOptional
	 */
	public void setRemoveOptional(IRemoveOptional value);

	/**
	 * Clear the removeOptional from this RemoveStructuralEntity.
	 */
	public void clearRemoveOptional();

	/**
	 * Get the removeOptional from this RemoveStructuralEntity.
	 * @return removeOptional
	 */
	public IRemoveOptional getRemoveOptional();

	/**
	 * Determine if this RemoveStructuralEntity has the given removeOptional
	 * @param removeOptionalToCheck removeOptional to compare
	 * @return <code>true</code> if the removeOptionals are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasRemoveOptional(IRemoveOptional removeOptionalToCheck);
	/**
	 * Determine if another RemoveStructuralEntity is equivalent to this one, ignoring
	 * ID's.
	 * @param RemoveStructuralEntityToCheck RemoveStructuralEntity to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * RemoveStructuralEntity are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IRemoveStructuralEntity RemoveStructuralEntityToCheck);

}
