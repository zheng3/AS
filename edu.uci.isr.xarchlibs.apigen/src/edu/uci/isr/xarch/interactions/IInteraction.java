/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.interactions;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Interaction <code>xsi:type</code> in the
 * interactions namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IInteraction extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"interactions", "Interaction", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("targetComp", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("targetIntf", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("note", "interactions", "Note", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("lifeline", "interactions", "LifeLine", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("message", "interactions", "Message", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this Interaction.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this Interaction.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this Interaction.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this Interaction
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this Interaction
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this Interaction.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this Interaction.
	 */
	public void clearDescription();

	/**
	 * Get the description from this Interaction.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this Interaction has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Set the targetComp for this Interaction.
	 * @param value new targetComp
	 */
	public void setTargetComp(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the targetComp from this Interaction.
	 */
	public void clearTargetComp();

	/**
	 * Get the targetComp from this Interaction.
	 * @return targetComp
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getTargetComp();

	/**
	 * Determine if this Interaction has the given targetComp
	 * @param targetCompToCheck targetComp to compare
	 * @return <code>true</code> if the targetComps are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasTargetComp(edu.uci.isr.xarch.instance.IXMLLink targetCompToCheck);

	/**
	 * Set the targetIntf for this Interaction.
	 * @param value new targetIntf
	 */
	public void setTargetIntf(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the targetIntf from this Interaction.
	 */
	public void clearTargetIntf();

	/**
	 * Get the targetIntf from this Interaction.
	 * @return targetIntf
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getTargetIntf();

	/**
	 * Determine if this Interaction has the given targetIntf
	 * @param targetIntfToCheck targetIntf to compare
	 * @return <code>true</code> if the targetIntfs are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasTargetIntf(edu.uci.isr.xarch.instance.IXMLLink targetIntfToCheck);

	/**
	 * Add a note to this Interaction.
	 * @param newNote note to add.
	 */
	public void addNote(INote newNote);

	/**
	 * Add a collection of notes to this Interaction.
	 * @param notes notes to add.
	 */
	public void addNotes(Collection notes);

	/**
	 * Remove all notes from this Interaction.
	 */
	public void clearNotes();

	/**
	 * Remove the given note from this Interaction.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param noteToRemove note to remove.
	 */
	public void removeNote(INote noteToRemove);

	/**
	 * Remove all the given notes from this Interaction.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param notes note to remove.
	 */
	public void removeNotes(Collection notes);

	/**
	 * Get all the notes from this Interaction.
	 * @return all notes in this Interaction.
	 */
	public Collection getAllNotes();

	/**
	 * Determine if this Interaction contains a given note.
	 * @return <code>true</code> if this Interaction contains the given
	 * noteToCheck, <code>false</code> otherwise.
	 */
	public boolean hasNote(INote noteToCheck);

	/**
	 * Determine if this Interaction contains the given set of notes.
	 * @param notesToCheck notes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>notes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasNotes(Collection notesToCheck);

	/**
	 * Determine if this Interaction contains each element in the 
	 * given set of notes.
	 * @param notesToCheck notes to check for.
	 * @return <code>true</code> if every element in
	 * <code>notes</code> is found in this Interaction,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllNotes(Collection notesToCheck);

	/**
	 * Gets the note from this Interaction with the given
	 * id.
	 * @param id ID to look for.
	 * @return note with the given ID, or <code>null</code> if not found.
	 */
	public INote getNote(String id);

	/**
	 * Gets the notes from this Interaction with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return notes with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getNotes(Collection ids);


	/**
	 * Add a lifeline to this Interaction.
	 * @param newLifeline lifeline to add.
	 */
	public void addLifeline(ILifeLine newLifeline);

	/**
	 * Add a collection of lifelines to this Interaction.
	 * @param lifelines lifelines to add.
	 */
	public void addLifelines(Collection lifelines);

	/**
	 * Remove all lifelines from this Interaction.
	 */
	public void clearLifelines();

	/**
	 * Remove the given lifeline from this Interaction.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param lifelineToRemove lifeline to remove.
	 */
	public void removeLifeline(ILifeLine lifelineToRemove);

	/**
	 * Remove all the given lifelines from this Interaction.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param lifelines lifeline to remove.
	 */
	public void removeLifelines(Collection lifelines);

	/**
	 * Get all the lifelines from this Interaction.
	 * @return all lifelines in this Interaction.
	 */
	public Collection getAllLifelines();

	/**
	 * Determine if this Interaction contains a given lifeline.
	 * @return <code>true</code> if this Interaction contains the given
	 * lifelineToCheck, <code>false</code> otherwise.
	 */
	public boolean hasLifeline(ILifeLine lifelineToCheck);

	/**
	 * Determine if this Interaction contains the given set of lifelines.
	 * @param lifelinesToCheck lifelines to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>lifelines</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasLifelines(Collection lifelinesToCheck);

	/**
	 * Determine if this Interaction contains each element in the 
	 * given set of lifelines.
	 * @param lifelinesToCheck lifelines to check for.
	 * @return <code>true</code> if every element in
	 * <code>lifelines</code> is found in this Interaction,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllLifelines(Collection lifelinesToCheck);

	/**
	 * Gets the lifeline from this Interaction with the given
	 * id.
	 * @param id ID to look for.
	 * @return lifeline with the given ID, or <code>null</code> if not found.
	 */
	public ILifeLine getLifeline(String id);

	/**
	 * Gets the lifelines from this Interaction with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return lifelines with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getLifelines(Collection ids);


	/**
	 * Add a message to this Interaction.
	 * @param newMessage message to add.
	 */
	public void addMessage(IMessage newMessage);

	/**
	 * Add a collection of messages to this Interaction.
	 * @param messages messages to add.
	 */
	public void addMessages(Collection messages);

	/**
	 * Remove all messages from this Interaction.
	 */
	public void clearMessages();

	/**
	 * Remove the given message from this Interaction.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param messageToRemove message to remove.
	 */
	public void removeMessage(IMessage messageToRemove);

	/**
	 * Remove all the given messages from this Interaction.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param messages message to remove.
	 */
	public void removeMessages(Collection messages);

	/**
	 * Get all the messages from this Interaction.
	 * @return all messages in this Interaction.
	 */
	public Collection getAllMessages();

	/**
	 * Determine if this Interaction contains a given message.
	 * @return <code>true</code> if this Interaction contains the given
	 * messageToCheck, <code>false</code> otherwise.
	 */
	public boolean hasMessage(IMessage messageToCheck);

	/**
	 * Determine if this Interaction contains the given set of messages.
	 * @param messagesToCheck messages to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>messages</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasMessages(Collection messagesToCheck);

	/**
	 * Determine if this Interaction contains each element in the 
	 * given set of messages.
	 * @param messagesToCheck messages to check for.
	 * @return <code>true</code> if every element in
	 * <code>messages</code> is found in this Interaction,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllMessages(Collection messagesToCheck);

	/**
	 * Gets the message from this Interaction with the given
	 * id.
	 * @param id ID to look for.
	 * @return message with the given ID, or <code>null</code> if not found.
	 */
	public IMessage getMessage(String id);

	/**
	 * Gets the messages from this Interaction with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return messages with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getMessages(Collection ids);

	/**
	 * Determine if another Interaction has the same
	 * id as this one.
	 * @param InteractionToCheck Interaction to compare with this
	 * one.
	 */
	public boolean isEqual(IInteraction InteractionToCheck);
	/**
	 * Determine if another Interaction is equivalent to this one, ignoring
	 * ID's.
	 * @param InteractionToCheck Interaction to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Interaction are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IInteraction InteractionToCheck);

}
