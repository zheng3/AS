package edu.uci.isr.archstudio4.comp.booleannotation;


/* Generated By:JJTree: Do not edit this line. BPInSetNode.java */

import edu.uci.isr.xarchflat.ObjRef;
import edu.uci.isr.xarchflat.XArchFlatInterface;

/**
 * In-Set expression.
 *
 * @author Rob Egelink (egelink@ics.uci.edu)
 */

public class BPInSetNode extends SimpleNode
{

    public BPInSetNode( int id )
    {
        super( id );
        operands = new java.util.Vector();
    }

    public BPInSetNode( Boolean p, int id )
    {
        super( p, id );
        operands = new java.util.Vector();
    }

   /**
    * Returns the in-set expression stored in an object of type
    * BooleanExp.
    * @param context A boolguard context.
    * @param xarch An XArchADT proxy.
    * @return in-set expression
    */
    public ObjRef toXArch( ObjRef context, XArchFlatInterface xarch )
    {
        ObjRef inset = xarch.create( context, "InSet" );

        ObjRef name = xarch.create( context, "Symbol" );
        xarch.set( name, "Value", symbolname );
        xarch.set( inset, "Symbol", name );

        ObjRef op;

        for ( int i = 0; i < operands.size(); ++i )
        {
            op = xarch.create( context, "Value" );
            xarch.set( op, "Value", ( String ) operands.elementAt( i ) );
            xarch.add( inset, "Value", op );
        }

        ObjRef boolexp = xarch.create( context, "BooleanExp" );
        xarch.set( boolexp, "InSet", inset );

        return boolexp;
    }

    /**
     * Returns a human readable representation of the expression stored
     * in a in-set node.
     * @return in-set expression.
     */
    public String toString()
    {
        StringBuffer s = new StringBuffer( new String( symbolname + " @ {" ) );

        for ( int i = 0; i < operands.size() - 1; ++i )
        {
            s.append( ( String ) operands.elementAt( i ) + ", " );
        }

        s.append( ( String ) operands.elementAt( operands.size() - 1 ) + "}" );

        return s.toString();
    }

    protected String symbolname;
    protected java.util.Vector operands;
}
