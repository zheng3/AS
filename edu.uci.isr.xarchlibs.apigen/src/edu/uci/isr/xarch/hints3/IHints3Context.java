/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.hints3;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context interface for the hints3 package.
 * This interface is used to create objects that are used
 * in the hints3 namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public interface IHints3Context extends IXArchContext{

	/**
	 * Create an IPropertyValue object in this namespace.
	 * @return New IPropertyValue object.
	 */
	public IPropertyValue createPropertyValue();

	/**
	 * Brings an IPropertyValue object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPropertyValue recontextualizePropertyValue(IPropertyValue value);

	/**
	 * Create an IProperty object in this namespace.
	 * @return New IProperty object.
	 */
	public IProperty createProperty();

	/**
	 * Brings an IProperty object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IProperty recontextualizeProperty(IProperty value);

	/**
	 * Create an IHintedElement object in this namespace.
	 * @return New IHintedElement object.
	 */
	public IHintedElement createHintedElement();

	/**
	 * Brings an IHintedElement object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IHintedElement recontextualizeHintedElement(IHintedElement value);

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink();

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Create an IHintBundle object in this namespace.
	 * @return New IHintBundle object.
	 */
	public IHintBundle createHintBundle();

	/**
	 * Brings an IHintBundle object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IHintBundle recontextualizeHintBundle(IHintBundle value);

	/**
	 * Promote an object of type <code>IHintedElement</code>
	 * to one of type <code>IHintBundle</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>IHintedElement</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IHintBundle promoteToHintBundle(
	IHintedElement value);

	/**
	 * Create an IRenderingHints3 object in this namespace.
	 * @return New IRenderingHints3 object.
	 */
	public IRenderingHints3 createRenderingHints3();

	/**
	 * Brings an IRenderingHints3 object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRenderingHints3 recontextualizeRenderingHints3(IRenderingHints3 value);

	/**
	 * Create a top-level element of type <code>IRenderingHints3</code>.
	 * This function should be used in lieu of <code>createRenderingHints3</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IRenderingHints3 suitable for adding
	 * as a child of xArch.
	 */
	public IRenderingHints3 createRenderingHints3Element();

	/**
	 * Gets the IRenderingHints3 child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IRenderingHints3</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IRenderingHints3 getRenderingHints3(IXArch xArch);

	/**
	 * Gets all the IRenderingHints3 children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IRenderingHints3</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllRenderingHints3s(IXArch xArch);


	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_CONTEXT,
		"hints3", null, null,
		new XArchPropertyMetadata[]{},
		new XArchActionMetadata[]{
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IPropertyValue.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IPropertyValue.TYPE_METADATA, IPropertyValue.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IProperty.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IProperty.TYPE_METADATA, IProperty.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IHintedElement.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IHintedElement.TYPE_METADATA, IHintedElement.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, edu.uci.isr.xarch.instance.IXMLLink.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, edu.uci.isr.xarch.instance.IXMLLink.TYPE_METADATA, edu.uci.isr.xarch.instance.IXMLLink.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IHintBundle.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IHintBundle.TYPE_METADATA, IHintBundle.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.PROMOTE, IHintedElement.TYPE_METADATA, IHintBundle.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IRenderingHints3.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IRenderingHints3.TYPE_METADATA, IRenderingHints3.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE_ELEMENT, null, IRenderingHints3.TYPE_METADATA)});

}

