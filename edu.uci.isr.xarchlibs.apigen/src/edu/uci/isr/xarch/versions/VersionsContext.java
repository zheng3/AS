/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.versions;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context object for the versions package.
 * This object is used to create objects that are used
 * in the versions namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public class VersionsContext implements IVersionsContext {

	protected static final String DEFAULT_ELT_NAME = "anonymousInstanceTag";
	protected Document doc;
	protected IXArch xArch;

	/**
	 * Create a new VersionsContext for the given
	 * IXArch object.
	 * @param xArch XArch object to contextualize in this namespace.
	 */
	public VersionsContext(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Node docRootNode = ((DOMBased)xArch).getDOMNode();
		synchronized(DOMUtils.getDOMLock(docRootNode)){
			this.doc = docRootNode.getOwnerDocument();
			xArch.addSchemaLocation("http://www.ics.uci.edu/pub/arch/xArch/versions.xsd", "http://www.isr.uci.edu/projects/xarchuci/ext/versions.xsd");
			this.xArch = xArch;
		}
	}

	public IXArch getXArch(){
		return xArch;
	}
	
	protected Element createElement(String name){
		synchronized(DOMUtils.getDOMLock(doc)){
			return doc.createElementNS(VersionsConstants.NS_URI, name);
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IVersionsContext.TYPE_METADATA;
	}
	/**
	 * Create an IVersionID object in this namespace.
	 * @return New IVersionID object.
	 */
	public IVersionID createVersionID(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VersionIDImpl.XSD_TYPE_NSURI, VersionIDImpl.XSD_TYPE_NAME);
		VersionIDImpl newElt = new VersionIDImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVersionID object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVersionID recontextualizeVersionID(IVersionID value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an INode object in this namespace.
	 * @return New INode object.
	 */
	public INode createNode(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, NodeImpl.XSD_TYPE_NSURI, NodeImpl.XSD_TYPE_NAME);
		NodeImpl newElt = new NodeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an INode object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public INode recontextualizeNode(INode value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.XMLLinkImpl newElt = new edu.uci.isr.xarch.instance.XMLLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IComponentTypeVersionGraph object in this namespace.
	 * @return New IComponentTypeVersionGraph object.
	 */
	public IComponentTypeVersionGraph createComponentTypeVersionGraph(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ComponentTypeVersionGraphImpl.XSD_TYPE_NSURI, ComponentTypeVersionGraphImpl.XSD_TYPE_NAME);
		ComponentTypeVersionGraphImpl newElt = new ComponentTypeVersionGraphImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IComponentTypeVersionGraph object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IComponentTypeVersionGraph recontextualizeComponentTypeVersionGraph(IComponentTypeVersionGraph value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DescriptionImpl newElt = new edu.uci.isr.xarch.instance.DescriptionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IConnectorTypeVersionGraph object in this namespace.
	 * @return New IConnectorTypeVersionGraph object.
	 */
	public IConnectorTypeVersionGraph createConnectorTypeVersionGraph(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ConnectorTypeVersionGraphImpl.XSD_TYPE_NSURI, ConnectorTypeVersionGraphImpl.XSD_TYPE_NAME);
		ConnectorTypeVersionGraphImpl newElt = new ConnectorTypeVersionGraphImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IConnectorTypeVersionGraph object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IConnectorTypeVersionGraph recontextualizeConnectorTypeVersionGraph(IConnectorTypeVersionGraph value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IInterfaceTypeVersionGraph object in this namespace.
	 * @return New IInterfaceTypeVersionGraph object.
	 */
	public IInterfaceTypeVersionGraph createInterfaceTypeVersionGraph(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InterfaceTypeVersionGraphImpl.XSD_TYPE_NSURI, InterfaceTypeVersionGraphImpl.XSD_TYPE_NAME);
		InterfaceTypeVersionGraphImpl newElt = new InterfaceTypeVersionGraphImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInterfaceTypeVersionGraph object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInterfaceTypeVersionGraph recontextualizeInterfaceTypeVersionGraph(IInterfaceTypeVersionGraph value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IArchVersions object in this namespace.
	 * @return New IArchVersions object.
	 */
	public IArchVersions createArchVersions(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ArchVersionsImpl.XSD_TYPE_NSURI, ArchVersionsImpl.XSD_TYPE_NAME);
		ArchVersionsImpl newElt = new ArchVersionsImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IArchVersions object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IArchVersions recontextualizeArchVersions(IArchVersions value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IVariantComponentTypeImplVers object in this namespace.
	 * @return New IVariantComponentTypeImplVers object.
	 */
	public IVariantComponentTypeImplVers createVariantComponentTypeImplVers(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VariantComponentTypeImplVersImpl.XSD_TYPE_NSURI, VariantComponentTypeImplVersImpl.XSD_TYPE_NAME);
		VariantComponentTypeImplVersImpl newElt = new VariantComponentTypeImplVersImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVariantComponentTypeImplVers object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVariantComponentTypeImplVers recontextualizeVariantComponentTypeImplVers(IVariantComponentTypeImplVers value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.implementation.IVariantComponentTypeImpl</code>
	 * to one of type <code>IVariantComponentTypeImplVers</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.implementation.IVariantComponentTypeImpl</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IVariantComponentTypeImplVers promoteToVariantComponentTypeImplVers(
	edu.uci.isr.xarch.implementation.IVariantComponentTypeImpl value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.implementation.VariantComponentTypeImplImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.implementation.VariantComponentTypeImplImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, VariantComponentTypeImplVersImpl.XSD_TYPE_NSURI, 
					VariantComponentTypeImplVersImpl.XSD_TYPE_NAME);
		}
		VariantComponentTypeImplVersImpl newElt = new VariantComponentTypeImplVersImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IVariantComponentTypeImplVers.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IVariantConnectorTypeImplVers object in this namespace.
	 * @return New IVariantConnectorTypeImplVers object.
	 */
	public IVariantConnectorTypeImplVers createVariantConnectorTypeImplVers(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VariantConnectorTypeImplVersImpl.XSD_TYPE_NSURI, VariantConnectorTypeImplVersImpl.XSD_TYPE_NAME);
		VariantConnectorTypeImplVersImpl newElt = new VariantConnectorTypeImplVersImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVariantConnectorTypeImplVers object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVariantConnectorTypeImplVers recontextualizeVariantConnectorTypeImplVers(IVariantConnectorTypeImplVers value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.implementation.IVariantConnectorTypeImpl</code>
	 * to one of type <code>IVariantConnectorTypeImplVers</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.implementation.IVariantConnectorTypeImpl</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IVariantConnectorTypeImplVers promoteToVariantConnectorTypeImplVers(
	edu.uci.isr.xarch.implementation.IVariantConnectorTypeImpl value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.implementation.VariantConnectorTypeImplImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.implementation.VariantConnectorTypeImplImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, VariantConnectorTypeImplVersImpl.XSD_TYPE_NSURI, 
					VariantConnectorTypeImplVersImpl.XSD_TYPE_NAME);
		}
		VariantConnectorTypeImplVersImpl newElt = new VariantConnectorTypeImplVersImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IVariantConnectorTypeImplVers.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IInterfaceTypeImplVers object in this namespace.
	 * @return New IInterfaceTypeImplVers object.
	 */
	public IInterfaceTypeImplVers createInterfaceTypeImplVers(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InterfaceTypeImplVersImpl.XSD_TYPE_NSURI, InterfaceTypeImplVersImpl.XSD_TYPE_NAME);
		InterfaceTypeImplVersImpl newElt = new InterfaceTypeImplVersImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInterfaceTypeImplVers object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInterfaceTypeImplVers recontextualizeInterfaceTypeImplVers(IInterfaceTypeImplVers value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, VersionsConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, VersionsConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.implementation.IInterfaceTypeImpl</code>
	 * to one of type <code>IInterfaceTypeImplVers</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.implementation.IInterfaceTypeImpl</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IInterfaceTypeImplVers promoteToInterfaceTypeImplVers(
	edu.uci.isr.xarch.implementation.IInterfaceTypeImpl value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.implementation.InterfaceTypeImplImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.implementation.InterfaceTypeImplImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, InterfaceTypeImplVersImpl.XSD_TYPE_NSURI, 
					InterfaceTypeImplVersImpl.XSD_TYPE_NAME);
		}
		InterfaceTypeImplVersImpl newElt = new InterfaceTypeImplVersImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IInterfaceTypeImplVers.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create a top-level element of type <code>IArchVersions</code>.
	 * This function should be used in lieu of <code>createArchVersions</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IArchVersions suitable for adding
	 * as a child of xArch.
	 */
	public IArchVersions createArchVersionsElement(){
		Element elt = createElement("archVersions");
		DOMUtils.addXSIType(elt, ArchVersionsImpl.XSD_TYPE_NSURI, 
			ArchVersionsImpl.XSD_TYPE_NAME);
		ArchVersionsImpl newElt = new ArchVersionsImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IArchVersions child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IArchVersions</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IArchVersions getArchVersions(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchVersions){
				return (IArchVersions)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(VersionsConstants.NS_URI))){
						if((localName != null) && (localName.equals("archVersions"))){
							ArchVersionsImpl newElt = new ArchVersionsImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IArchVersions children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IArchVersions</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllArchVersionss(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector v = new Vector();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchVersions){
				v.addElement(o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(VersionsConstants.NS_URI))){
						if((localName != null) && (localName.equals("archVersions"))){
							ArchVersionsImpl newElt = new ArchVersionsImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}

}

