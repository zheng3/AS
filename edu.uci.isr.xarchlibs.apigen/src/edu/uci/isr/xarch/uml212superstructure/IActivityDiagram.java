/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.uml212superstructure;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ActivityDiagram <code>xsi:type</code> in the
 * uml212superstructure namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IActivityDiagram extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"uml212superstructure", "ActivityDiagram", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("action", "uml212superstructure", "Action", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("activityFinalNode", "uml212superstructure", "ActivityFinalNode", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("controlFlow", "uml212superstructure", "ControlFlow", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("decisionNode", "uml212superstructure", "DecisionNode", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("forkNode", "uml212superstructure", "ForkNode", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("initialNode", "uml212superstructure", "InitialNode", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("joinNode", "uml212superstructure", "JoinNode", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("mergeNode", "uml212superstructure", "MergeNode", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("objectFlow", "uml212superstructure", "ObjectFlow", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this ActivityDiagram.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this ActivityDiagram.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this ActivityDiagram.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this ActivityDiagram
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this ActivityDiagram
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this ActivityDiagram.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this ActivityDiagram.
	 */
	public void clearDescription();

	/**
	 * Get the description from this ActivityDiagram.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this ActivityDiagram has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Add a action to this ActivityDiagram.
	 * @param newAction action to add.
	 */
	public void addAction(IAction newAction);

	/**
	 * Add a collection of actions to this ActivityDiagram.
	 * @param actions actions to add.
	 */
	public void addActions(Collection actions);

	/**
	 * Remove all actions from this ActivityDiagram.
	 */
	public void clearActions();

	/**
	 * Remove the given action from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param actionToRemove action to remove.
	 */
	public void removeAction(IAction actionToRemove);

	/**
	 * Remove all the given actions from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param actions action to remove.
	 */
	public void removeActions(Collection actions);

	/**
	 * Get all the actions from this ActivityDiagram.
	 * @return all actions in this ActivityDiagram.
	 */
	public Collection getAllActions();

	/**
	 * Determine if this ActivityDiagram contains a given action.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * actionToCheck, <code>false</code> otherwise.
	 */
	public boolean hasAction(IAction actionToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of actions.
	 * @param actionsToCheck actions to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>actions</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasActions(Collection actionsToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of actions.
	 * @param actionsToCheck actions to check for.
	 * @return <code>true</code> if every element in
	 * <code>actions</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllActions(Collection actionsToCheck);

	/**
	 * Gets the action from this ActivityDiagram with the given
	 * id.
	 * @param id ID to look for.
	 * @return action with the given ID, or <code>null</code> if not found.
	 */
	public IAction getAction(String id);

	/**
	 * Gets the actions from this ActivityDiagram with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return actions with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getActions(Collection ids);


	/**
	 * Add a activityFinalNode to this ActivityDiagram.
	 * @param newActivityFinalNode activityFinalNode to add.
	 */
	public void addActivityFinalNode(IActivityFinalNode newActivityFinalNode);

	/**
	 * Add a collection of activityFinalNodes to this ActivityDiagram.
	 * @param activityFinalNodes activityFinalNodes to add.
	 */
	public void addActivityFinalNodes(Collection activityFinalNodes);

	/**
	 * Remove all activityFinalNodes from this ActivityDiagram.
	 */
	public void clearActivityFinalNodes();

	/**
	 * Remove the given activityFinalNode from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param activityFinalNodeToRemove activityFinalNode to remove.
	 */
	public void removeActivityFinalNode(IActivityFinalNode activityFinalNodeToRemove);

	/**
	 * Remove all the given activityFinalNodes from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param activityFinalNodes activityFinalNode to remove.
	 */
	public void removeActivityFinalNodes(Collection activityFinalNodes);

	/**
	 * Get all the activityFinalNodes from this ActivityDiagram.
	 * @return all activityFinalNodes in this ActivityDiagram.
	 */
	public Collection getAllActivityFinalNodes();

	/**
	 * Determine if this ActivityDiagram contains a given activityFinalNode.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * activityFinalNodeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasActivityFinalNode(IActivityFinalNode activityFinalNodeToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of activityFinalNodes.
	 * @param activityFinalNodesToCheck activityFinalNodes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>activityFinalNodes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasActivityFinalNodes(Collection activityFinalNodesToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of activityFinalNodes.
	 * @param activityFinalNodesToCheck activityFinalNodes to check for.
	 * @return <code>true</code> if every element in
	 * <code>activityFinalNodes</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllActivityFinalNodes(Collection activityFinalNodesToCheck);


	/**
	 * Add a controlFlow to this ActivityDiagram.
	 * @param newControlFlow controlFlow to add.
	 */
	public void addControlFlow(IControlFlow newControlFlow);

	/**
	 * Add a collection of controlFlows to this ActivityDiagram.
	 * @param controlFlows controlFlows to add.
	 */
	public void addControlFlows(Collection controlFlows);

	/**
	 * Remove all controlFlows from this ActivityDiagram.
	 */
	public void clearControlFlows();

	/**
	 * Remove the given controlFlow from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param controlFlowToRemove controlFlow to remove.
	 */
	public void removeControlFlow(IControlFlow controlFlowToRemove);

	/**
	 * Remove all the given controlFlows from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param controlFlows controlFlow to remove.
	 */
	public void removeControlFlows(Collection controlFlows);

	/**
	 * Get all the controlFlows from this ActivityDiagram.
	 * @return all controlFlows in this ActivityDiagram.
	 */
	public Collection getAllControlFlows();

	/**
	 * Determine if this ActivityDiagram contains a given controlFlow.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * controlFlowToCheck, <code>false</code> otherwise.
	 */
	public boolean hasControlFlow(IControlFlow controlFlowToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of controlFlows.
	 * @param controlFlowsToCheck controlFlows to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>controlFlows</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasControlFlows(Collection controlFlowsToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of controlFlows.
	 * @param controlFlowsToCheck controlFlows to check for.
	 * @return <code>true</code> if every element in
	 * <code>controlFlows</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllControlFlows(Collection controlFlowsToCheck);


	/**
	 * Add a decisionNode to this ActivityDiagram.
	 * @param newDecisionNode decisionNode to add.
	 */
	public void addDecisionNode(IDecisionNode newDecisionNode);

	/**
	 * Add a collection of decisionNodes to this ActivityDiagram.
	 * @param decisionNodes decisionNodes to add.
	 */
	public void addDecisionNodes(Collection decisionNodes);

	/**
	 * Remove all decisionNodes from this ActivityDiagram.
	 */
	public void clearDecisionNodes();

	/**
	 * Remove the given decisionNode from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param decisionNodeToRemove decisionNode to remove.
	 */
	public void removeDecisionNode(IDecisionNode decisionNodeToRemove);

	/**
	 * Remove all the given decisionNodes from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param decisionNodes decisionNode to remove.
	 */
	public void removeDecisionNodes(Collection decisionNodes);

	/**
	 * Get all the decisionNodes from this ActivityDiagram.
	 * @return all decisionNodes in this ActivityDiagram.
	 */
	public Collection getAllDecisionNodes();

	/**
	 * Determine if this ActivityDiagram contains a given decisionNode.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * decisionNodeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasDecisionNode(IDecisionNode decisionNodeToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of decisionNodes.
	 * @param decisionNodesToCheck decisionNodes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>decisionNodes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasDecisionNodes(Collection decisionNodesToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of decisionNodes.
	 * @param decisionNodesToCheck decisionNodes to check for.
	 * @return <code>true</code> if every element in
	 * <code>decisionNodes</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllDecisionNodes(Collection decisionNodesToCheck);


	/**
	 * Add a forkNode to this ActivityDiagram.
	 * @param newForkNode forkNode to add.
	 */
	public void addForkNode(IForkNode newForkNode);

	/**
	 * Add a collection of forkNodes to this ActivityDiagram.
	 * @param forkNodes forkNodes to add.
	 */
	public void addForkNodes(Collection forkNodes);

	/**
	 * Remove all forkNodes from this ActivityDiagram.
	 */
	public void clearForkNodes();

	/**
	 * Remove the given forkNode from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param forkNodeToRemove forkNode to remove.
	 */
	public void removeForkNode(IForkNode forkNodeToRemove);

	/**
	 * Remove all the given forkNodes from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param forkNodes forkNode to remove.
	 */
	public void removeForkNodes(Collection forkNodes);

	/**
	 * Get all the forkNodes from this ActivityDiagram.
	 * @return all forkNodes in this ActivityDiagram.
	 */
	public Collection getAllForkNodes();

	/**
	 * Determine if this ActivityDiagram contains a given forkNode.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * forkNodeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasForkNode(IForkNode forkNodeToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of forkNodes.
	 * @param forkNodesToCheck forkNodes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>forkNodes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasForkNodes(Collection forkNodesToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of forkNodes.
	 * @param forkNodesToCheck forkNodes to check for.
	 * @return <code>true</code> if every element in
	 * <code>forkNodes</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllForkNodes(Collection forkNodesToCheck);


	/**
	 * Add a initialNode to this ActivityDiagram.
	 * @param newInitialNode initialNode to add.
	 */
	public void addInitialNode(IInitialNode newInitialNode);

	/**
	 * Add a collection of initialNodes to this ActivityDiagram.
	 * @param initialNodes initialNodes to add.
	 */
	public void addInitialNodes(Collection initialNodes);

	/**
	 * Remove all initialNodes from this ActivityDiagram.
	 */
	public void clearInitialNodes();

	/**
	 * Remove the given initialNode from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param initialNodeToRemove initialNode to remove.
	 */
	public void removeInitialNode(IInitialNode initialNodeToRemove);

	/**
	 * Remove all the given initialNodes from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param initialNodes initialNode to remove.
	 */
	public void removeInitialNodes(Collection initialNodes);

	/**
	 * Get all the initialNodes from this ActivityDiagram.
	 * @return all initialNodes in this ActivityDiagram.
	 */
	public Collection getAllInitialNodes();

	/**
	 * Determine if this ActivityDiagram contains a given initialNode.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * initialNodeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasInitialNode(IInitialNode initialNodeToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of initialNodes.
	 * @param initialNodesToCheck initialNodes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>initialNodes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasInitialNodes(Collection initialNodesToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of initialNodes.
	 * @param initialNodesToCheck initialNodes to check for.
	 * @return <code>true</code> if every element in
	 * <code>initialNodes</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllInitialNodes(Collection initialNodesToCheck);


	/**
	 * Add a joinNode to this ActivityDiagram.
	 * @param newJoinNode joinNode to add.
	 */
	public void addJoinNode(IJoinNode newJoinNode);

	/**
	 * Add a collection of joinNodes to this ActivityDiagram.
	 * @param joinNodes joinNodes to add.
	 */
	public void addJoinNodes(Collection joinNodes);

	/**
	 * Remove all joinNodes from this ActivityDiagram.
	 */
	public void clearJoinNodes();

	/**
	 * Remove the given joinNode from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param joinNodeToRemove joinNode to remove.
	 */
	public void removeJoinNode(IJoinNode joinNodeToRemove);

	/**
	 * Remove all the given joinNodes from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param joinNodes joinNode to remove.
	 */
	public void removeJoinNodes(Collection joinNodes);

	/**
	 * Get all the joinNodes from this ActivityDiagram.
	 * @return all joinNodes in this ActivityDiagram.
	 */
	public Collection getAllJoinNodes();

	/**
	 * Determine if this ActivityDiagram contains a given joinNode.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * joinNodeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasJoinNode(IJoinNode joinNodeToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of joinNodes.
	 * @param joinNodesToCheck joinNodes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>joinNodes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasJoinNodes(Collection joinNodesToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of joinNodes.
	 * @param joinNodesToCheck joinNodes to check for.
	 * @return <code>true</code> if every element in
	 * <code>joinNodes</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllJoinNodes(Collection joinNodesToCheck);


	/**
	 * Add a mergeNode to this ActivityDiagram.
	 * @param newMergeNode mergeNode to add.
	 */
	public void addMergeNode(IMergeNode newMergeNode);

	/**
	 * Add a collection of mergeNodes to this ActivityDiagram.
	 * @param mergeNodes mergeNodes to add.
	 */
	public void addMergeNodes(Collection mergeNodes);

	/**
	 * Remove all mergeNodes from this ActivityDiagram.
	 */
	public void clearMergeNodes();

	/**
	 * Remove the given mergeNode from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param mergeNodeToRemove mergeNode to remove.
	 */
	public void removeMergeNode(IMergeNode mergeNodeToRemove);

	/**
	 * Remove all the given mergeNodes from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param mergeNodes mergeNode to remove.
	 */
	public void removeMergeNodes(Collection mergeNodes);

	/**
	 * Get all the mergeNodes from this ActivityDiagram.
	 * @return all mergeNodes in this ActivityDiagram.
	 */
	public Collection getAllMergeNodes();

	/**
	 * Determine if this ActivityDiagram contains a given mergeNode.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * mergeNodeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasMergeNode(IMergeNode mergeNodeToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of mergeNodes.
	 * @param mergeNodesToCheck mergeNodes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>mergeNodes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasMergeNodes(Collection mergeNodesToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of mergeNodes.
	 * @param mergeNodesToCheck mergeNodes to check for.
	 * @return <code>true</code> if every element in
	 * <code>mergeNodes</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllMergeNodes(Collection mergeNodesToCheck);


	/**
	 * Add a objectFlow to this ActivityDiagram.
	 * @param newObjectFlow objectFlow to add.
	 */
	public void addObjectFlow(IObjectFlow newObjectFlow);

	/**
	 * Add a collection of objectFlows to this ActivityDiagram.
	 * @param objectFlows objectFlows to add.
	 */
	public void addObjectFlows(Collection objectFlows);

	/**
	 * Remove all objectFlows from this ActivityDiagram.
	 */
	public void clearObjectFlows();

	/**
	 * Remove the given objectFlow from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param objectFlowToRemove objectFlow to remove.
	 */
	public void removeObjectFlow(IObjectFlow objectFlowToRemove);

	/**
	 * Remove all the given objectFlows from this ActivityDiagram.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param objectFlows objectFlow to remove.
	 */
	public void removeObjectFlows(Collection objectFlows);

	/**
	 * Get all the objectFlows from this ActivityDiagram.
	 * @return all objectFlows in this ActivityDiagram.
	 */
	public Collection getAllObjectFlows();

	/**
	 * Determine if this ActivityDiagram contains a given objectFlow.
	 * @return <code>true</code> if this ActivityDiagram contains the given
	 * objectFlowToCheck, <code>false</code> otherwise.
	 */
	public boolean hasObjectFlow(IObjectFlow objectFlowToCheck);

	/**
	 * Determine if this ActivityDiagram contains the given set of objectFlows.
	 * @param objectFlowsToCheck objectFlows to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>objectFlows</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasObjectFlows(Collection objectFlowsToCheck);

	/**
	 * Determine if this ActivityDiagram contains each element in the 
	 * given set of objectFlows.
	 * @param objectFlowsToCheck objectFlows to check for.
	 * @return <code>true</code> if every element in
	 * <code>objectFlows</code> is found in this ActivityDiagram,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllObjectFlows(Collection objectFlowsToCheck);

	/**
	 * Determine if another ActivityDiagram has the same
	 * id as this one.
	 * @param ActivityDiagramToCheck ActivityDiagram to compare with this
	 * one.
	 */
	public boolean isEqual(IActivityDiagram ActivityDiagramToCheck);
	/**
	 * Determine if another ActivityDiagram is equivalent to this one, ignoring
	 * ID's.
	 * @param ActivityDiagramToCheck ActivityDiagram to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ActivityDiagram are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IActivityDiagram ActivityDiagramToCheck);

}
