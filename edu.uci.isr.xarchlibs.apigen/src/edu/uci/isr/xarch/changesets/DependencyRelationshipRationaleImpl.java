/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.changesets;

import org.w3c.dom.*;

import edu.uci.isr.xarch.*;

import java.util.*;

/**
 * DOM-Based implementation of the IDependencyRelationshipRationale interface.
 *
 * @author Automatically generated by xArch apigen.
 */
public class DependencyRelationshipRationaleImpl extends RelationshipRationaleImpl implements
IDependencyRelationshipRationale, IRelationshipRationale, DOMBased{
	
	public static final String XSD_TYPE_NSURI = ChangesetsConstants.NS_URI;
	public static final String XSD_TYPE_NAME = "DependencyRelationshipRationale";

	/** Tag name for sources in this object. */
	public static final String SOURCE_ELT_NAME = "source";
	/** Tag name for requiress in this object. */
	public static final String REQUIRES_ELT_NAME = "requires";

	
	private static SequenceOrder seqOrderAppend = new SequenceOrder(
		new QName[]{
			new QName(ChangesetsConstants.NS_URI, SOURCE_ELT_NAME),
			new QName(ChangesetsConstants.NS_URI, REQUIRES_ELT_NAME)
		}
	);
	
	public DependencyRelationshipRationaleImpl(Element elt){
		super(elt);
	}
	
	protected static SequenceOrder getSequenceOrder(){
		return new SequenceOrder(RelationshipRationaleImpl.getSequenceOrder(), seqOrderAppend);
	}

	public IXArchElement cloneElement(int depth){
		synchronized(DOMUtils.getDOMLock(elt)){
			Document doc = elt.getOwnerDocument();
			if(depth == 0){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				DependencyRelationshipRationaleImpl cloneImpl = new DependencyRelationshipRationaleImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
			else if(depth == 1){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				DependencyRelationshipRationaleImpl cloneImpl = new DependencyRelationshipRationaleImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				
				NodeList nl = elt.getChildNodes();
				int size = nl.getLength();
				for(int i = 0; i < size; i++){
					Node n = nl.item(i);
					Node cloneNode = (Node)n.cloneNode(false);
					cloneNode = doc.importNode(cloneNode, true);
					cloneElt.appendChild(cloneNode);
				}
				return cloneImpl;
			}
			else /* depth = infinity */{
				Element cloneElt = (Element)elt.cloneNode(true);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				DependencyRelationshipRationaleImpl cloneImpl = new DependencyRelationshipRationaleImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
		}
	}

	/**
	 * For internal use only.
	 */
	private static Object makeDerivedWrapper(Element elt, String baseTypeName){
		synchronized(DOMUtils.getDOMLock(elt)){
			QName typeName = XArchUtils.getXSIType(elt);
			if(typeName == null){
				return null;
			}
			else{
				if(!DOMUtils.hasXSIType(elt, "http://www.ics.uci.edu/pub/arch/xArch/changesets.xsd", baseTypeName)){
					try{
						String packageTitle = XArchUtils.getPackageTitle(typeName.getNamespaceURI());
						String packageName = XArchUtils.getPackageName(packageTitle);
						String implName = XArchUtils.getImplName(packageName, typeName.getName());
						Class c = Class.forName(implName);
						java.lang.reflect.Constructor con = c.getConstructor(new Class[]{Element.class});
						Object o = con.newInstance(new Object[]{elt});
						return o;
					}
					catch(Exception e){
						//Lots of bad things could happen, but this
						//is OK, because this is best-effort anyway.
					}
				}
				return null;
			}
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IDependencyRelationshipRationale.TYPE_METADATA;
	}

	public XArchInstanceMetadata getInstanceMetadata(){
		return new XArchInstanceMetadata(XArchUtils.getPackageTitle(elt.getNamespaceURI()));
	}
	public void addSource(IPathReference newSource){
		if(!(newSource instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newSource).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ChangesetsConstants.NS_URI, SOURCE_ELT_NAME);
		((DOMBased)newSource).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"source", newSource,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addSources(Collection sources){
		for(Iterator en = sources.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			addSource(elt);
		}
	}		
		
	public void clearSources(){
		//DOMUtils.removeChildren(elt, ChangesetsConstants.NS_URI, SOURCE_ELT_NAME);
		Collection coll = getAllSources();
		removeSources(coll);
	}
	
	public void removeSource(IPathReference sourceToRemove){
		if(!(sourceToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, SOURCE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)sourceToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"source", sourceToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeSources(Collection sources){
		for(Iterator en = sources.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			removeSource(elt);
		}
	}
	
	public Collection getAllSources(){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, SOURCE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IPathReference)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "PathReference");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IPathReference)o);
					}
					catch(Exception e){
						PathReferenceImpl eltImpl = new PathReferenceImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					PathReferenceImpl eltImpl = new PathReferenceImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasSource(IPathReference sourceToCheck){
		Collection c = getAllSources();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			if(elt.isEquivalent(sourceToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasSources(Collection sourcesToCheck){
		Vector v = new Vector();
		for(Iterator en = sourcesToCheck.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			v.addElement(new Boolean(hasSource(elt)));
		}
		return v;
	}
		
	public boolean hasAllSources(Collection sourcesToCheck){
		for(Iterator en = sourcesToCheck.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			if(!hasSource(elt)){
				return false;
			}
		}
		return true;
	}
	public void addRequires(IPathReference newRequires){
		if(!(newRequires instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newRequires).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ChangesetsConstants.NS_URI, REQUIRES_ELT_NAME);
		((DOMBased)newRequires).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"requires", newRequires,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addRequiress(Collection requiress){
		for(Iterator en = requiress.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			addRequires(elt);
		}
	}		
		
	public void clearRequiress(){
		//DOMUtils.removeChildren(elt, ChangesetsConstants.NS_URI, REQUIRES_ELT_NAME);
		Collection coll = getAllRequiress();
		removeRequiress(coll);
	}
	
	public void removeRequires(IPathReference requiresToRemove){
		if(!(requiresToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, REQUIRES_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)requiresToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"requires", requiresToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeRequiress(Collection requiress){
		for(Iterator en = requiress.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			removeRequires(elt);
		}
	}
	
	public Collection getAllRequiress(){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, REQUIRES_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IPathReference)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "PathReference");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IPathReference)o);
					}
					catch(Exception e){
						PathReferenceImpl eltImpl = new PathReferenceImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					PathReferenceImpl eltImpl = new PathReferenceImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasRequires(IPathReference requiresToCheck){
		Collection c = getAllRequiress();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			if(elt.isEquivalent(requiresToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasRequiress(Collection requiressToCheck){
		Vector v = new Vector();
		for(Iterator en = requiressToCheck.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			v.addElement(new Boolean(hasRequires(elt)));
		}
		return v;
	}
		
	public boolean hasAllRequiress(Collection requiressToCheck){
		for(Iterator en = requiressToCheck.iterator(); en.hasNext(); ){
			IPathReference elt = (IPathReference)en.next();
			if(!hasRequires(elt)){
				return false;
			}
		}
		return true;
	}
	public boolean isEquivalent(IDependencyRelationshipRationale c){
		return
			super.isEquivalent(c) &&
			hasAllSources(c.getAllSources()) &&
			c.hasAllSources(getAllSources()) &&
			hasAllRequiress(c.getAllRequiress()) &&
			c.hasAllRequiress(getAllRequiress()) ;
	}

}
