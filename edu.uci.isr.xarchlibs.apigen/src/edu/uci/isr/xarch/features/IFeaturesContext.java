/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.features;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context interface for the features package.
 * This interface is used to create objects that are used
 * in the features namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public interface IFeaturesContext extends IXArchContext{

	/**
	 * Create an IArchFeature object in this namespace.
	 * @return New IArchFeature object.
	 */
	public IArchFeature createArchFeature();

	/**
	 * Brings an IArchFeature object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IArchFeature recontextualizeArchFeature(IArchFeature value);

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription();

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Create an IFeature object in this namespace.
	 * @return New IFeature object.
	 */
	public IFeature createFeature();

	/**
	 * Brings an IFeature object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeature recontextualizeFeature(IFeature value);

	/**
	 * Create an IFeatureName object in this namespace.
	 * @return New IFeatureName object.
	 */
	public IFeatureName createFeatureName();

	/**
	 * Brings an IFeatureName object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureName recontextualizeFeatureName(IFeatureName value);

	/**
	 * Create an IFeatureType object in this namespace.
	 * @return New IFeatureType object.
	 */
	public IFeatureType createFeatureType();

	/**
	 * Brings an IFeatureType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureType recontextualizeFeatureType(IFeatureType value);

	/**
	 * Create an IBindingTime object in this namespace.
	 * @return New IBindingTime object.
	 */
	public IBindingTime createBindingTime();

	/**
	 * Brings an IBindingTime object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IBindingTime recontextualizeBindingTime(IBindingTime value);

	/**
	 * Create an IDefaultValue object in this namespace.
	 * @return New IDefaultValue object.
	 */
	public IDefaultValue createDefaultValue();

	/**
	 * Brings an IDefaultValue object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IDefaultValue recontextualizeDefaultValue(IDefaultValue value);

	/**
	 * Create an IFeatureOptions object in this namespace.
	 * @return New IFeatureOptions object.
	 */
	public IFeatureOptions createFeatureOptions();

	/**
	 * Brings an IFeatureOptions object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureOptions recontextualizeFeatureOptions(IFeatureOptions value);

	/**
	 * Create an IFeatureColor object in this namespace.
	 * @return New IFeatureColor object.
	 */
	public IFeatureColor createFeatureColor();

	/**
	 * Brings an IFeatureColor object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureColor recontextualizeFeatureColor(IFeatureColor value);

	/**
	 * Create an IColorValue object in this namespace.
	 * @return New IColorValue object.
	 */
	public IColorValue createColorValue();

	/**
	 * Brings an IColorValue object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IColorValue recontextualizeColorValue(IColorValue value);

	/**
	 * Create an IFeatureSymbol object in this namespace.
	 * @return New IFeatureSymbol object.
	 */
	public IFeatureSymbol createFeatureSymbol();

	/**
	 * Brings an IFeatureSymbol object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureSymbol recontextualizeFeatureSymbol(IFeatureSymbol value);

	/**
	 * Create an IFeatureElements object in this namespace.
	 * @return New IFeatureElements object.
	 */
	public IFeatureElements createFeatureElements();

	/**
	 * Brings an IFeatureElements object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureElements recontextualizeFeatureElements(IFeatureElements value);

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink();

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Create an IOptionalFeature object in this namespace.
	 * @return New IOptionalFeature object.
	 */
	public IOptionalFeature createOptionalFeature();

	/**
	 * Brings an IOptionalFeature object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IOptionalFeature recontextualizeOptionalFeature(IOptionalFeature value);

	/**
	 * Promote an object of type <code>IFeature</code>
	 * to one of type <code>IOptionalFeature</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>IFeature</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IOptionalFeature promoteToOptionalFeature(
	IFeature value);

	/**
	 * Create an IAlternativeFeature object in this namespace.
	 * @return New IAlternativeFeature object.
	 */
	public IAlternativeFeature createAlternativeFeature();

	/**
	 * Brings an IAlternativeFeature object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAlternativeFeature recontextualizeAlternativeFeature(IAlternativeFeature value);

	/**
	 * Promote an object of type <code>IFeature</code>
	 * to one of type <code>IAlternativeFeature</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>IFeature</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IAlternativeFeature promoteToAlternativeFeature(
	IFeature value);

	/**
	 * Create an IFeatureVarients object in this namespace.
	 * @return New IFeatureVarients object.
	 */
	public IFeatureVarients createFeatureVarients();

	/**
	 * Brings an IFeatureVarients object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IFeatureVarients recontextualizeFeatureVarients(IFeatureVarients value);

	/**
	 * Create an IVarient object in this namespace.
	 * @return New IVarient object.
	 */
	public IVarient createVarient();

	/**
	 * Brings an IVarient object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVarient recontextualizeVarient(IVarient value);

	/**
	 * Create a top-level element of type <code>IArchFeature</code>.
	 * This function should be used in lieu of <code>createArchFeature</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IArchFeature suitable for adding
	 * as a child of xArch.
	 */
	public IArchFeature createArchFeatureElement();

	/**
	 * Gets the IArchFeature child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IArchFeature</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IArchFeature getArchFeature(IXArch xArch);

	/**
	 * Gets all the IArchFeature children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IArchFeature</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllArchFeatures(IXArch xArch);


	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_CONTEXT,
		"features", null, null,
		new XArchPropertyMetadata[]{},
		new XArchActionMetadata[]{
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IArchFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IArchFeature.TYPE_METADATA, IArchFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, edu.uci.isr.xarch.instance.IDescription.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, edu.uci.isr.xarch.instance.IDescription.TYPE_METADATA, edu.uci.isr.xarch.instance.IDescription.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeature.TYPE_METADATA, IFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureName.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureName.TYPE_METADATA, IFeatureName.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureType.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureType.TYPE_METADATA, IFeatureType.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IBindingTime.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IBindingTime.TYPE_METADATA, IBindingTime.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IDefaultValue.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IDefaultValue.TYPE_METADATA, IDefaultValue.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureOptions.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureOptions.TYPE_METADATA, IFeatureOptions.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureColor.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureColor.TYPE_METADATA, IFeatureColor.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IColorValue.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IColorValue.TYPE_METADATA, IColorValue.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureSymbol.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureSymbol.TYPE_METADATA, IFeatureSymbol.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureElements.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureElements.TYPE_METADATA, IFeatureElements.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, edu.uci.isr.xarch.instance.IXMLLink.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, edu.uci.isr.xarch.instance.IXMLLink.TYPE_METADATA, edu.uci.isr.xarch.instance.IXMLLink.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IOptionalFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IOptionalFeature.TYPE_METADATA, IOptionalFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.PROMOTE, IFeature.TYPE_METADATA, IOptionalFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IAlternativeFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IAlternativeFeature.TYPE_METADATA, IAlternativeFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.PROMOTE, IFeature.TYPE_METADATA, IAlternativeFeature.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IFeatureVarients.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IFeatureVarients.TYPE_METADATA, IFeatureVarients.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE, null, IVarient.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.RECONTEXTUALIZE, IVarient.TYPE_METADATA, IVarient.TYPE_METADATA),
			new XArchActionMetadata(XArchActionMetadata.CREATE_ELEMENT, null, IArchFeature.TYPE_METADATA)});

}

