/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.boolguard;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * BooleanExp <code>xsi:type</code> in the
 * boolguard namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IBooleanExp extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"boolguard", "BooleanExp", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("and", "boolguard", "And", 1, 1),
			XArchPropertyMetadata.createElement("or", "boolguard", "Or", 1, 1),
			XArchPropertyMetadata.createElement("not", "boolguard", "Not", 1, 1),
			XArchPropertyMetadata.createElement("greaterThan", "boolguard", "GreaterThan", 1, 1),
			XArchPropertyMetadata.createElement("greaterThanOrEquals", "boolguard", "GreaterThanOrEquals", 1, 1),
			XArchPropertyMetadata.createElement("lessThan", "boolguard", "LessThan", 1, 1),
			XArchPropertyMetadata.createElement("lessThanOrEquals", "boolguard", "LessThanOrEquals", 1, 1),
			XArchPropertyMetadata.createElement("equals", "boolguard", "Equals", 1, 1),
			XArchPropertyMetadata.createElement("notEquals", "boolguard", "NotEquals", 1, 1),
			XArchPropertyMetadata.createElement("inSet", "boolguard", "InSet", 1, 1),
			XArchPropertyMetadata.createElement("inRange", "boolguard", "InRange", 1, 1),
			XArchPropertyMetadata.createElement("bool", "boolguard", "Bool", 1, 1),
			XArchPropertyMetadata.createElement("parenExp", "boolguard", "Paren", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the and for this BooleanExp.
	 * @param value new and
	 */
	public void setAnd(IAnd value);

	/**
	 * Clear the and from this BooleanExp.
	 */
	public void clearAnd();

	/**
	 * Get the and from this BooleanExp.
	 * @return and
	 */
	public IAnd getAnd();

	/**
	 * Determine if this BooleanExp has the given and
	 * @param andToCheck and to compare
	 * @return <code>true</code> if the ands are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasAnd(IAnd andToCheck);

	/**
	 * Set the or for this BooleanExp.
	 * @param value new or
	 */
	public void setOr(IOr value);

	/**
	 * Clear the or from this BooleanExp.
	 */
	public void clearOr();

	/**
	 * Get the or from this BooleanExp.
	 * @return or
	 */
	public IOr getOr();

	/**
	 * Determine if this BooleanExp has the given or
	 * @param orToCheck or to compare
	 * @return <code>true</code> if the ors are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasOr(IOr orToCheck);

	/**
	 * Set the not for this BooleanExp.
	 * @param value new not
	 */
	public void setNot(INot value);

	/**
	 * Clear the not from this BooleanExp.
	 */
	public void clearNot();

	/**
	 * Get the not from this BooleanExp.
	 * @return not
	 */
	public INot getNot();

	/**
	 * Determine if this BooleanExp has the given not
	 * @param notToCheck not to compare
	 * @return <code>true</code> if the nots are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasNot(INot notToCheck);

	/**
	 * Set the greaterThan for this BooleanExp.
	 * @param value new greaterThan
	 */
	public void setGreaterThan(IGreaterThan value);

	/**
	 * Clear the greaterThan from this BooleanExp.
	 */
	public void clearGreaterThan();

	/**
	 * Get the greaterThan from this BooleanExp.
	 * @return greaterThan
	 */
	public IGreaterThan getGreaterThan();

	/**
	 * Determine if this BooleanExp has the given greaterThan
	 * @param greaterThanToCheck greaterThan to compare
	 * @return <code>true</code> if the greaterThans are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasGreaterThan(IGreaterThan greaterThanToCheck);

	/**
	 * Set the greaterThanOrEquals for this BooleanExp.
	 * @param value new greaterThanOrEquals
	 */
	public void setGreaterThanOrEquals(IGreaterThanOrEquals value);

	/**
	 * Clear the greaterThanOrEquals from this BooleanExp.
	 */
	public void clearGreaterThanOrEquals();

	/**
	 * Get the greaterThanOrEquals from this BooleanExp.
	 * @return greaterThanOrEquals
	 */
	public IGreaterThanOrEquals getGreaterThanOrEquals();

	/**
	 * Determine if this BooleanExp has the given greaterThanOrEquals
	 * @param greaterThanOrEqualsToCheck greaterThanOrEquals to compare
	 * @return <code>true</code> if the greaterThanOrEqualss are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasGreaterThanOrEquals(IGreaterThanOrEquals greaterThanOrEqualsToCheck);

	/**
	 * Set the lessThan for this BooleanExp.
	 * @param value new lessThan
	 */
	public void setLessThan(ILessThan value);

	/**
	 * Clear the lessThan from this BooleanExp.
	 */
	public void clearLessThan();

	/**
	 * Get the lessThan from this BooleanExp.
	 * @return lessThan
	 */
	public ILessThan getLessThan();

	/**
	 * Determine if this BooleanExp has the given lessThan
	 * @param lessThanToCheck lessThan to compare
	 * @return <code>true</code> if the lessThans are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasLessThan(ILessThan lessThanToCheck);

	/**
	 * Set the lessThanOrEquals for this BooleanExp.
	 * @param value new lessThanOrEquals
	 */
	public void setLessThanOrEquals(ILessThanOrEquals value);

	/**
	 * Clear the lessThanOrEquals from this BooleanExp.
	 */
	public void clearLessThanOrEquals();

	/**
	 * Get the lessThanOrEquals from this BooleanExp.
	 * @return lessThanOrEquals
	 */
	public ILessThanOrEquals getLessThanOrEquals();

	/**
	 * Determine if this BooleanExp has the given lessThanOrEquals
	 * @param lessThanOrEqualsToCheck lessThanOrEquals to compare
	 * @return <code>true</code> if the lessThanOrEqualss are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasLessThanOrEquals(ILessThanOrEquals lessThanOrEqualsToCheck);

	/**
	 * Set the equals for this BooleanExp.
	 * @param value new equals
	 */
	public void setEquals(IEquals value);

	/**
	 * Clear the equals from this BooleanExp.
	 */
	public void clearEquals();

	/**
	 * Get the equals from this BooleanExp.
	 * @return equals
	 */
	public IEquals getEquals();

	/**
	 * Determine if this BooleanExp has the given equals
	 * @param equalsToCheck equals to compare
	 * @return <code>true</code> if the equalss are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasEquals(IEquals equalsToCheck);

	/**
	 * Set the notEquals for this BooleanExp.
	 * @param value new notEquals
	 */
	public void setNotEquals(INotEquals value);

	/**
	 * Clear the notEquals from this BooleanExp.
	 */
	public void clearNotEquals();

	/**
	 * Get the notEquals from this BooleanExp.
	 * @return notEquals
	 */
	public INotEquals getNotEquals();

	/**
	 * Determine if this BooleanExp has the given notEquals
	 * @param notEqualsToCheck notEquals to compare
	 * @return <code>true</code> if the notEqualss are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasNotEquals(INotEquals notEqualsToCheck);

	/**
	 * Set the inSet for this BooleanExp.
	 * @param value new inSet
	 */
	public void setInSet(IInSet value);

	/**
	 * Clear the inSet from this BooleanExp.
	 */
	public void clearInSet();

	/**
	 * Get the inSet from this BooleanExp.
	 * @return inSet
	 */
	public IInSet getInSet();

	/**
	 * Determine if this BooleanExp has the given inSet
	 * @param inSetToCheck inSet to compare
	 * @return <code>true</code> if the inSets are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasInSet(IInSet inSetToCheck);

	/**
	 * Set the inRange for this BooleanExp.
	 * @param value new inRange
	 */
	public void setInRange(IInRange value);

	/**
	 * Clear the inRange from this BooleanExp.
	 */
	public void clearInRange();

	/**
	 * Get the inRange from this BooleanExp.
	 * @return inRange
	 */
	public IInRange getInRange();

	/**
	 * Determine if this BooleanExp has the given inRange
	 * @param inRangeToCheck inRange to compare
	 * @return <code>true</code> if the inRanges are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasInRange(IInRange inRangeToCheck);

	/**
	 * Set the bool for this BooleanExp.
	 * @param value new bool
	 */
	public void setBool(IBool value);

	/**
	 * Clear the bool from this BooleanExp.
	 */
	public void clearBool();

	/**
	 * Get the bool from this BooleanExp.
	 * @return bool
	 */
	public IBool getBool();

	/**
	 * Determine if this BooleanExp has the given bool
	 * @param boolToCheck bool to compare
	 * @return <code>true</code> if the bools are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasBool(IBool boolToCheck);

	/**
	 * Set the parenExp for this BooleanExp.
	 * @param value new parenExp
	 */
	public void setParenExp(IParen value);

	/**
	 * Clear the parenExp from this BooleanExp.
	 */
	public void clearParenExp();

	/**
	 * Get the parenExp from this BooleanExp.
	 * @return parenExp
	 */
	public IParen getParenExp();

	/**
	 * Determine if this BooleanExp has the given parenExp
	 * @param parenExpToCheck parenExp to compare
	 * @return <code>true</code> if the parenExps are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasParenExp(IParen parenExpToCheck);
	/**
	 * Determine if another BooleanExp is equivalent to this one, ignoring
	 * ID's.
	 * @param BooleanExpToCheck BooleanExp to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * BooleanExp are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IBooleanExp BooleanExpToCheck);

}
