/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.messages;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context object for the messages package.
 * This object is used to create objects that are used
 * in the messages namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public class MessagesContext implements IMessagesContext {

	protected static final String DEFAULT_ELT_NAME = "anonymousInstanceTag";
	protected Document doc;
	protected IXArch xArch;

	/**
	 * Create a new MessagesContext for the given
	 * IXArch object.
	 * @param xArch XArch object to contextualize in this namespace.
	 */
	public MessagesContext(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Node docRootNode = ((DOMBased)xArch).getDOMNode();
		synchronized(DOMUtils.getDOMLock(docRootNode)){
			this.doc = docRootNode.getOwnerDocument();
			xArch.addSchemaLocation("http://www.ics.uci.edu/pub/arch/xArch/messages.xsd", "http://www.isr.uci.edu/projects/xarchuci/ext/messages.xsd");
			this.xArch = xArch;
		}
	}

	public IXArch getXArch(){
		return xArch;
	}
	
	protected Element createElement(String name){
		synchronized(DOMUtils.getDOMLock(doc)){
			return doc.createElementNS(MessagesConstants.NS_URI, name);
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IMessagesContext.TYPE_METADATA;
	}
	/**
	 * Create an IKind object in this namespace.
	 * @return New IKind object.
	 */
	public IKind createKind(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, KindImpl.XSD_TYPE_NSURI, KindImpl.XSD_TYPE_NAME);
		KindImpl newElt = new KindImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IKind object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IKind recontextualizeKind(IKind value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRuleSpecification object in this namespace.
	 * @return New IRuleSpecification object.
	 */
	public IRuleSpecification createRuleSpecification(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RuleSpecificationImpl.XSD_TYPE_NSURI, RuleSpecificationImpl.XSD_TYPE_NAME);
		RuleSpecificationImpl newElt = new RuleSpecificationImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRuleSpecification object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRuleSpecification recontextualizeRuleSpecification(IRuleSpecification value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DescriptionImpl newElt = new edu.uci.isr.xarch.instance.DescriptionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IProductionRule object in this namespace.
	 * @return New IProductionRule object.
	 */
	public IProductionRule createProductionRule(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ProductionRuleImpl.XSD_TYPE_NSURI, ProductionRuleImpl.XSD_TYPE_NAME);
		ProductionRuleImpl newElt = new ProductionRuleImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IProductionRule object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IProductionRule recontextualizeProductionRule(IProductionRule value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IVariantComponentTypeImplVersSpec object in this namespace.
	 * @return New IVariantComponentTypeImplVersSpec object.
	 */
	public IVariantComponentTypeImplVersSpec createVariantComponentTypeImplVersSpec(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VariantComponentTypeImplVersSpecImpl.XSD_TYPE_NSURI, VariantComponentTypeImplVersSpecImpl.XSD_TYPE_NAME);
		VariantComponentTypeImplVersSpecImpl newElt = new VariantComponentTypeImplVersSpecImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVariantComponentTypeImplVersSpec object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVariantComponentTypeImplVersSpec recontextualizeVariantComponentTypeImplVersSpec(IVariantComponentTypeImplVersSpec value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.versions.IVariantComponentTypeImplVers</code>
	 * to one of type <code>IVariantComponentTypeImplVersSpec</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.versions.IVariantComponentTypeImplVers</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IVariantComponentTypeImplVersSpec promoteToVariantComponentTypeImplVersSpec(
	edu.uci.isr.xarch.versions.IVariantComponentTypeImplVers value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.versions.VariantComponentTypeImplVersImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.versions.VariantComponentTypeImplVersImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, VariantComponentTypeImplVersSpecImpl.XSD_TYPE_NSURI, 
					VariantComponentTypeImplVersSpecImpl.XSD_TYPE_NAME);
		}
		VariantComponentTypeImplVersSpecImpl newElt = new VariantComponentTypeImplVersSpecImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IVariantComponentTypeImplVersSpec.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IVariantConnectorTypeImplVersSpec object in this namespace.
	 * @return New IVariantConnectorTypeImplVersSpec object.
	 */
	public IVariantConnectorTypeImplVersSpec createVariantConnectorTypeImplVersSpec(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VariantConnectorTypeImplVersSpecImpl.XSD_TYPE_NSURI, VariantConnectorTypeImplVersSpecImpl.XSD_TYPE_NAME);
		VariantConnectorTypeImplVersSpecImpl newElt = new VariantConnectorTypeImplVersSpecImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVariantConnectorTypeImplVersSpec object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVariantConnectorTypeImplVersSpec recontextualizeVariantConnectorTypeImplVersSpec(IVariantConnectorTypeImplVersSpec value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.versions.IVariantConnectorTypeImplVers</code>
	 * to one of type <code>IVariantConnectorTypeImplVersSpec</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.versions.IVariantConnectorTypeImplVers</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IVariantConnectorTypeImplVersSpec promoteToVariantConnectorTypeImplVersSpec(
	edu.uci.isr.xarch.versions.IVariantConnectorTypeImplVers value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.versions.VariantConnectorTypeImplVersImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.versions.VariantConnectorTypeImplVersImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, VariantConnectorTypeImplVersSpecImpl.XSD_TYPE_NSURI, 
					VariantConnectorTypeImplVersSpecImpl.XSD_TYPE_NAME);
		}
		VariantConnectorTypeImplVersSpecImpl newElt = new VariantConnectorTypeImplVersSpecImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IVariantConnectorTypeImplVersSpec.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IMessageCausalitySpecification object in this namespace.
	 * @return New IMessageCausalitySpecification object.
	 */
	public IMessageCausalitySpecification createMessageCausalitySpecification(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, MessageCausalitySpecificationImpl.XSD_TYPE_NSURI, MessageCausalitySpecificationImpl.XSD_TYPE_NAME);
		MessageCausalitySpecificationImpl newElt = new MessageCausalitySpecificationImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IMessageCausalitySpecification object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IMessageCausalitySpecification recontextualizeMessageCausalitySpecification(IMessageCausalitySpecification value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.XMLLinkImpl newElt = new edu.uci.isr.xarch.instance.XMLLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IGenericMessage object in this namespace.
	 * @return New IGenericMessage object.
	 */
	public IGenericMessage createGenericMessage(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, GenericMessageImpl.XSD_TYPE_NSURI, GenericMessageImpl.XSD_TYPE_NAME);
		GenericMessageImpl newElt = new GenericMessageImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IGenericMessage object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IGenericMessage recontextualizeGenericMessage(IGenericMessage value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an INamedPropertyMessage object in this namespace.
	 * @return New INamedPropertyMessage object.
	 */
	public INamedPropertyMessage createNamedPropertyMessage(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, NamedPropertyMessageImpl.XSD_TYPE_NSURI, NamedPropertyMessageImpl.XSD_TYPE_NAME);
		NamedPropertyMessageImpl newElt = new NamedPropertyMessageImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an INamedPropertyMessage object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public INamedPropertyMessage recontextualizeNamedPropertyMessage(INamedPropertyMessage value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>IGenericMessage</code>
	 * to one of type <code>INamedPropertyMessage</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>IGenericMessage</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public INamedPropertyMessage promoteToNamedPropertyMessage(
	IGenericMessage value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			GenericMessageImpl.XSD_TYPE_NSURI,
			GenericMessageImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, NamedPropertyMessageImpl.XSD_TYPE_NSURI, 
					NamedPropertyMessageImpl.XSD_TYPE_NAME);
		}
		NamedPropertyMessageImpl newElt = new NamedPropertyMessageImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			INamedPropertyMessage.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an ICount object in this namespace.
	 * @return New ICount object.
	 */
	public ICount createCount(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, CountImpl.XSD_TYPE_NSURI, CountImpl.XSD_TYPE_NAME);
		CountImpl newElt = new CountImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ICount object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ICount recontextualizeCount(ICount value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IMessageName object in this namespace.
	 * @return New IMessageName object.
	 */
	public IMessageName createMessageName(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, MessageNameImpl.XSD_TYPE_NSURI, MessageNameImpl.XSD_TYPE_NAME);
		MessageNameImpl newElt = new MessageNameImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IMessageName object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IMessageName recontextualizeMessageName(IMessageName value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IMessageType object in this namespace.
	 * @return New IMessageType object.
	 */
	public IMessageType createMessageType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, MessageTypeImpl.XSD_TYPE_NSURI, MessageTypeImpl.XSD_TYPE_NAME);
		MessageTypeImpl newElt = new MessageTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IMessageType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IMessageType recontextualizeMessageType(IMessageType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ICauseTime object in this namespace.
	 * @return New ICauseTime object.
	 */
	public ICauseTime createCauseTime(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, CauseTimeImpl.XSD_TYPE_NSURI, CauseTimeImpl.XSD_TYPE_NAME);
		CauseTimeImpl newElt = new CauseTimeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ICauseTime object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ICauseTime recontextualizeCauseTime(ICauseTime value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an INamedProperty object in this namespace.
	 * @return New INamedProperty object.
	 */
	public INamedProperty createNamedProperty(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, NamedPropertyImpl.XSD_TYPE_NSURI, NamedPropertyImpl.XSD_TYPE_NAME);
		NamedPropertyImpl newElt = new NamedPropertyImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an INamedProperty object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public INamedProperty recontextualizeNamedProperty(INamedProperty value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IPropertyName object in this namespace.
	 * @return New IPropertyName object.
	 */
	public IPropertyName createPropertyName(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PropertyNameImpl.XSD_TYPE_NSURI, PropertyNameImpl.XSD_TYPE_NAME);
		PropertyNameImpl newElt = new PropertyNameImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPropertyName object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPropertyName recontextualizePropertyName(IPropertyName value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IPropertyValue object in this namespace.
	 * @return New IPropertyValue object.
	 */
	public IPropertyValue createPropertyValue(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PropertyValueImpl.XSD_TYPE_NSURI, PropertyValueImpl.XSD_TYPE_NAME);
		PropertyValueImpl newElt = new PropertyValueImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPropertyValue object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPropertyValue recontextualizePropertyValue(IPropertyValue value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, MessagesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, MessagesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create a top-level element of type <code>IRuleSpecification</code>.
	 * This function should be used in lieu of <code>createRuleSpecification</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IRuleSpecification suitable for adding
	 * as a child of xArch.
	 */
	public IRuleSpecification createRuleSpecificationElement(){
		Element elt = createElement("ruleSpecification");
		DOMUtils.addXSIType(elt, RuleSpecificationImpl.XSD_TYPE_NSURI, 
			RuleSpecificationImpl.XSD_TYPE_NAME);
		RuleSpecificationImpl newElt = new RuleSpecificationImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IRuleSpecification child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IRuleSpecification</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IRuleSpecification getRuleSpecification(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IRuleSpecification){
				return (IRuleSpecification)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(MessagesConstants.NS_URI))){
						if((localName != null) && (localName.equals("ruleSpecification"))){
							RuleSpecificationImpl newElt = new RuleSpecificationImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IRuleSpecification children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IRuleSpecification</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllRuleSpecifications(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector v = new Vector();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IRuleSpecification){
				v.addElement(o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(MessagesConstants.NS_URI))){
						if((localName != null) && (localName.equals("ruleSpecification"))){
							RuleSpecificationImpl newElt = new RuleSpecificationImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}

}

