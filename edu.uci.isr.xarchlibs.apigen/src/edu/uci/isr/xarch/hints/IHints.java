/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.hints;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Hints <code>xsi:type</code> in the
 * hints namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IHints extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"hints", "Hints", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("hintedThing", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("propertyHint", "hints", "PropertyHint", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the hintedThing for this Hints.
	 * @param value new hintedThing
	 */
	public void setHintedThing(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the hintedThing from this Hints.
	 */
	public void clearHintedThing();

	/**
	 * Get the hintedThing from this Hints.
	 * @return hintedThing
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getHintedThing();

	/**
	 * Determine if this Hints has the given hintedThing
	 * @param hintedThingToCheck hintedThing to compare
	 * @return <code>true</code> if the hintedThings are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasHintedThing(edu.uci.isr.xarch.instance.IXMLLink hintedThingToCheck);

	/**
	 * Add a propertyHint to this Hints.
	 * @param newPropertyHint propertyHint to add.
	 */
	public void addPropertyHint(IPropertyHint newPropertyHint);

	/**
	 * Add a collection of propertyHints to this Hints.
	 * @param propertyHints propertyHints to add.
	 */
	public void addPropertyHints(Collection propertyHints);

	/**
	 * Remove all propertyHints from this Hints.
	 */
	public void clearPropertyHints();

	/**
	 * Remove the given propertyHint from this Hints.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param propertyHintToRemove propertyHint to remove.
	 */
	public void removePropertyHint(IPropertyHint propertyHintToRemove);

	/**
	 * Remove all the given propertyHints from this Hints.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param propertyHints propertyHint to remove.
	 */
	public void removePropertyHints(Collection propertyHints);

	/**
	 * Get all the propertyHints from this Hints.
	 * @return all propertyHints in this Hints.
	 */
	public Collection getAllPropertyHints();

	/**
	 * Determine if this Hints contains a given propertyHint.
	 * @return <code>true</code> if this Hints contains the given
	 * propertyHintToCheck, <code>false</code> otherwise.
	 */
	public boolean hasPropertyHint(IPropertyHint propertyHintToCheck);

	/**
	 * Determine if this Hints contains the given set of propertyHints.
	 * @param propertyHintsToCheck propertyHints to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>propertyHints</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasPropertyHints(Collection propertyHintsToCheck);

	/**
	 * Determine if this Hints contains each element in the 
	 * given set of propertyHints.
	 * @param propertyHintsToCheck propertyHints to check for.
	 * @return <code>true</code> if every element in
	 * <code>propertyHints</code> is found in this Hints,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllPropertyHints(Collection propertyHintsToCheck);

	/**
	 * Determine if another Hints is equivalent to this one, ignoring
	 * ID's.
	 * @param HintsToCheck Hints to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Hints are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IHints HintsToCheck);

}
