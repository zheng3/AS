/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.changesets;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchChangeSets <code>xsi:type</code> in the
 * changesets namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchChangeSets extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"changesets", "ArchChangeSets", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("changeSetOrder", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createAttribute("groupOrder", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createAttribute("appliedChangeSets", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createElement("changeSet", "changesets", "ChangeSet", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("relationship", "changesets", "Relationship", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("group", "changesets", "Group", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the changeSetOrder attribute on this ArchChangeSets.
	 * @param changeSetOrder changeSetOrder
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setChangeSetOrder(String changeSetOrder);

	/**
	 * Remove the changeSetOrder attribute from this ArchChangeSets.
	 */
	public void clearChangeSetOrder();

	/**
	 * Get the changeSetOrder attribute from this ArchChangeSets.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return changeSetOrder on this ArchChangeSets
	 */
	public String getChangeSetOrder();

	/**
	 * Determine if the changeSetOrder attribute on this ArchChangeSets
	 * has the given value.
	 * @param changeSetOrder Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasChangeSetOrder(String changeSetOrder);


	/**
	 * Set the groupOrder attribute on this ArchChangeSets.
	 * @param groupOrder groupOrder
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setGroupOrder(String groupOrder);

	/**
	 * Remove the groupOrder attribute from this ArchChangeSets.
	 */
	public void clearGroupOrder();

	/**
	 * Get the groupOrder attribute from this ArchChangeSets.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return groupOrder on this ArchChangeSets
	 */
	public String getGroupOrder();

	/**
	 * Determine if the groupOrder attribute on this ArchChangeSets
	 * has the given value.
	 * @param groupOrder Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasGroupOrder(String groupOrder);


	/**
	 * Set the appliedChangeSets attribute on this ArchChangeSets.
	 * @param appliedChangeSets appliedChangeSets
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setAppliedChangeSets(String appliedChangeSets);

	/**
	 * Remove the appliedChangeSets attribute from this ArchChangeSets.
	 */
	public void clearAppliedChangeSets();

	/**
	 * Get the appliedChangeSets attribute from this ArchChangeSets.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return appliedChangeSets on this ArchChangeSets
	 */
	public String getAppliedChangeSets();

	/**
	 * Determine if the appliedChangeSets attribute on this ArchChangeSets
	 * has the given value.
	 * @param appliedChangeSets Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasAppliedChangeSets(String appliedChangeSets);


	/**
	 * Add a changeSet to this ArchChangeSets.
	 * @param newChangeSet changeSet to add.
	 */
	public void addChangeSet(IChangeSet newChangeSet);

	/**
	 * Add a collection of changeSets to this ArchChangeSets.
	 * @param changeSets changeSets to add.
	 */
	public void addChangeSets(Collection changeSets);

	/**
	 * Remove all changeSets from this ArchChangeSets.
	 */
	public void clearChangeSets();

	/**
	 * Remove the given changeSet from this ArchChangeSets.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param changeSetToRemove changeSet to remove.
	 */
	public void removeChangeSet(IChangeSet changeSetToRemove);

	/**
	 * Remove all the given changeSets from this ArchChangeSets.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param changeSets changeSet to remove.
	 */
	public void removeChangeSets(Collection changeSets);

	/**
	 * Get all the changeSets from this ArchChangeSets.
	 * @return all changeSets in this ArchChangeSets.
	 */
	public Collection getAllChangeSets();

	/**
	 * Determine if this ArchChangeSets contains a given changeSet.
	 * @return <code>true</code> if this ArchChangeSets contains the given
	 * changeSetToCheck, <code>false</code> otherwise.
	 */
	public boolean hasChangeSet(IChangeSet changeSetToCheck);

	/**
	 * Determine if this ArchChangeSets contains the given set of changeSets.
	 * @param changeSetsToCheck changeSets to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>changeSets</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasChangeSets(Collection changeSetsToCheck);

	/**
	 * Determine if this ArchChangeSets contains each element in the 
	 * given set of changeSets.
	 * @param changeSetsToCheck changeSets to check for.
	 * @return <code>true</code> if every element in
	 * <code>changeSets</code> is found in this ArchChangeSets,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllChangeSets(Collection changeSetsToCheck);

	/**
	 * Gets the changeSet from this ArchChangeSets with the given
	 * id.
	 * @param id ID to look for.
	 * @return changeSet with the given ID, or <code>null</code> if not found.
	 */
	public IChangeSet getChangeSet(String id);

	/**
	 * Gets the changeSets from this ArchChangeSets with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return changeSets with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getChangeSets(Collection ids);


	/**
	 * Add a relationship to this ArchChangeSets.
	 * @param newRelationship relationship to add.
	 */
	public void addRelationship(IRelationship newRelationship);

	/**
	 * Add a collection of relationships to this ArchChangeSets.
	 * @param relationships relationships to add.
	 */
	public void addRelationships(Collection relationships);

	/**
	 * Remove all relationships from this ArchChangeSets.
	 */
	public void clearRelationships();

	/**
	 * Remove the given relationship from this ArchChangeSets.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param relationshipToRemove relationship to remove.
	 */
	public void removeRelationship(IRelationship relationshipToRemove);

	/**
	 * Remove all the given relationships from this ArchChangeSets.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param relationships relationship to remove.
	 */
	public void removeRelationships(Collection relationships);

	/**
	 * Get all the relationships from this ArchChangeSets.
	 * @return all relationships in this ArchChangeSets.
	 */
	public Collection getAllRelationships();

	/**
	 * Determine if this ArchChangeSets contains a given relationship.
	 * @return <code>true</code> if this ArchChangeSets contains the given
	 * relationshipToCheck, <code>false</code> otherwise.
	 */
	public boolean hasRelationship(IRelationship relationshipToCheck);

	/**
	 * Determine if this ArchChangeSets contains the given set of relationships.
	 * @param relationshipsToCheck relationships to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>relationships</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasRelationships(Collection relationshipsToCheck);

	/**
	 * Determine if this ArchChangeSets contains each element in the 
	 * given set of relationships.
	 * @param relationshipsToCheck relationships to check for.
	 * @return <code>true</code> if every element in
	 * <code>relationships</code> is found in this ArchChangeSets,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllRelationships(Collection relationshipsToCheck);

	/**
	 * Gets the relationship from this ArchChangeSets with the given
	 * id.
	 * @param id ID to look for.
	 * @return relationship with the given ID, or <code>null</code> if not found.
	 */
	public IRelationship getRelationship(String id);

	/**
	 * Gets the relationships from this ArchChangeSets with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return relationships with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getRelationships(Collection ids);


	/**
	 * Add a group to this ArchChangeSets.
	 * @param newGroup group to add.
	 */
	public void addGroup(IGroup newGroup);

	/**
	 * Add a collection of groups to this ArchChangeSets.
	 * @param groups groups to add.
	 */
	public void addGroups(Collection groups);

	/**
	 * Remove all groups from this ArchChangeSets.
	 */
	public void clearGroups();

	/**
	 * Remove the given group from this ArchChangeSets.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param groupToRemove group to remove.
	 */
	public void removeGroup(IGroup groupToRemove);

	/**
	 * Remove all the given groups from this ArchChangeSets.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param groups group to remove.
	 */
	public void removeGroups(Collection groups);

	/**
	 * Get all the groups from this ArchChangeSets.
	 * @return all groups in this ArchChangeSets.
	 */
	public Collection getAllGroups();

	/**
	 * Determine if this ArchChangeSets contains a given group.
	 * @return <code>true</code> if this ArchChangeSets contains the given
	 * groupToCheck, <code>false</code> otherwise.
	 */
	public boolean hasGroup(IGroup groupToCheck);

	/**
	 * Determine if this ArchChangeSets contains the given set of groups.
	 * @param groupsToCheck groups to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>groups</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasGroups(Collection groupsToCheck);

	/**
	 * Determine if this ArchChangeSets contains each element in the 
	 * given set of groups.
	 * @param groupsToCheck groups to check for.
	 * @return <code>true</code> if every element in
	 * <code>groups</code> is found in this ArchChangeSets,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllGroups(Collection groupsToCheck);

	/**
	 * Gets the group from this ArchChangeSets with the given
	 * id.
	 * @param id ID to look for.
	 * @return group with the given ID, or <code>null</code> if not found.
	 */
	public IGroup getGroup(String id);

	/**
	 * Gets the groups from this ArchChangeSets with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return groups with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getGroups(Collection ids);

	/**
	 * Determine if another ArchChangeSets is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchChangeSetsToCheck ArchChangeSets to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchChangeSets are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchChangeSets ArchChangeSetsToCheck);

}
