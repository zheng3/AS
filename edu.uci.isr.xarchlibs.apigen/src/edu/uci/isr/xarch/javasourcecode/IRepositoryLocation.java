/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.javasourcecode;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * RepositoryLocation <code>xsi:type</code> in the
 * javasourcecode namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IRepositoryLocation extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"javasourcecode", "RepositoryLocation", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("fileName", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createAttribute("path", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createElement("url", "instance", "XMLLink", 0, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the fileName attribute on this RepositoryLocation.
	 * @param fileName fileName
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setFileName(String fileName);

	/**
	 * Remove the fileName attribute from this RepositoryLocation.
	 */
	public void clearFileName();

	/**
	 * Get the fileName attribute from this RepositoryLocation.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return fileName on this RepositoryLocation
	 */
	public String getFileName();

	/**
	 * Determine if the fileName attribute on this RepositoryLocation
	 * has the given value.
	 * @param fileName Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasFileName(String fileName);


	/**
	 * Set the path attribute on this RepositoryLocation.
	 * @param path path
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setPath(String path);

	/**
	 * Remove the path attribute from this RepositoryLocation.
	 */
	public void clearPath();

	/**
	 * Get the path attribute from this RepositoryLocation.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return path on this RepositoryLocation
	 */
	public String getPath();

	/**
	 * Determine if the path attribute on this RepositoryLocation
	 * has the given value.
	 * @param path Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasPath(String path);


	/**
	 * Set the url for this RepositoryLocation.
	 * @param value new url
	 */
	public void setUrl(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the url from this RepositoryLocation.
	 */
	public void clearUrl();

	/**
	 * Get the url from this RepositoryLocation.
	 * @return url
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getUrl();

	/**
	 * Determine if this RepositoryLocation has the given url
	 * @param urlToCheck url to compare
	 * @return <code>true</code> if the urls are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasUrl(edu.uci.isr.xarch.instance.IXMLLink urlToCheck);
	/**
	 * Determine if another RepositoryLocation is equivalent to this one, ignoring
	 * ID's.
	 * @param RepositoryLocationToCheck RepositoryLocation to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * RepositoryLocation are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IRepositoryLocation RepositoryLocationToCheck);

}
