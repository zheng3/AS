/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context object for the pladiff package.
 * This object is used to create objects that are used
 * in the pladiff namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public class PladiffContext implements IPladiffContext {

	protected static final String DEFAULT_ELT_NAME = "anonymousInstanceTag";
	protected Document doc;
	protected IXArch xArch;

	/**
	 * Create a new PladiffContext for the given
	 * IXArch object.
	 * @param xArch XArch object to contextualize in this namespace.
	 */
	public PladiffContext(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Node docRootNode = ((DOMBased)xArch).getDOMNode();
		synchronized(DOMUtils.getDOMLock(docRootNode)){
			this.doc = docRootNode.getOwnerDocument();
			xArch.addSchemaLocation("http://www.ics.uci.edu/pub/arch/xArch/pladiff.xsd", "http://www.isr.uci.edu/projects/xarchuci/ext/pladiff.xsd");
			this.xArch = xArch;
		}
	}

	public IXArch getXArch(){
		return xArch;
	}
	
	protected Element createElement(String name){
		synchronized(DOMUtils.getDOMLock(doc)){
			return doc.createElementNS(PladiffConstants.NS_URI, name);
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IPladiffContext.TYPE_METADATA;
	}
	/**
	 * Create an IPLADiff object in this namespace.
	 * @return New IPLADiff object.
	 */
	public IPLADiff createPLADiff(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PLADiffImpl.XSD_TYPE_NSURI, PLADiffImpl.XSD_TYPE_NAME);
		PLADiffImpl newElt = new PLADiffImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPLADiff object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPLADiff recontextualizePLADiff(IPLADiff value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IDiffPart object in this namespace.
	 * @return New IDiffPart object.
	 */
	public IDiffPart createDiffPart(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, DiffPartImpl.XSD_TYPE_NSURI, DiffPartImpl.XSD_TYPE_NAME);
		DiffPartImpl newElt = new DiffPartImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IDiffPart object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IDiffPart recontextualizeDiffPart(IDiffPart value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IDiffLocation object in this namespace.
	 * @return New IDiffLocation object.
	 */
	public IDiffLocation createDiffLocation(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, DiffLocationImpl.XSD_TYPE_NSURI, DiffLocationImpl.XSD_TYPE_NAME);
		DiffLocationImpl newElt = new DiffLocationImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IDiffLocation object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IDiffLocation recontextualizeDiffLocation(IDiffLocation value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DescriptionImpl newElt = new edu.uci.isr.xarch.instance.DescriptionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAdd object in this namespace.
	 * @return New IAdd object.
	 */
	public IAdd createAdd(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddImpl.XSD_TYPE_NSURI, AddImpl.XSD_TYPE_NAME);
		AddImpl newElt = new AddImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAdd object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAdd recontextualizeAdd(IAdd value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAddStructuralEntity object in this namespace.
	 * @return New IAddStructuralEntity object.
	 */
	public IAddStructuralEntity createAddStructuralEntity(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddStructuralEntityImpl.XSD_TYPE_NSURI, AddStructuralEntityImpl.XSD_TYPE_NAME);
		AddStructuralEntityImpl newElt = new AddStructuralEntityImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAddStructuralEntity object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAddStructuralEntity recontextualizeAddStructuralEntity(IAddStructuralEntity value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.IComponent object in this namespace.
	 * @return New edu.uci.isr.xarch.types.IComponent object.
	 */
	public edu.uci.isr.xarch.types.IComponent createComponent(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.ComponentImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.ComponentImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.ComponentImpl newElt = new edu.uci.isr.xarch.types.ComponentImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.IComponent object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.IComponent recontextualizeComponent(edu.uci.isr.xarch.types.IComponent value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.IConnector object in this namespace.
	 * @return New edu.uci.isr.xarch.types.IConnector object.
	 */
	public edu.uci.isr.xarch.types.IConnector createConnector(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.ConnectorImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.ConnectorImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.ConnectorImpl newElt = new edu.uci.isr.xarch.types.ConnectorImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.IConnector object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.IConnector recontextualizeConnector(edu.uci.isr.xarch.types.IConnector value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAddLink object in this namespace.
	 * @return New IAddLink object.
	 */
	public IAddLink createAddLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddLinkImpl.XSD_TYPE_NSURI, AddLinkImpl.XSD_TYPE_NAME);
		AddLinkImpl newElt = new AddLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAddLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAddLink recontextualizeAddLink(IAddLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.ILink object in this namespace.
	 * @return New edu.uci.isr.xarch.types.ILink object.
	 */
	public edu.uci.isr.xarch.types.ILink createLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.LinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.LinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.LinkImpl newElt = new edu.uci.isr.xarch.types.LinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.ILink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.ILink recontextualizeLink(edu.uci.isr.xarch.types.ILink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IInterfaceEndPoint object in this namespace.
	 * @return New IInterfaceEndPoint object.
	 */
	public IInterfaceEndPoint createInterfaceEndPoint(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InterfaceEndPointImpl.XSD_TYPE_NSURI, InterfaceEndPointImpl.XSD_TYPE_NAME);
		InterfaceEndPointImpl newElt = new InterfaceEndPointImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInterfaceEndPoint object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInterfaceEndPoint recontextualizeInterfaceEndPoint(IInterfaceEndPoint value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAddInterface object in this namespace.
	 * @return New IAddInterface object.
	 */
	public IAddInterface createAddInterface(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddInterfaceImpl.XSD_TYPE_NSURI, AddInterfaceImpl.XSD_TYPE_NAME);
		AddInterfaceImpl newElt = new AddInterfaceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAddInterface object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAddInterface recontextualizeAddInterface(IAddInterface value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.IInterface object in this namespace.
	 * @return New edu.uci.isr.xarch.types.IInterface object.
	 */
	public edu.uci.isr.xarch.types.IInterface createInterface(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.InterfaceImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.InterfaceImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.InterfaceImpl newElt = new edu.uci.isr.xarch.types.InterfaceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.IInterface object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.IInterface recontextualizeInterface(edu.uci.isr.xarch.types.IInterface value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAddOptional object in this namespace.
	 * @return New IAddOptional object.
	 */
	public IAddOptional createAddOptional(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddOptionalImpl.XSD_TYPE_NSURI, AddOptionalImpl.XSD_TYPE_NAME);
		AddOptionalImpl newElt = new AddOptionalImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAddOptional object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAddOptional recontextualizeAddOptional(IAddOptional value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.options.IOptional object in this namespace.
	 * @return New edu.uci.isr.xarch.options.IOptional object.
	 */
	public edu.uci.isr.xarch.options.IOptional createOptional(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.options.OptionalImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.options.OptionalImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.options.OptionalImpl newElt = new edu.uci.isr.xarch.options.OptionalImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.options.IOptional object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.options.IOptional recontextualizeOptional(edu.uci.isr.xarch.options.IOptional value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAddTypeEntity object in this namespace.
	 * @return New IAddTypeEntity object.
	 */
	public IAddTypeEntity createAddTypeEntity(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddTypeEntityImpl.XSD_TYPE_NSURI, AddTypeEntityImpl.XSD_TYPE_NAME);
		AddTypeEntityImpl newElt = new AddTypeEntityImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAddTypeEntity object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAddTypeEntity recontextualizeAddTypeEntity(IAddTypeEntity value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.ISignature object in this namespace.
	 * @return New edu.uci.isr.xarch.types.ISignature object.
	 */
	public edu.uci.isr.xarch.types.ISignature createSignature(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.SignatureImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.SignatureImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.SignatureImpl newElt = new edu.uci.isr.xarch.types.SignatureImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.ISignature object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.ISignature recontextualizeSignature(edu.uci.isr.xarch.types.ISignature value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.variants.IVariant object in this namespace.
	 * @return New edu.uci.isr.xarch.variants.IVariant object.
	 */
	public edu.uci.isr.xarch.variants.IVariant createVariant(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.variants.VariantImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.variants.VariantImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.variants.VariantImpl newElt = new edu.uci.isr.xarch.variants.VariantImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.variants.IVariant object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.variants.IVariant recontextualizeVariant(edu.uci.isr.xarch.variants.IVariant value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAddSignatureInterfaceMapping object in this namespace.
	 * @return New IAddSignatureInterfaceMapping object.
	 */
	public IAddSignatureInterfaceMapping createAddSignatureInterfaceMapping(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AddSignatureInterfaceMappingImpl.XSD_TYPE_NSURI, AddSignatureInterfaceMappingImpl.XSD_TYPE_NAME);
		AddSignatureInterfaceMappingImpl newElt = new AddSignatureInterfaceMappingImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAddSignatureInterfaceMapping object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAddSignatureInterfaceMapping recontextualizeAddSignatureInterfaceMapping(IAddSignatureInterfaceMapping value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.ISignatureInterfaceMapping object in this namespace.
	 * @return New edu.uci.isr.xarch.types.ISignatureInterfaceMapping object.
	 */
	public edu.uci.isr.xarch.types.ISignatureInterfaceMapping createSignatureInterfaceMapping(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.SignatureInterfaceMappingImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.SignatureInterfaceMappingImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.SignatureInterfaceMappingImpl newElt = new edu.uci.isr.xarch.types.SignatureInterfaceMappingImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.ISignatureInterfaceMapping object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.ISignatureInterfaceMapping recontextualizeSignatureInterfaceMapping(edu.uci.isr.xarch.types.ISignatureInterfaceMapping value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ISignatureEndPoint object in this namespace.
	 * @return New ISignatureEndPoint object.
	 */
	public ISignatureEndPoint createSignatureEndPoint(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, SignatureEndPointImpl.XSD_TYPE_NSURI, SignatureEndPointImpl.XSD_TYPE_NAME);
		SignatureEndPointImpl newElt = new SignatureEndPointImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ISignatureEndPoint object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ISignatureEndPoint recontextualizeSignatureEndPoint(ISignatureEndPoint value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRemove object in this namespace.
	 * @return New IRemove object.
	 */
	public IRemove createRemove(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RemoveImpl.XSD_TYPE_NSURI, RemoveImpl.XSD_TYPE_NAME);
		RemoveImpl newElt = new RemoveImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRemove object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRemove recontextualizeRemove(IRemove value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRemoveStructuralEntity object in this namespace.
	 * @return New IRemoveStructuralEntity object.
	 */
	public IRemoveStructuralEntity createRemoveStructuralEntity(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RemoveStructuralEntityImpl.XSD_TYPE_NSURI, RemoveStructuralEntityImpl.XSD_TYPE_NAME);
		RemoveStructuralEntityImpl newElt = new RemoveStructuralEntityImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRemoveStructuralEntity object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRemoveStructuralEntity recontextualizeRemoveStructuralEntity(IRemoveStructuralEntity value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRemoveInterface object in this namespace.
	 * @return New IRemoveInterface object.
	 */
	public IRemoveInterface createRemoveInterface(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RemoveInterfaceImpl.XSD_TYPE_NSURI, RemoveInterfaceImpl.XSD_TYPE_NAME);
		RemoveInterfaceImpl newElt = new RemoveInterfaceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRemoveInterface object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRemoveInterface recontextualizeRemoveInterface(IRemoveInterface value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRemoveOptional object in this namespace.
	 * @return New IRemoveOptional object.
	 */
	public IRemoveOptional createRemoveOptional(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RemoveOptionalImpl.XSD_TYPE_NSURI, RemoveOptionalImpl.XSD_TYPE_NAME);
		RemoveOptionalImpl newElt = new RemoveOptionalImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRemoveOptional object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRemoveOptional recontextualizeRemoveOptional(IRemoveOptional value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRemoveSignatureInterfaceMapping object in this namespace.
	 * @return New IRemoveSignatureInterfaceMapping object.
	 */
	public IRemoveSignatureInterfaceMapping createRemoveSignatureInterfaceMapping(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RemoveSignatureInterfaceMappingImpl.XSD_TYPE_NSURI, RemoveSignatureInterfaceMappingImpl.XSD_TYPE_NAME);
		RemoveSignatureInterfaceMappingImpl newElt = new RemoveSignatureInterfaceMappingImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRemoveSignatureInterfaceMapping object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRemoveSignatureInterfaceMapping recontextualizeRemoveSignatureInterfaceMapping(IRemoveSignatureInterfaceMapping value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IRemoveTypeEntity object in this namespace.
	 * @return New IRemoveTypeEntity object.
	 */
	public IRemoveTypeEntity createRemoveTypeEntity(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, RemoveTypeEntityImpl.XSD_TYPE_NSURI, RemoveTypeEntityImpl.XSD_TYPE_NAME);
		RemoveTypeEntityImpl newElt = new RemoveTypeEntityImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IRemoveTypeEntity object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IRemoveTypeEntity recontextualizeRemoveTypeEntity(IRemoveTypeEntity value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, PladiffConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, PladiffConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create a top-level element of type <code>IPLADiff</code>.
	 * This function should be used in lieu of <code>createPLADiff</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IPLADiff suitable for adding
	 * as a child of xArch.
	 */
	public IPLADiff createPLADiffElement(){
		Element elt = createElement("plaDiff");
		DOMUtils.addXSIType(elt, PLADiffImpl.XSD_TYPE_NSURI, 
			PLADiffImpl.XSD_TYPE_NAME);
		PLADiffImpl newElt = new PLADiffImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IPLADiff child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IPLADiff</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IPLADiff getPLADiff(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IPLADiff){
				return (IPLADiff)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(PladiffConstants.NS_URI))){
						if((localName != null) && (localName.equals("plaDiff"))){
							PLADiffImpl newElt = new PLADiffImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IPLADiff children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IPLADiff</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllPLADiffs(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector v = new Vector();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IPLADiff){
				v.addElement(o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(PladiffConstants.NS_URI))){
						if((localName != null) && (localName.equals("plaDiff"))){
							PLADiffImpl newElt = new PLADiffImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}

}

