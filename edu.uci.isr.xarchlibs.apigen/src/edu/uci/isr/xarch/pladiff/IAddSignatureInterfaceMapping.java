/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * AddSignatureInterfaceMapping <code>xsi:type</code> in the
 * pladiff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IAddSignatureInterfaceMapping extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"pladiff", "AddSignatureInterfaceMapping", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("signatureInterfaceMapping", "types", "SignatureInterfaceMapping", 1, 1),
			XArchPropertyMetadata.createElement("signatureEndPoint", "pladiff", "SignatureEndPoint", 1, 1),
			XArchPropertyMetadata.createElement("interfaceEndPoint", "pladiff", "InterfaceEndPoint", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the signatureInterfaceMapping for this AddSignatureInterfaceMapping.
	 * @param value new signatureInterfaceMapping
	 */
	public void setSignatureInterfaceMapping(edu.uci.isr.xarch.types.ISignatureInterfaceMapping value);

	/**
	 * Clear the signatureInterfaceMapping from this AddSignatureInterfaceMapping.
	 */
	public void clearSignatureInterfaceMapping();

	/**
	 * Get the signatureInterfaceMapping from this AddSignatureInterfaceMapping.
	 * @return signatureInterfaceMapping
	 */
	public edu.uci.isr.xarch.types.ISignatureInterfaceMapping getSignatureInterfaceMapping();

	/**
	 * Determine if this AddSignatureInterfaceMapping has the given signatureInterfaceMapping
	 * @param signatureInterfaceMappingToCheck signatureInterfaceMapping to compare
	 * @return <code>true</code> if the signatureInterfaceMappings are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasSignatureInterfaceMapping(edu.uci.isr.xarch.types.ISignatureInterfaceMapping signatureInterfaceMappingToCheck);

	/**
	 * Set the signatureEndPoint for this AddSignatureInterfaceMapping.
	 * @param value new signatureEndPoint
	 */
	public void setSignatureEndPoint(ISignatureEndPoint value);

	/**
	 * Clear the signatureEndPoint from this AddSignatureInterfaceMapping.
	 */
	public void clearSignatureEndPoint();

	/**
	 * Get the signatureEndPoint from this AddSignatureInterfaceMapping.
	 * @return signatureEndPoint
	 */
	public ISignatureEndPoint getSignatureEndPoint();

	/**
	 * Determine if this AddSignatureInterfaceMapping has the given signatureEndPoint
	 * @param signatureEndPointToCheck signatureEndPoint to compare
	 * @return <code>true</code> if the signatureEndPoints are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasSignatureEndPoint(ISignatureEndPoint signatureEndPointToCheck);

	/**
	 * Set the interfaceEndPoint for this AddSignatureInterfaceMapping.
	 * @param value new interfaceEndPoint
	 */
	public void setInterfaceEndPoint(IInterfaceEndPoint value);

	/**
	 * Clear the interfaceEndPoint from this AddSignatureInterfaceMapping.
	 */
	public void clearInterfaceEndPoint();

	/**
	 * Get the interfaceEndPoint from this AddSignatureInterfaceMapping.
	 * @return interfaceEndPoint
	 */
	public IInterfaceEndPoint getInterfaceEndPoint();

	/**
	 * Determine if this AddSignatureInterfaceMapping has the given interfaceEndPoint
	 * @param interfaceEndPointToCheck interfaceEndPoint to compare
	 * @return <code>true</code> if the interfaceEndPoints are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasInterfaceEndPoint(IInterfaceEndPoint interfaceEndPointToCheck);
	/**
	 * Determine if another AddSignatureInterfaceMapping is equivalent to this one, ignoring
	 * ID's.
	 * @param AddSignatureInterfaceMappingToCheck AddSignatureInterfaceMapping to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * AddSignatureInterfaceMapping are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IAddSignatureInterfaceMapping AddSignatureInterfaceMappingToCheck);

}
