package edu.uci.isr.archstudio4.comp.booleannotation;


/* Generated By:JJTree: Do not edit this line. BPOrNode.java */

import edu.uci.isr.xarchflat.ObjRef;
import edu.uci.isr.xarchflat.XArchFlatInterface;

/**
 * Logical OR expression.
 *
 * @author Rob Egelink (egelink@ics.uci.edu)
 */
public class BPOrNode extends SimpleNode
{
    public BPOrNode( int id )
    {
        super( id );
    }

    public BPOrNode( Boolean p, int id )
    {
        super( p, id );
    }

    /**
     * Returns the OR expression stored in an object of type
     * BooleanExp.
     * @param context A boolguard context.
     * @param xarch An XArchADT proxy.
     * @return OR expression
     */
    public ObjRef toXArch( ObjRef context, XArchFlatInterface xarch )
    {
        // Create the first part of the tree (Note: An OR Node always has
        // at least two children, otherwise the node was not made.

        ObjRef or = xarch.create( context, "Or" );
	ObjRef leftChild  = ( (SimpleNode)jjtGetChild( 0 ) ).toXArch( context, xarch );
	ObjRef rightChild = ( (SimpleNode)jjtGetChild( 1 ) ).toXArch( context, xarch );

        xarch.set( or, "BooleanExp1", leftChild );
        xarch.set( or, "BooleanExp2", rightChild );

        // Insert the remaining (if any) children in the tree.
        for ( int i = 2; i < jjtGetNumChildren(); ++i )
        {
            ObjRef leftOperand = xarch.create( context, "BooleanExp" );
	    xarch.set( leftOperand, "Or", or );

	    ObjRef rightOperand = ( (SimpleNode)jjtGetChild( i ) ).toXArch( context, xarch );

	    ObjRef newOr = xarch.create( context, "Or" );
	    xarch.set( newOr, "BooleanExp1", leftOperand );
	    xarch.set( newOr, "BooleanExp2", rightOperand );

	    or = newOr;
        }

        ObjRef boolexp = xarch.create( context, "BooleanExp" );
        xarch.set( boolexp, "Or", or );

        return boolexp;
    }

    /**
     * Returns a human readable representation of the expression stored
     * in a OR node.
     * @return OR expression.
     */
    public String toString()
    {
        StringBuffer s = new StringBuffer( new String( "(" ) );

        for ( int i = 0; i < jjtGetNumChildren() - 1; ++i )
        {
            s.append( ( ( SimpleNode ) jjtGetChild( i ) ).toString() + " || " );
        }

        s.append( ( ( SimpleNode ) jjtGetChild( jjtGetNumChildren() - 1 ) ).toString() + ")" );

        return s.toString();

    }
}
