/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.hints3;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * HintedElement <code>xsi:type</code> in the
 * hints3 namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IHintedElement extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"hints3", "HintedElement", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("identifier", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createAttribute("type", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createElement("target", "instance", "XMLLink", 0, 1),
			XArchPropertyMetadata.createElement("property", "hints3", "Property", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("hintedElement", "hints3", "HintedElement", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the identifier attribute on this HintedElement.
	 * @param identifier identifier
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setIdentifier(String identifier);

	/**
	 * Remove the identifier attribute from this HintedElement.
	 */
	public void clearIdentifier();

	/**
	 * Get the identifier attribute from this HintedElement.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return identifier on this HintedElement
	 */
	public String getIdentifier();

	/**
	 * Determine if the identifier attribute on this HintedElement
	 * has the given value.
	 * @param identifier Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasIdentifier(String identifier);


	/**
	 * Set the type attribute on this HintedElement.
	 * @param type type
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setType(String type);

	/**
	 * Remove the type attribute from this HintedElement.
	 */
	public void clearType();

	/**
	 * Get the type attribute from this HintedElement.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return type on this HintedElement
	 */
	public String getType();

	/**
	 * Determine if the type attribute on this HintedElement
	 * has the given value.
	 * @param type Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasType(String type);


	/**
	 * Set the target for this HintedElement.
	 * @param value new target
	 */
	public void setTarget(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the target from this HintedElement.
	 */
	public void clearTarget();

	/**
	 * Get the target from this HintedElement.
	 * @return target
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getTarget();

	/**
	 * Determine if this HintedElement has the given target
	 * @param targetToCheck target to compare
	 * @return <code>true</code> if the targets are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasTarget(edu.uci.isr.xarch.instance.IXMLLink targetToCheck);

	/**
	 * Add a property to this HintedElement.
	 * @param newProperty property to add.
	 */
	public void addProperty(IProperty newProperty);

	/**
	 * Add a collection of propertys to this HintedElement.
	 * @param propertys propertys to add.
	 */
	public void addPropertys(Collection propertys);

	/**
	 * Remove all propertys from this HintedElement.
	 */
	public void clearPropertys();

	/**
	 * Remove the given property from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param propertyToRemove property to remove.
	 */
	public void removeProperty(IProperty propertyToRemove);

	/**
	 * Remove all the given propertys from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param propertys property to remove.
	 */
	public void removePropertys(Collection propertys);

	/**
	 * Get all the propertys from this HintedElement.
	 * @return all propertys in this HintedElement.
	 */
	public Collection getAllPropertys();

	/**
	 * Determine if this HintedElement contains a given property.
	 * @return <code>true</code> if this HintedElement contains the given
	 * propertyToCheck, <code>false</code> otherwise.
	 */
	public boolean hasProperty(IProperty propertyToCheck);

	/**
	 * Determine if this HintedElement contains the given set of propertys.
	 * @param propertysToCheck propertys to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>propertys</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasPropertys(Collection propertysToCheck);

	/**
	 * Determine if this HintedElement contains each element in the 
	 * given set of propertys.
	 * @param propertysToCheck propertys to check for.
	 * @return <code>true</code> if every element in
	 * <code>propertys</code> is found in this HintedElement,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllPropertys(Collection propertysToCheck);


	/**
	 * Add a hintedElement to this HintedElement.
	 * @param newHintedElement hintedElement to add.
	 */
	public void addHintedElement(IHintedElement newHintedElement);

	/**
	 * Add a collection of hintedElements to this HintedElement.
	 * @param hintedElements hintedElements to add.
	 */
	public void addHintedElements(Collection hintedElements);

	/**
	 * Remove all hintedElements from this HintedElement.
	 */
	public void clearHintedElements();

	/**
	 * Remove the given hintedElement from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param hintedElementToRemove hintedElement to remove.
	 */
	public void removeHintedElement(IHintedElement hintedElementToRemove);

	/**
	 * Remove all the given hintedElements from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param hintedElements hintedElement to remove.
	 */
	public void removeHintedElements(Collection hintedElements);

	/**
	 * Get all the hintedElements from this HintedElement.
	 * @return all hintedElements in this HintedElement.
	 */
	public Collection getAllHintedElements();

	/**
	 * Determine if this HintedElement contains a given hintedElement.
	 * @return <code>true</code> if this HintedElement contains the given
	 * hintedElementToCheck, <code>false</code> otherwise.
	 */
	public boolean hasHintedElement(IHintedElement hintedElementToCheck);

	/**
	 * Determine if this HintedElement contains the given set of hintedElements.
	 * @param hintedElementsToCheck hintedElements to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>hintedElements</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasHintedElements(Collection hintedElementsToCheck);

	/**
	 * Determine if this HintedElement contains each element in the 
	 * given set of hintedElements.
	 * @param hintedElementsToCheck hintedElements to check for.
	 * @return <code>true</code> if every element in
	 * <code>hintedElements</code> is found in this HintedElement,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllHintedElements(Collection hintedElementsToCheck);

	/**
	 * Determine if another HintedElement is equivalent to this one, ignoring
	 * ID's.
	 * @param HintedElementToCheck HintedElement to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * HintedElement are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IHintedElement HintedElementToCheck);

}
