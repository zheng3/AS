/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.statecharts;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Transition <code>xsi:type</code> in the
 * statecharts namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface ITransition extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"statecharts", "Transition", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("trigger", "statecharts", "Event", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("guard", "statecharts", "Guard", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("effect", "statecharts", "Action", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("fromState", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("toState", "instance", "XMLLink", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this Transition.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this Transition.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this Transition.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this Transition
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this Transition
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this Transition.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this Transition.
	 */
	public void clearDescription();

	/**
	 * Get the description from this Transition.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this Transition has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Add a trigger to this Transition.
	 * @param newTrigger trigger to add.
	 */
	public void addTrigger(IEvent newTrigger);

	/**
	 * Add a collection of triggers to this Transition.
	 * @param triggers triggers to add.
	 */
	public void addTriggers(Collection triggers);

	/**
	 * Remove all triggers from this Transition.
	 */
	public void clearTriggers();

	/**
	 * Remove the given trigger from this Transition.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param triggerToRemove trigger to remove.
	 */
	public void removeTrigger(IEvent triggerToRemove);

	/**
	 * Remove all the given triggers from this Transition.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param triggers trigger to remove.
	 */
	public void removeTriggers(Collection triggers);

	/**
	 * Get all the triggers from this Transition.
	 * @return all triggers in this Transition.
	 */
	public Collection getAllTriggers();

	/**
	 * Determine if this Transition contains a given trigger.
	 * @return <code>true</code> if this Transition contains the given
	 * triggerToCheck, <code>false</code> otherwise.
	 */
	public boolean hasTrigger(IEvent triggerToCheck);

	/**
	 * Determine if this Transition contains the given set of triggers.
	 * @param triggersToCheck triggers to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>triggers</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasTriggers(Collection triggersToCheck);

	/**
	 * Determine if this Transition contains each element in the 
	 * given set of triggers.
	 * @param triggersToCheck triggers to check for.
	 * @return <code>true</code> if every element in
	 * <code>triggers</code> is found in this Transition,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllTriggers(Collection triggersToCheck);


	/**
	 * Add a guard to this Transition.
	 * @param newGuard guard to add.
	 */
	public void addGuard(IGuard newGuard);

	/**
	 * Add a collection of guards to this Transition.
	 * @param guards guards to add.
	 */
	public void addGuards(Collection guards);

	/**
	 * Remove all guards from this Transition.
	 */
	public void clearGuards();

	/**
	 * Remove the given guard from this Transition.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param guardToRemove guard to remove.
	 */
	public void removeGuard(IGuard guardToRemove);

	/**
	 * Remove all the given guards from this Transition.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param guards guard to remove.
	 */
	public void removeGuards(Collection guards);

	/**
	 * Get all the guards from this Transition.
	 * @return all guards in this Transition.
	 */
	public Collection getAllGuards();

	/**
	 * Determine if this Transition contains a given guard.
	 * @return <code>true</code> if this Transition contains the given
	 * guardToCheck, <code>false</code> otherwise.
	 */
	public boolean hasGuard(IGuard guardToCheck);

	/**
	 * Determine if this Transition contains the given set of guards.
	 * @param guardsToCheck guards to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>guards</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasGuards(Collection guardsToCheck);

	/**
	 * Determine if this Transition contains each element in the 
	 * given set of guards.
	 * @param guardsToCheck guards to check for.
	 * @return <code>true</code> if every element in
	 * <code>guards</code> is found in this Transition,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllGuards(Collection guardsToCheck);


	/**
	 * Add a effect to this Transition.
	 * @param newEffect effect to add.
	 */
	public void addEffect(IAction newEffect);

	/**
	 * Add a collection of effects to this Transition.
	 * @param effects effects to add.
	 */
	public void addEffects(Collection effects);

	/**
	 * Remove all effects from this Transition.
	 */
	public void clearEffects();

	/**
	 * Remove the given effect from this Transition.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param effectToRemove effect to remove.
	 */
	public void removeEffect(IAction effectToRemove);

	/**
	 * Remove all the given effects from this Transition.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param effects effect to remove.
	 */
	public void removeEffects(Collection effects);

	/**
	 * Get all the effects from this Transition.
	 * @return all effects in this Transition.
	 */
	public Collection getAllEffects();

	/**
	 * Determine if this Transition contains a given effect.
	 * @return <code>true</code> if this Transition contains the given
	 * effectToCheck, <code>false</code> otherwise.
	 */
	public boolean hasEffect(IAction effectToCheck);

	/**
	 * Determine if this Transition contains the given set of effects.
	 * @param effectsToCheck effects to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>effects</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasEffects(Collection effectsToCheck);

	/**
	 * Determine if this Transition contains each element in the 
	 * given set of effects.
	 * @param effectsToCheck effects to check for.
	 * @return <code>true</code> if every element in
	 * <code>effects</code> is found in this Transition,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllEffects(Collection effectsToCheck);


	/**
	 * Set the fromState for this Transition.
	 * @param value new fromState
	 */
	public void setFromState(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the fromState from this Transition.
	 */
	public void clearFromState();

	/**
	 * Get the fromState from this Transition.
	 * @return fromState
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getFromState();

	/**
	 * Determine if this Transition has the given fromState
	 * @param fromStateToCheck fromState to compare
	 * @return <code>true</code> if the fromStates are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasFromState(edu.uci.isr.xarch.instance.IXMLLink fromStateToCheck);

	/**
	 * Set the toState for this Transition.
	 * @param value new toState
	 */
	public void setToState(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the toState from this Transition.
	 */
	public void clearToState();

	/**
	 * Get the toState from this Transition.
	 * @return toState
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getToState();

	/**
	 * Determine if this Transition has the given toState
	 * @param toStateToCheck toState to compare
	 * @return <code>true</code> if the toStates are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasToState(edu.uci.isr.xarch.instance.IXMLLink toStateToCheck);
	/**
	 * Determine if another Transition has the same
	 * id as this one.
	 * @param TransitionToCheck Transition to compare with this
	 * one.
	 */
	public boolean isEqual(ITransition TransitionToCheck);
	/**
	 * Determine if another Transition is equivalent to this one, ignoring
	 * ID's.
	 * @param TransitionToCheck Transition to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Transition are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(ITransition TransitionToCheck);

}
