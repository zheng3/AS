/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.versions;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchVersions <code>xsi:type</code> in the
 * versions namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchVersions extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"versions", "ArchVersions", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("componentTypeVersionGraph", "versions", "ComponentTypeVersionGraph", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("connectorTypeVersionGraph", "versions", "ConnectorTypeVersionGraph", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("interfaceTypeVersionGraph", "versions", "InterfaceTypeVersionGraph", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Add a componentTypeVersionGraph to this ArchVersions.
	 * @param newComponentTypeVersionGraph componentTypeVersionGraph to add.
	 */
	public void addComponentTypeVersionGraph(IComponentTypeVersionGraph newComponentTypeVersionGraph);

	/**
	 * Add a collection of componentTypeVersionGraphs to this ArchVersions.
	 * @param componentTypeVersionGraphs componentTypeVersionGraphs to add.
	 */
	public void addComponentTypeVersionGraphs(Collection componentTypeVersionGraphs);

	/**
	 * Remove all componentTypeVersionGraphs from this ArchVersions.
	 */
	public void clearComponentTypeVersionGraphs();

	/**
	 * Remove the given componentTypeVersionGraph from this ArchVersions.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentTypeVersionGraphToRemove componentTypeVersionGraph to remove.
	 */
	public void removeComponentTypeVersionGraph(IComponentTypeVersionGraph componentTypeVersionGraphToRemove);

	/**
	 * Remove all the given componentTypeVersionGraphs from this ArchVersions.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentTypeVersionGraphs componentTypeVersionGraph to remove.
	 */
	public void removeComponentTypeVersionGraphs(Collection componentTypeVersionGraphs);

	/**
	 * Get all the componentTypeVersionGraphs from this ArchVersions.
	 * @return all componentTypeVersionGraphs in this ArchVersions.
	 */
	public Collection getAllComponentTypeVersionGraphs();

	/**
	 * Determine if this ArchVersions contains a given componentTypeVersionGraph.
	 * @return <code>true</code> if this ArchVersions contains the given
	 * componentTypeVersionGraphToCheck, <code>false</code> otherwise.
	 */
	public boolean hasComponentTypeVersionGraph(IComponentTypeVersionGraph componentTypeVersionGraphToCheck);

	/**
	 * Determine if this ArchVersions contains the given set of componentTypeVersionGraphs.
	 * @param componentTypeVersionGraphsToCheck componentTypeVersionGraphs to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>componentTypeVersionGraphs</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasComponentTypeVersionGraphs(Collection componentTypeVersionGraphsToCheck);

	/**
	 * Determine if this ArchVersions contains each element in the 
	 * given set of componentTypeVersionGraphs.
	 * @param componentTypeVersionGraphsToCheck componentTypeVersionGraphs to check for.
	 * @return <code>true</code> if every element in
	 * <code>componentTypeVersionGraphs</code> is found in this ArchVersions,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllComponentTypeVersionGraphs(Collection componentTypeVersionGraphsToCheck);

	/**
	 * Gets the componentTypeVersionGraph from this ArchVersions with the given
	 * id.
	 * @param id ID to look for.
	 * @return componentTypeVersionGraph with the given ID, or <code>null</code> if not found.
	 */
	public IComponentTypeVersionGraph getComponentTypeVersionGraph(String id);

	/**
	 * Gets the componentTypeVersionGraphs from this ArchVersions with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return componentTypeVersionGraphs with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getComponentTypeVersionGraphs(Collection ids);


	/**
	 * Add a connectorTypeVersionGraph to this ArchVersions.
	 * @param newConnectorTypeVersionGraph connectorTypeVersionGraph to add.
	 */
	public void addConnectorTypeVersionGraph(IConnectorTypeVersionGraph newConnectorTypeVersionGraph);

	/**
	 * Add a collection of connectorTypeVersionGraphs to this ArchVersions.
	 * @param connectorTypeVersionGraphs connectorTypeVersionGraphs to add.
	 */
	public void addConnectorTypeVersionGraphs(Collection connectorTypeVersionGraphs);

	/**
	 * Remove all connectorTypeVersionGraphs from this ArchVersions.
	 */
	public void clearConnectorTypeVersionGraphs();

	/**
	 * Remove the given connectorTypeVersionGraph from this ArchVersions.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorTypeVersionGraphToRemove connectorTypeVersionGraph to remove.
	 */
	public void removeConnectorTypeVersionGraph(IConnectorTypeVersionGraph connectorTypeVersionGraphToRemove);

	/**
	 * Remove all the given connectorTypeVersionGraphs from this ArchVersions.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorTypeVersionGraphs connectorTypeVersionGraph to remove.
	 */
	public void removeConnectorTypeVersionGraphs(Collection connectorTypeVersionGraphs);

	/**
	 * Get all the connectorTypeVersionGraphs from this ArchVersions.
	 * @return all connectorTypeVersionGraphs in this ArchVersions.
	 */
	public Collection getAllConnectorTypeVersionGraphs();

	/**
	 * Determine if this ArchVersions contains a given connectorTypeVersionGraph.
	 * @return <code>true</code> if this ArchVersions contains the given
	 * connectorTypeVersionGraphToCheck, <code>false</code> otherwise.
	 */
	public boolean hasConnectorTypeVersionGraph(IConnectorTypeVersionGraph connectorTypeVersionGraphToCheck);

	/**
	 * Determine if this ArchVersions contains the given set of connectorTypeVersionGraphs.
	 * @param connectorTypeVersionGraphsToCheck connectorTypeVersionGraphs to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>connectorTypeVersionGraphs</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasConnectorTypeVersionGraphs(Collection connectorTypeVersionGraphsToCheck);

	/**
	 * Determine if this ArchVersions contains each element in the 
	 * given set of connectorTypeVersionGraphs.
	 * @param connectorTypeVersionGraphsToCheck connectorTypeVersionGraphs to check for.
	 * @return <code>true</code> if every element in
	 * <code>connectorTypeVersionGraphs</code> is found in this ArchVersions,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllConnectorTypeVersionGraphs(Collection connectorTypeVersionGraphsToCheck);

	/**
	 * Gets the connectorTypeVersionGraph from this ArchVersions with the given
	 * id.
	 * @param id ID to look for.
	 * @return connectorTypeVersionGraph with the given ID, or <code>null</code> if not found.
	 */
	public IConnectorTypeVersionGraph getConnectorTypeVersionGraph(String id);

	/**
	 * Gets the connectorTypeVersionGraphs from this ArchVersions with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return connectorTypeVersionGraphs with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getConnectorTypeVersionGraphs(Collection ids);


	/**
	 * Add a interfaceTypeVersionGraph to this ArchVersions.
	 * @param newInterfaceTypeVersionGraph interfaceTypeVersionGraph to add.
	 */
	public void addInterfaceTypeVersionGraph(IInterfaceTypeVersionGraph newInterfaceTypeVersionGraph);

	/**
	 * Add a collection of interfaceTypeVersionGraphs to this ArchVersions.
	 * @param interfaceTypeVersionGraphs interfaceTypeVersionGraphs to add.
	 */
	public void addInterfaceTypeVersionGraphs(Collection interfaceTypeVersionGraphs);

	/**
	 * Remove all interfaceTypeVersionGraphs from this ArchVersions.
	 */
	public void clearInterfaceTypeVersionGraphs();

	/**
	 * Remove the given interfaceTypeVersionGraph from this ArchVersions.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param interfaceTypeVersionGraphToRemove interfaceTypeVersionGraph to remove.
	 */
	public void removeInterfaceTypeVersionGraph(IInterfaceTypeVersionGraph interfaceTypeVersionGraphToRemove);

	/**
	 * Remove all the given interfaceTypeVersionGraphs from this ArchVersions.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param interfaceTypeVersionGraphs interfaceTypeVersionGraph to remove.
	 */
	public void removeInterfaceTypeVersionGraphs(Collection interfaceTypeVersionGraphs);

	/**
	 * Get all the interfaceTypeVersionGraphs from this ArchVersions.
	 * @return all interfaceTypeVersionGraphs in this ArchVersions.
	 */
	public Collection getAllInterfaceTypeVersionGraphs();

	/**
	 * Determine if this ArchVersions contains a given interfaceTypeVersionGraph.
	 * @return <code>true</code> if this ArchVersions contains the given
	 * interfaceTypeVersionGraphToCheck, <code>false</code> otherwise.
	 */
	public boolean hasInterfaceTypeVersionGraph(IInterfaceTypeVersionGraph interfaceTypeVersionGraphToCheck);

	/**
	 * Determine if this ArchVersions contains the given set of interfaceTypeVersionGraphs.
	 * @param interfaceTypeVersionGraphsToCheck interfaceTypeVersionGraphs to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>interfaceTypeVersionGraphs</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasInterfaceTypeVersionGraphs(Collection interfaceTypeVersionGraphsToCheck);

	/**
	 * Determine if this ArchVersions contains each element in the 
	 * given set of interfaceTypeVersionGraphs.
	 * @param interfaceTypeVersionGraphsToCheck interfaceTypeVersionGraphs to check for.
	 * @return <code>true</code> if every element in
	 * <code>interfaceTypeVersionGraphs</code> is found in this ArchVersions,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllInterfaceTypeVersionGraphs(Collection interfaceTypeVersionGraphsToCheck);

	/**
	 * Gets the interfaceTypeVersionGraph from this ArchVersions with the given
	 * id.
	 * @param id ID to look for.
	 * @return interfaceTypeVersionGraph with the given ID, or <code>null</code> if not found.
	 */
	public IInterfaceTypeVersionGraph getInterfaceTypeVersionGraph(String id);

	/**
	 * Gets the interfaceTypeVersionGraphs from this ArchVersions with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return interfaceTypeVersionGraphs with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getInterfaceTypeVersionGraphs(Collection ids);

	/**
	 * Determine if another ArchVersions is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchVersionsToCheck ArchVersions to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchVersions are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchVersions ArchVersionsToCheck);

}
