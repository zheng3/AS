/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.changesets;

import org.w3c.dom.*;

import edu.uci.isr.xarch.*;

import java.util.*;

/**
 * DOM-Based implementation of the IArchChangeSets interface.
 *
 * @author Automatically generated by xArch apigen.
 */
public class ArchChangeSetsImpl implements IArchChangeSets, DOMBased{
	
	public static final String XSD_TYPE_NSURI = ChangesetsConstants.NS_URI;
	public static final String XSD_TYPE_NAME = "ArchChangeSets";
	
	protected IXArch xArch;
	
	/** Tag name for changeSetOrders in this object. */
	public static final String CHANGE_SET_ORDER_ATTR_NAME = "changeSetOrder";
	/** Tag name for groupOrders in this object. */
	public static final String GROUP_ORDER_ATTR_NAME = "groupOrder";
	/** Tag name for appliedChangeSetss in this object. */
	public static final String APPLIED_CHANGE_SETS_ATTR_NAME = "appliedChangeSets";
	/** Tag name for changeSets in this object. */
	public static final String CHANGE_SET_ELT_NAME = "changeSet";
	/** Tag name for relationships in this object. */
	public static final String RELATIONSHIP_ELT_NAME = "relationship";
	/** Tag name for groups in this object. */
	public static final String GROUP_ELT_NAME = "group";

	
	protected Element elt;
	
	private static SequenceOrder seqOrd = new SequenceOrder(
		new QName[]{
			new QName(ChangesetsConstants.NS_URI, CHANGE_SET_ELT_NAME),
			new QName(ChangesetsConstants.NS_URI, RELATIONSHIP_ELT_NAME),
			new QName(ChangesetsConstants.NS_URI, GROUP_ELT_NAME)
		}
	);
	
	public ArchChangeSetsImpl(Element elt){
		if(elt == null){
			throw new IllegalArgumentException("Element cannot be null.");
		}
		this.elt = elt;
	}

	public Node getDOMNode(){
		return elt;
	}
	
	public void setDOMNode(Node node){
		if(node.getNodeType() != Node.ELEMENT_NODE){
			throw new IllegalArgumentException("Base DOM node of this type must be an Element.");
		}
		elt = (Element)node;
	}
	
	protected static SequenceOrder getSequenceOrder(){
		return seqOrd;
	}
	
	public void setXArch(IXArch xArch){
		this.xArch = xArch;
	}
	
	public IXArch getXArch(){
		return this.xArch;
	}

	public IXArchElement cloneElement(int depth){
		synchronized(DOMUtils.getDOMLock(elt)){
			Document doc = elt.getOwnerDocument();
			if(depth == 0){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ArchChangeSetsImpl cloneImpl = new ArchChangeSetsImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
			else if(depth == 1){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ArchChangeSetsImpl cloneImpl = new ArchChangeSetsImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				
				NodeList nl = elt.getChildNodes();
				int size = nl.getLength();
				for(int i = 0; i < size; i++){
					Node n = nl.item(i);
					Node cloneNode = (Node)n.cloneNode(false);
					cloneNode = doc.importNode(cloneNode, true);
					cloneElt.appendChild(cloneNode);
				}
				return cloneImpl;
			}
			else /* depth = infinity */{
				Element cloneElt = (Element)elt.cloneNode(true);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ArchChangeSetsImpl cloneImpl = new ArchChangeSetsImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
		}
	}

	//Override 'equals' to be DOM-based...	
	public boolean equals(Object o){
		if(o == null){
			return false;
		}
		if(!(o instanceof DOMBased)){
			return super.equals(o);
		}
		DOMBased db = (DOMBased)o;
		Node dbNode = db.getDOMNode();
		return dbNode.equals(getDOMNode());
	}

	//Override 'hashCode' to be based on the underlying node
	public int hashCode(){
		return getDOMNode().hashCode();
	}

	/**
	 * For internal use only.
	 */
	private static Object makeDerivedWrapper(Element elt, String baseTypeName){
		synchronized(DOMUtils.getDOMLock(elt)){
			QName typeName = XArchUtils.getXSIType(elt);
			if(typeName == null){
				return null;
			}
			else{
				if(!DOMUtils.hasXSIType(elt, "http://www.ics.uci.edu/pub/arch/xArch/changesets.xsd", baseTypeName)){
					try{
						String packageTitle = XArchUtils.getPackageTitle(typeName.getNamespaceURI());
						String packageName = XArchUtils.getPackageName(packageTitle);
						String implName = XArchUtils.getImplName(packageName, typeName.getName());
						Class c = Class.forName(implName);
						java.lang.reflect.Constructor con = c.getConstructor(new Class[]{Element.class});
						Object o = con.newInstance(new Object[]{elt});
						return o;
					}
					catch(Exception e){
						//Lots of bad things could happen, but this
						//is OK, because this is best-effort anyway.
					}
				}
				return null;
			}
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IArchChangeSets.TYPE_METADATA;
	}

	public XArchInstanceMetadata getInstanceMetadata(){
		return new XArchInstanceMetadata(XArchUtils.getPackageTitle(elt.getNamespaceURI()));
	}
	/**
	 * Set the changeSetOrder attribute on this object.
	 * @param changeSetOrder attribute value.
	 */
	public void setChangeSetOrder(String changeSetOrder){
		{
			String oldValue = getChangeSetOrder();
			if(oldValue == null ? changeSetOrder == null : oldValue.equals(changeSetOrder))
				return;
			DOMUtils.removeAttribute(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ORDER_ATTR_NAME);
			IXArch _x = getXArch();
			if(_x != null){
				_x.fireXArchEvent(
					new XArchEvent(this, 
					XArchEvent.CLEAR_EVENT,
					XArchEvent.ATTRIBUTE_CHANGED,
					"changeSetOrder", oldValue,
					XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this), true)
				);
			}
		}
		DOMUtils.setAttribute(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ORDER_ATTR_NAME, changeSetOrder);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.SET_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"changeSetOrder", changeSetOrder,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	/**
	 * Removes the changeSetOrder attribute from this object.
	 */
	public void clearChangeSetOrder(){
		String oldValue = getChangeSetOrder();
		if(oldValue == null)
			return;
		DOMUtils.removeAttribute(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ORDER_ATTR_NAME);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.CLEAR_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"changeSetOrder", oldValue,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
	
	/**
	 * Gets the value of the changeSetOrder attribute on this object.
	 * @return changeSetOrder attribute's value or <code>null</code> if that
	 * attribute is not set.
	 */
	public String getChangeSetOrder(){
		return DOMUtils.getAttributeValue(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ORDER_ATTR_NAME);
	}
	
	/**
	 * Determines if this object's changeSetOrder attribute has the
	 * given value.
	 * @param changeSetOrder value to test.
	 * @return <code>true</code> if the values match, <code>false</code> otherwise.
	 * Matching is done by string-matching.
	 */
	public boolean hasChangeSetOrder(String changeSetOrder){
		return DOMUtils.objNullEq(getChangeSetOrder(), changeSetOrder);
	}

	/**
	 * Set the groupOrder attribute on this object.
	 * @param groupOrder attribute value.
	 */
	public void setGroupOrder(String groupOrder){
		{
			String oldValue = getGroupOrder();
			if(oldValue == null ? groupOrder == null : oldValue.equals(groupOrder))
				return;
			DOMUtils.removeAttribute(elt, ChangesetsConstants.NS_URI, GROUP_ORDER_ATTR_NAME);
			IXArch _x = getXArch();
			if(_x != null){
				_x.fireXArchEvent(
					new XArchEvent(this, 
					XArchEvent.CLEAR_EVENT,
					XArchEvent.ATTRIBUTE_CHANGED,
					"groupOrder", oldValue,
					XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this), true)
				);
			}
		}
		DOMUtils.setAttribute(elt, ChangesetsConstants.NS_URI, GROUP_ORDER_ATTR_NAME, groupOrder);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.SET_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"groupOrder", groupOrder,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	/**
	 * Removes the groupOrder attribute from this object.
	 */
	public void clearGroupOrder(){
		String oldValue = getGroupOrder();
		if(oldValue == null)
			return;
		DOMUtils.removeAttribute(elt, ChangesetsConstants.NS_URI, GROUP_ORDER_ATTR_NAME);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.CLEAR_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"groupOrder", oldValue,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
	
	/**
	 * Gets the value of the groupOrder attribute on this object.
	 * @return groupOrder attribute's value or <code>null</code> if that
	 * attribute is not set.
	 */
	public String getGroupOrder(){
		return DOMUtils.getAttributeValue(elt, ChangesetsConstants.NS_URI, GROUP_ORDER_ATTR_NAME);
	}
	
	/**
	 * Determines if this object's groupOrder attribute has the
	 * given value.
	 * @param groupOrder value to test.
	 * @return <code>true</code> if the values match, <code>false</code> otherwise.
	 * Matching is done by string-matching.
	 */
	public boolean hasGroupOrder(String groupOrder){
		return DOMUtils.objNullEq(getGroupOrder(), groupOrder);
	}

	/**
	 * Set the appliedChangeSets attribute on this object.
	 * @param appliedChangeSets attribute value.
	 */
	public void setAppliedChangeSets(String appliedChangeSets){
		{
			String oldValue = getAppliedChangeSets();
			if(oldValue == null ? appliedChangeSets == null : oldValue.equals(appliedChangeSets))
				return;
			DOMUtils.removeAttribute(elt, ChangesetsConstants.NS_URI, APPLIED_CHANGE_SETS_ATTR_NAME);
			IXArch _x = getXArch();
			if(_x != null){
				_x.fireXArchEvent(
					new XArchEvent(this, 
					XArchEvent.CLEAR_EVENT,
					XArchEvent.ATTRIBUTE_CHANGED,
					"appliedChangeSets", oldValue,
					XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this), true)
				);
			}
		}
		DOMUtils.setAttribute(elt, ChangesetsConstants.NS_URI, APPLIED_CHANGE_SETS_ATTR_NAME, appliedChangeSets);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.SET_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"appliedChangeSets", appliedChangeSets,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	/**
	 * Removes the appliedChangeSets attribute from this object.
	 */
	public void clearAppliedChangeSets(){
		String oldValue = getAppliedChangeSets();
		if(oldValue == null)
			return;
		DOMUtils.removeAttribute(elt, ChangesetsConstants.NS_URI, APPLIED_CHANGE_SETS_ATTR_NAME);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.CLEAR_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"appliedChangeSets", oldValue,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
	
	/**
	 * Gets the value of the appliedChangeSets attribute on this object.
	 * @return appliedChangeSets attribute's value or <code>null</code> if that
	 * attribute is not set.
	 */
	public String getAppliedChangeSets(){
		return DOMUtils.getAttributeValue(elt, ChangesetsConstants.NS_URI, APPLIED_CHANGE_SETS_ATTR_NAME);
	}
	
	/**
	 * Determines if this object's appliedChangeSets attribute has the
	 * given value.
	 * @param appliedChangeSets value to test.
	 * @return <code>true</code> if the values match, <code>false</code> otherwise.
	 * Matching is done by string-matching.
	 */
	public boolean hasAppliedChangeSets(String appliedChangeSets){
		return DOMUtils.objNullEq(getAppliedChangeSets(), appliedChangeSets);
	}

	public void addChangeSet(IChangeSet newChangeSet){
		if(!(newChangeSet instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newChangeSet).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ChangesetsConstants.NS_URI, CHANGE_SET_ELT_NAME);
		((DOMBased)newChangeSet).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"changeSet", newChangeSet,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addChangeSets(Collection changeSets){
		for(Iterator en = changeSets.iterator(); en.hasNext(); ){
			IChangeSet elt = (IChangeSet)en.next();
			addChangeSet(elt);
		}
	}		
		
	public void clearChangeSets(){
		//DOMUtils.removeChildren(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ELT_NAME);
		Collection coll = getAllChangeSets();
		removeChangeSets(coll);
	}
	
	public void removeChangeSet(IChangeSet changeSetToRemove){
		if(!(changeSetToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)changeSetToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"changeSet", changeSetToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeChangeSets(Collection changeSets){
		for(Iterator en = changeSets.iterator(); en.hasNext(); ){
			IChangeSet elt = (IChangeSet)en.next();
			removeChangeSet(elt);
		}
	}
	
	public Collection getAllChangeSets(){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IChangeSet)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "ChangeSet");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IChangeSet)o);
					}
					catch(Exception e){
						ChangeSetImpl eltImpl = new ChangeSetImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ChangeSetImpl eltImpl = new ChangeSetImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasChangeSet(IChangeSet changeSetToCheck){
		Collection c = getAllChangeSets();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IChangeSet elt = (IChangeSet)en.next();
			if(elt.isEquivalent(changeSetToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasChangeSets(Collection changeSetsToCheck){
		Vector v = new Vector();
		for(Iterator en = changeSetsToCheck.iterator(); en.hasNext(); ){
			IChangeSet elt = (IChangeSet)en.next();
			v.addElement(new Boolean(hasChangeSet(elt)));
		}
		return v;
	}
		
	public boolean hasAllChangeSets(Collection changeSetsToCheck){
		for(Iterator en = changeSetsToCheck.iterator(); en.hasNext(); ){
			IChangeSet elt = (IChangeSet)en.next();
			if(!hasChangeSet(elt)){
				return false;
			}
		}
		return true;
	}
	public IChangeSet getChangeSet(String id){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, CHANGE_SET_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			IChangeSet el = new ChangeSetImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "ChangeSet");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (IChangeSet)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getChangeSets(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			IChangeSet retElt = getChangeSet(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public void addRelationship(IRelationship newRelationship){
		if(!(newRelationship instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newRelationship).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ChangesetsConstants.NS_URI, RELATIONSHIP_ELT_NAME);
		((DOMBased)newRelationship).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"relationship", newRelationship,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addRelationships(Collection relationships){
		for(Iterator en = relationships.iterator(); en.hasNext(); ){
			IRelationship elt = (IRelationship)en.next();
			addRelationship(elt);
		}
	}		
		
	public void clearRelationships(){
		//DOMUtils.removeChildren(elt, ChangesetsConstants.NS_URI, RELATIONSHIP_ELT_NAME);
		Collection coll = getAllRelationships();
		removeRelationships(coll);
	}
	
	public void removeRelationship(IRelationship relationshipToRemove){
		if(!(relationshipToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, RELATIONSHIP_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)relationshipToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"relationship", relationshipToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeRelationships(Collection relationships){
		for(Iterator en = relationships.iterator(); en.hasNext(); ){
			IRelationship elt = (IRelationship)en.next();
			removeRelationship(elt);
		}
	}
	
	public Collection getAllRelationships(){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, RELATIONSHIP_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IRelationship)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "Relationship");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IRelationship)o);
					}
					catch(Exception e){
						RelationshipImpl eltImpl = new RelationshipImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					RelationshipImpl eltImpl = new RelationshipImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasRelationship(IRelationship relationshipToCheck){
		Collection c = getAllRelationships();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IRelationship elt = (IRelationship)en.next();
			if(elt.isEquivalent(relationshipToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasRelationships(Collection relationshipsToCheck){
		Vector v = new Vector();
		for(Iterator en = relationshipsToCheck.iterator(); en.hasNext(); ){
			IRelationship elt = (IRelationship)en.next();
			v.addElement(new Boolean(hasRelationship(elt)));
		}
		return v;
	}
		
	public boolean hasAllRelationships(Collection relationshipsToCheck){
		for(Iterator en = relationshipsToCheck.iterator(); en.hasNext(); ){
			IRelationship elt = (IRelationship)en.next();
			if(!hasRelationship(elt)){
				return false;
			}
		}
		return true;
	}
	public IRelationship getRelationship(String id){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, RELATIONSHIP_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			IRelationship el = new RelationshipImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "Relationship");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (IRelationship)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getRelationships(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			IRelationship retElt = getRelationship(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public void addGroup(IGroup newGroup){
		if(!(newGroup instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newGroup).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ChangesetsConstants.NS_URI, GROUP_ELT_NAME);
		((DOMBased)newGroup).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"group", newGroup,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addGroups(Collection groups){
		for(Iterator en = groups.iterator(); en.hasNext(); ){
			IGroup elt = (IGroup)en.next();
			addGroup(elt);
		}
	}		
		
	public void clearGroups(){
		//DOMUtils.removeChildren(elt, ChangesetsConstants.NS_URI, GROUP_ELT_NAME);
		Collection coll = getAllGroups();
		removeGroups(coll);
	}
	
	public void removeGroup(IGroup groupToRemove){
		if(!(groupToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, GROUP_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)groupToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"group", groupToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeGroups(Collection groups){
		for(Iterator en = groups.iterator(); en.hasNext(); ){
			IGroup elt = (IGroup)en.next();
			removeGroup(elt);
		}
	}
	
	public Collection getAllGroups(){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, GROUP_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IGroup)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "Group");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IGroup)o);
					}
					catch(Exception e){
						GroupImpl eltImpl = new GroupImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					GroupImpl eltImpl = new GroupImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasGroup(IGroup groupToCheck){
		Collection c = getAllGroups();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IGroup elt = (IGroup)en.next();
			if(elt.isEquivalent(groupToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasGroups(Collection groupsToCheck){
		Vector v = new Vector();
		for(Iterator en = groupsToCheck.iterator(); en.hasNext(); ){
			IGroup elt = (IGroup)en.next();
			v.addElement(new Boolean(hasGroup(elt)));
		}
		return v;
	}
		
	public boolean hasAllGroups(Collection groupsToCheck){
		for(Iterator en = groupsToCheck.iterator(); en.hasNext(); ){
			IGroup elt = (IGroup)en.next();
			if(!hasGroup(elt)){
				return false;
			}
		}
		return true;
	}
	public IGroup getGroup(String id){
		NodeList nl = DOMUtils.getChildren(elt, ChangesetsConstants.NS_URI, GROUP_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			IGroup el = new GroupImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "Group");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (IGroup)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getGroups(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			IGroup retElt = getGroup(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public boolean isEquivalent(IArchChangeSets c){
		return (getClass().equals(c.getClass())) &&
		hasChangeSetOrder(c.getChangeSetOrder()) &&
		hasGroupOrder(c.getGroupOrder()) &&
		hasAppliedChangeSets(c.getAppliedChangeSets()) &&
			hasAllChangeSets(c.getAllChangeSets()) &&
			c.hasAllChangeSets(getAllChangeSets()) &&
			hasAllRelationships(c.getAllRelationships()) &&
			c.hasAllRelationships(getAllRelationships()) &&
			hasAllGroups(c.getAllGroups()) &&
			c.hasAllGroups(getAllGroups()) ;
	}

}
