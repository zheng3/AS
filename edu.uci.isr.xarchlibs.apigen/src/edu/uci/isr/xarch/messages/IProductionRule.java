/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.messages;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ProductionRule <code>xsi:type</code> in the
 * messages namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IProductionRule extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"messages", "ProductionRule", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("receiveMessage", "messages", "GenericMessage", 1, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("sendMessage", "messages", "GenericMessage", 1, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("causeTime", "messages", "CauseTime", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this ProductionRule.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this ProductionRule.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this ProductionRule.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this ProductionRule
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this ProductionRule
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this ProductionRule.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this ProductionRule.
	 */
	public void clearDescription();

	/**
	 * Get the description from this ProductionRule.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this ProductionRule has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Add a receiveMessage to this ProductionRule.
	 * @param newReceiveMessage receiveMessage to add.
	 */
	public void addReceiveMessage(IGenericMessage newReceiveMessage);

	/**
	 * Add a collection of receiveMessages to this ProductionRule.
	 * @param receiveMessages receiveMessages to add.
	 */
	public void addReceiveMessages(Collection receiveMessages);

	/**
	 * Remove all receiveMessages from this ProductionRule.
	 */
	public void clearReceiveMessages();

	/**
	 * Remove the given receiveMessage from this ProductionRule.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param receiveMessageToRemove receiveMessage to remove.
	 */
	public void removeReceiveMessage(IGenericMessage receiveMessageToRemove);

	/**
	 * Remove all the given receiveMessages from this ProductionRule.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param receiveMessages receiveMessage to remove.
	 */
	public void removeReceiveMessages(Collection receiveMessages);

	/**
	 * Get all the receiveMessages from this ProductionRule.
	 * @return all receiveMessages in this ProductionRule.
	 */
	public Collection getAllReceiveMessages();

	/**
	 * Determine if this ProductionRule contains a given receiveMessage.
	 * @return <code>true</code> if this ProductionRule contains the given
	 * receiveMessageToCheck, <code>false</code> otherwise.
	 */
	public boolean hasReceiveMessage(IGenericMessage receiveMessageToCheck);

	/**
	 * Determine if this ProductionRule contains the given set of receiveMessages.
	 * @param receiveMessagesToCheck receiveMessages to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>receiveMessages</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasReceiveMessages(Collection receiveMessagesToCheck);

	/**
	 * Determine if this ProductionRule contains each element in the 
	 * given set of receiveMessages.
	 * @param receiveMessagesToCheck receiveMessages to check for.
	 * @return <code>true</code> if every element in
	 * <code>receiveMessages</code> is found in this ProductionRule,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllReceiveMessages(Collection receiveMessagesToCheck);

	/**
	 * Gets the receiveMessage from this ProductionRule with the given
	 * id.
	 * @param id ID to look for.
	 * @return receiveMessage with the given ID, or <code>null</code> if not found.
	 */
	public IGenericMessage getReceiveMessage(String id);

	/**
	 * Gets the receiveMessages from this ProductionRule with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return receiveMessages with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getReceiveMessages(Collection ids);


	/**
	 * Add a sendMessage to this ProductionRule.
	 * @param newSendMessage sendMessage to add.
	 */
	public void addSendMessage(IGenericMessage newSendMessage);

	/**
	 * Add a collection of sendMessages to this ProductionRule.
	 * @param sendMessages sendMessages to add.
	 */
	public void addSendMessages(Collection sendMessages);

	/**
	 * Remove all sendMessages from this ProductionRule.
	 */
	public void clearSendMessages();

	/**
	 * Remove the given sendMessage from this ProductionRule.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param sendMessageToRemove sendMessage to remove.
	 */
	public void removeSendMessage(IGenericMessage sendMessageToRemove);

	/**
	 * Remove all the given sendMessages from this ProductionRule.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param sendMessages sendMessage to remove.
	 */
	public void removeSendMessages(Collection sendMessages);

	/**
	 * Get all the sendMessages from this ProductionRule.
	 * @return all sendMessages in this ProductionRule.
	 */
	public Collection getAllSendMessages();

	/**
	 * Determine if this ProductionRule contains a given sendMessage.
	 * @return <code>true</code> if this ProductionRule contains the given
	 * sendMessageToCheck, <code>false</code> otherwise.
	 */
	public boolean hasSendMessage(IGenericMessage sendMessageToCheck);

	/**
	 * Determine if this ProductionRule contains the given set of sendMessages.
	 * @param sendMessagesToCheck sendMessages to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>sendMessages</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasSendMessages(Collection sendMessagesToCheck);

	/**
	 * Determine if this ProductionRule contains each element in the 
	 * given set of sendMessages.
	 * @param sendMessagesToCheck sendMessages to check for.
	 * @return <code>true</code> if every element in
	 * <code>sendMessages</code> is found in this ProductionRule,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllSendMessages(Collection sendMessagesToCheck);

	/**
	 * Gets the sendMessage from this ProductionRule with the given
	 * id.
	 * @param id ID to look for.
	 * @return sendMessage with the given ID, or <code>null</code> if not found.
	 */
	public IGenericMessage getSendMessage(String id);

	/**
	 * Gets the sendMessages from this ProductionRule with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return sendMessages with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getSendMessages(Collection ids);


	/**
	 * Set the causeTime for this ProductionRule.
	 * @param value new causeTime
	 */
	public void setCauseTime(ICauseTime value);

	/**
	 * Clear the causeTime from this ProductionRule.
	 */
	public void clearCauseTime();

	/**
	 * Get the causeTime from this ProductionRule.
	 * @return causeTime
	 */
	public ICauseTime getCauseTime();

	/**
	 * Determine if this ProductionRule has the given causeTime
	 * @param causeTimeToCheck causeTime to compare
	 * @return <code>true</code> if the causeTimes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasCauseTime(ICauseTime causeTimeToCheck);
	/**
	 * Determine if another ProductionRule has the same
	 * id as this one.
	 * @param ProductionRuleToCheck ProductionRule to compare with this
	 * one.
	 */
	public boolean isEqual(IProductionRule ProductionRuleToCheck);
	/**
	 * Determine if another ProductionRule is equivalent to this one, ignoring
	 * ID's.
	 * @param ProductionRuleToCheck ProductionRule to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ProductionRule are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IProductionRule ProductionRuleToCheck);

}
