/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.rationale;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchRationale <code>xsi:type</code> in the
 * rationale namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchRationale extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"rationale", "ArchRationale", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("rationale", "rationale", "Rationale", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Add a rationale to this ArchRationale.
	 * @param newRationale rationale to add.
	 */
	public void addRationale(IRationale newRationale);

	/**
	 * Add a collection of rationales to this ArchRationale.
	 * @param rationales rationales to add.
	 */
	public void addRationales(Collection rationales);

	/**
	 * Remove all rationales from this ArchRationale.
	 */
	public void clearRationales();

	/**
	 * Remove the given rationale from this ArchRationale.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param rationaleToRemove rationale to remove.
	 */
	public void removeRationale(IRationale rationaleToRemove);

	/**
	 * Remove all the given rationales from this ArchRationale.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param rationales rationale to remove.
	 */
	public void removeRationales(Collection rationales);

	/**
	 * Get all the rationales from this ArchRationale.
	 * @return all rationales in this ArchRationale.
	 */
	public Collection getAllRationales();

	/**
	 * Determine if this ArchRationale contains a given rationale.
	 * @return <code>true</code> if this ArchRationale contains the given
	 * rationaleToCheck, <code>false</code> otherwise.
	 */
	public boolean hasRationale(IRationale rationaleToCheck);

	/**
	 * Determine if this ArchRationale contains the given set of rationales.
	 * @param rationalesToCheck rationales to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>rationales</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasRationales(Collection rationalesToCheck);

	/**
	 * Determine if this ArchRationale contains each element in the 
	 * given set of rationales.
	 * @param rationalesToCheck rationales to check for.
	 * @return <code>true</code> if every element in
	 * <code>rationales</code> is found in this ArchRationale,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllRationales(Collection rationalesToCheck);

	/**
	 * Gets the rationale from this ArchRationale with the given
	 * id.
	 * @param id ID to look for.
	 * @return rationale with the given ID, or <code>null</code> if not found.
	 */
	public IRationale getRationale(String id);

	/**
	 * Gets the rationales from this ArchRationale with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return rationales with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getRationales(Collection ids);

	/**
	 * Determine if another ArchRationale is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchRationaleToCheck ArchRationale to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchRationale are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchRationale ArchRationaleToCheck);

}
