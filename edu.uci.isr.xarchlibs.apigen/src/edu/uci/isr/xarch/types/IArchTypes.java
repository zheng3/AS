/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.types;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchTypes <code>xsi:type</code> in the
 * types namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchTypes extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"types", "ArchTypes", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("componentType", "types", "ComponentType", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("connectorType", "types", "ConnectorType", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("interfaceType", "types", "InterfaceType", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Add a componentType to this ArchTypes.
	 * @param newComponentType componentType to add.
	 */
	public void addComponentType(IComponentType newComponentType);

	/**
	 * Add a collection of componentTypes to this ArchTypes.
	 * @param componentTypes componentTypes to add.
	 */
	public void addComponentTypes(Collection componentTypes);

	/**
	 * Remove all componentTypes from this ArchTypes.
	 */
	public void clearComponentTypes();

	/**
	 * Remove the given componentType from this ArchTypes.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentTypeToRemove componentType to remove.
	 */
	public void removeComponentType(IComponentType componentTypeToRemove);

	/**
	 * Remove all the given componentTypes from this ArchTypes.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentTypes componentType to remove.
	 */
	public void removeComponentTypes(Collection componentTypes);

	/**
	 * Get all the componentTypes from this ArchTypes.
	 * @return all componentTypes in this ArchTypes.
	 */
	public Collection getAllComponentTypes();

	/**
	 * Determine if this ArchTypes contains a given componentType.
	 * @return <code>true</code> if this ArchTypes contains the given
	 * componentTypeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasComponentType(IComponentType componentTypeToCheck);

	/**
	 * Determine if this ArchTypes contains the given set of componentTypes.
	 * @param componentTypesToCheck componentTypes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>componentTypes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasComponentTypes(Collection componentTypesToCheck);

	/**
	 * Determine if this ArchTypes contains each element in the 
	 * given set of componentTypes.
	 * @param componentTypesToCheck componentTypes to check for.
	 * @return <code>true</code> if every element in
	 * <code>componentTypes</code> is found in this ArchTypes,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllComponentTypes(Collection componentTypesToCheck);

	/**
	 * Gets the componentType from this ArchTypes with the given
	 * id.
	 * @param id ID to look for.
	 * @return componentType with the given ID, or <code>null</code> if not found.
	 */
	public IComponentType getComponentType(String id);

	/**
	 * Gets the componentTypes from this ArchTypes with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return componentTypes with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getComponentTypes(Collection ids);


	/**
	 * Add a connectorType to this ArchTypes.
	 * @param newConnectorType connectorType to add.
	 */
	public void addConnectorType(IConnectorType newConnectorType);

	/**
	 * Add a collection of connectorTypes to this ArchTypes.
	 * @param connectorTypes connectorTypes to add.
	 */
	public void addConnectorTypes(Collection connectorTypes);

	/**
	 * Remove all connectorTypes from this ArchTypes.
	 */
	public void clearConnectorTypes();

	/**
	 * Remove the given connectorType from this ArchTypes.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorTypeToRemove connectorType to remove.
	 */
	public void removeConnectorType(IConnectorType connectorTypeToRemove);

	/**
	 * Remove all the given connectorTypes from this ArchTypes.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorTypes connectorType to remove.
	 */
	public void removeConnectorTypes(Collection connectorTypes);

	/**
	 * Get all the connectorTypes from this ArchTypes.
	 * @return all connectorTypes in this ArchTypes.
	 */
	public Collection getAllConnectorTypes();

	/**
	 * Determine if this ArchTypes contains a given connectorType.
	 * @return <code>true</code> if this ArchTypes contains the given
	 * connectorTypeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasConnectorType(IConnectorType connectorTypeToCheck);

	/**
	 * Determine if this ArchTypes contains the given set of connectorTypes.
	 * @param connectorTypesToCheck connectorTypes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>connectorTypes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasConnectorTypes(Collection connectorTypesToCheck);

	/**
	 * Determine if this ArchTypes contains each element in the 
	 * given set of connectorTypes.
	 * @param connectorTypesToCheck connectorTypes to check for.
	 * @return <code>true</code> if every element in
	 * <code>connectorTypes</code> is found in this ArchTypes,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllConnectorTypes(Collection connectorTypesToCheck);

	/**
	 * Gets the connectorType from this ArchTypes with the given
	 * id.
	 * @param id ID to look for.
	 * @return connectorType with the given ID, or <code>null</code> if not found.
	 */
	public IConnectorType getConnectorType(String id);

	/**
	 * Gets the connectorTypes from this ArchTypes with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return connectorTypes with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getConnectorTypes(Collection ids);


	/**
	 * Add a interfaceType to this ArchTypes.
	 * @param newInterfaceType interfaceType to add.
	 */
	public void addInterfaceType(IInterfaceType newInterfaceType);

	/**
	 * Add a collection of interfaceTypes to this ArchTypes.
	 * @param interfaceTypes interfaceTypes to add.
	 */
	public void addInterfaceTypes(Collection interfaceTypes);

	/**
	 * Remove all interfaceTypes from this ArchTypes.
	 */
	public void clearInterfaceTypes();

	/**
	 * Remove the given interfaceType from this ArchTypes.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param interfaceTypeToRemove interfaceType to remove.
	 */
	public void removeInterfaceType(IInterfaceType interfaceTypeToRemove);

	/**
	 * Remove all the given interfaceTypes from this ArchTypes.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param interfaceTypes interfaceType to remove.
	 */
	public void removeInterfaceTypes(Collection interfaceTypes);

	/**
	 * Get all the interfaceTypes from this ArchTypes.
	 * @return all interfaceTypes in this ArchTypes.
	 */
	public Collection getAllInterfaceTypes();

	/**
	 * Determine if this ArchTypes contains a given interfaceType.
	 * @return <code>true</code> if this ArchTypes contains the given
	 * interfaceTypeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasInterfaceType(IInterfaceType interfaceTypeToCheck);

	/**
	 * Determine if this ArchTypes contains the given set of interfaceTypes.
	 * @param interfaceTypesToCheck interfaceTypes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>interfaceTypes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasInterfaceTypes(Collection interfaceTypesToCheck);

	/**
	 * Determine if this ArchTypes contains each element in the 
	 * given set of interfaceTypes.
	 * @param interfaceTypesToCheck interfaceTypes to check for.
	 * @return <code>true</code> if every element in
	 * <code>interfaceTypes</code> is found in this ArchTypes,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllInterfaceTypes(Collection interfaceTypesToCheck);

	/**
	 * Gets the interfaceType from this ArchTypes with the given
	 * id.
	 * @param id ID to look for.
	 * @return interfaceType with the given ID, or <code>null</code> if not found.
	 */
	public IInterfaceType getInterfaceType(String id);

	/**
	 * Gets the interfaceTypes from this ArchTypes with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return interfaceTypes with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getInterfaceTypes(Collection ids);

	/**
	 * Determine if another ArchTypes is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchTypesToCheck ArchTypes to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchTypes are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchTypes ArchTypesToCheck);

}
