/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.types;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context object for the types package.
 * This object is used to create objects that are used
 * in the types namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public class TypesContext implements ITypesContext {

	protected static final String DEFAULT_ELT_NAME = "anonymousInstanceTag";
	protected Document doc;
	protected IXArch xArch;

	/**
	 * Create a new TypesContext for the given
	 * IXArch object.
	 * @param xArch XArch object to contextualize in this namespace.
	 */
	public TypesContext(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Node docRootNode = ((DOMBased)xArch).getDOMNode();
		synchronized(DOMUtils.getDOMLock(docRootNode)){
			this.doc = docRootNode.getOwnerDocument();
			xArch.addSchemaLocation("http://www.ics.uci.edu/pub/arch/xArch/types.xsd", "http://www.ics.uci.edu/pub/arch/xArch/types.xsd");
			this.xArch = xArch;
		}
	}

	public IXArch getXArch(){
		return xArch;
	}
	
	protected Element createElement(String name){
		synchronized(DOMUtils.getDOMLock(doc)){
			return doc.createElementNS(TypesConstants.NS_URI, name);
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return ITypesContext.TYPE_METADATA;
	}
	/**
	 * Create an IPropertyType object in this namespace.
	 * @return New IPropertyType object.
	 */
	public IPropertyType createPropertyType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PropertyTypeImpl.XSD_TYPE_NSURI, PropertyTypeImpl.XSD_TYPE_NAME);
		PropertyTypeImpl newElt = new PropertyTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPropertyType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPropertyType recontextualizePropertyType(IPropertyType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ISignatureServiceSimpleType object in this namespace.
	 * @return New ISignatureServiceSimpleType object.
	 */
	public ISignatureServiceSimpleType createSignatureServiceSimpleType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, SignatureServiceSimpleTypeImpl.XSD_TYPE_NSURI, SignatureServiceSimpleTypeImpl.XSD_TYPE_NAME);
		SignatureServiceSimpleTypeImpl newElt = new SignatureServiceSimpleTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ISignatureServiceSimpleType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ISignatureServiceSimpleType recontextualizeSignatureServiceSimpleType(ISignatureServiceSimpleType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IInterface object in this namespace.
	 * @return New IInterface object.
	 */
	public IInterface createInterface(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InterfaceImpl.XSD_TYPE_NSURI, InterfaceImpl.XSD_TYPE_NAME);
		InterfaceImpl newElt = new InterfaceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInterface object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInterface recontextualizeInterface(IInterface value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DescriptionImpl newElt = new edu.uci.isr.xarch.instance.DescriptionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDirection object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDirection object.
	 */
	public edu.uci.isr.xarch.instance.IDirection createDirection(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DirectionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DirectionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DirectionImpl newElt = new edu.uci.isr.xarch.instance.DirectionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDirection object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDirection recontextualizeDirection(edu.uci.isr.xarch.instance.IDirection value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.XMLLinkImpl newElt = new edu.uci.isr.xarch.instance.XMLLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IProperty object in this namespace.
	 * @return New IProperty object.
	 */
	public IProperty createProperty(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PropertyImpl.XSD_TYPE_NSURI, PropertyImpl.XSD_TYPE_NAME);
		PropertyImpl newElt = new PropertyImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IProperty object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IProperty recontextualizeProperty(IProperty value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IVarientItem object in this namespace.
	 * @return New IVarientItem object.
	 */
	public IVarientItem createVarientItem(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VarientItemImpl.XSD_TYPE_NSURI, VarientItemImpl.XSD_TYPE_NAME);
		VarientItemImpl newElt = new VarientItemImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVarientItem object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVarientItem recontextualizeVarientItem(IVarientItem value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IPropertyGroup object in this namespace.
	 * @return New IPropertyGroup object.
	 */
	public IPropertyGroup createPropertyGroup(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PropertyGroupImpl.XSD_TYPE_NSURI, PropertyGroupImpl.XSD_TYPE_NAME);
		PropertyGroupImpl newElt = new PropertyGroupImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPropertyGroup object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPropertyGroup recontextualizePropertyGroup(IPropertyGroup value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IVarientGroup object in this namespace.
	 * @return New IVarientGroup object.
	 */
	public IVarientGroup createVarientGroup(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, VarientGroupImpl.XSD_TYPE_NSURI, VarientGroupImpl.XSD_TYPE_NAME);
		VarientGroupImpl newElt = new VarientGroupImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IVarientGroup object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IVarientGroup recontextualizeVarientGroup(IVarientGroup value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IComponent object in this namespace.
	 * @return New IComponent object.
	 */
	public IComponent createComponent(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ComponentImpl.XSD_TYPE_NSURI, ComponentImpl.XSD_TYPE_NAME);
		ComponentImpl newElt = new ComponentImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IComponent object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IComponent recontextualizeComponent(IComponent value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IConnector object in this namespace.
	 * @return New IConnector object.
	 */
	public IConnector createConnector(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ConnectorImpl.XSD_TYPE_NSURI, ConnectorImpl.XSD_TYPE_NAME);
		ConnectorImpl newElt = new ConnectorImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IConnector object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IConnector recontextualizeConnector(IConnector value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ILink object in this namespace.
	 * @return New ILink object.
	 */
	public ILink createLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, LinkImpl.XSD_TYPE_NSURI, LinkImpl.XSD_TYPE_NAME);
		LinkImpl newElt = new LinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ILink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ILink recontextualizeLink(ILink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IPoint object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IPoint object.
	 */
	public edu.uci.isr.xarch.instance.IPoint createPoint(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.PointImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.PointImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.PointImpl newElt = new edu.uci.isr.xarch.instance.PointImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IPoint object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IPoint recontextualizePoint(edu.uci.isr.xarch.instance.IPoint value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ISignatureInterfaceMapping object in this namespace.
	 * @return New ISignatureInterfaceMapping object.
	 */
	public ISignatureInterfaceMapping createSignatureInterfaceMapping(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, SignatureInterfaceMappingImpl.XSD_TYPE_NSURI, SignatureInterfaceMappingImpl.XSD_TYPE_NAME);
		SignatureInterfaceMappingImpl newElt = new SignatureInterfaceMappingImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ISignatureInterfaceMapping object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ISignatureInterfaceMapping recontextualizeSignatureInterfaceMapping(ISignatureInterfaceMapping value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ISubArchitecture object in this namespace.
	 * @return New ISubArchitecture object.
	 */
	public ISubArchitecture createSubArchitecture(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, SubArchitectureImpl.XSD_TYPE_NSURI, SubArchitectureImpl.XSD_TYPE_NAME);
		SubArchitectureImpl newElt = new SubArchitectureImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ISubArchitecture object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ISubArchitecture recontextualizeSubArchitecture(ISubArchitecture value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IArchStructure object in this namespace.
	 * @return New IArchStructure object.
	 */
	public IArchStructure createArchStructure(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ArchStructureImpl.XSD_TYPE_NSURI, ArchStructureImpl.XSD_TYPE_NAME);
		ArchStructureImpl newElt = new ArchStructureImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IArchStructure object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IArchStructure recontextualizeArchStructure(IArchStructure value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IGroup object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IGroup object.
	 */
	public edu.uci.isr.xarch.instance.IGroup createGroup(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.GroupImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.GroupImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.GroupImpl newElt = new edu.uci.isr.xarch.instance.GroupImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IGroup object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IGroup recontextualizeGroup(edu.uci.isr.xarch.instance.IGroup value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ISignature object in this namespace.
	 * @return New ISignature object.
	 */
	public ISignature createSignature(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, SignatureImpl.XSD_TYPE_NSURI, SignatureImpl.XSD_TYPE_NAME);
		SignatureImpl newElt = new SignatureImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ISignature object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ISignature recontextualizeSignature(ISignature value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ISignatureServiceType object in this namespace.
	 * @return New ISignatureServiceType object.
	 */
	public ISignatureServiceType createSignatureServiceType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, SignatureServiceTypeImpl.XSD_TYPE_NSURI, SignatureServiceTypeImpl.XSD_TYPE_NAME);
		SignatureServiceTypeImpl newElt = new SignatureServiceTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ISignatureServiceType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ISignatureServiceType recontextualizeSignatureServiceType(ISignatureServiceType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IComponentType object in this namespace.
	 * @return New IComponentType object.
	 */
	public IComponentType createComponentType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ComponentTypeImpl.XSD_TYPE_NSURI, ComponentTypeImpl.XSD_TYPE_NAME);
		ComponentTypeImpl newElt = new ComponentTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IComponentType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IComponentType recontextualizeComponentType(IComponentType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IConnectorType object in this namespace.
	 * @return New IConnectorType object.
	 */
	public IConnectorType createConnectorType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ConnectorTypeImpl.XSD_TYPE_NSURI, ConnectorTypeImpl.XSD_TYPE_NAME);
		ConnectorTypeImpl newElt = new ConnectorTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IConnectorType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IConnectorType recontextualizeConnectorType(IConnectorType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IInterfaceType object in this namespace.
	 * @return New IInterfaceType object.
	 */
	public IInterfaceType createInterfaceType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InterfaceTypeImpl.XSD_TYPE_NSURI, InterfaceTypeImpl.XSD_TYPE_NAME);
		InterfaceTypeImpl newElt = new InterfaceTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInterfaceType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInterfaceType recontextualizeInterfaceType(IInterfaceType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IArchTypes object in this namespace.
	 * @return New IArchTypes object.
	 */
	public IArchTypes createArchTypes(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ArchTypesImpl.XSD_TYPE_NSURI, ArchTypesImpl.XSD_TYPE_NAME);
		ArchTypesImpl newElt = new ArchTypesImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IArchTypes object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IArchTypes recontextualizeArchTypes(IArchTypes value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IPrescribedComponentInstance object in this namespace.
	 * @return New IPrescribedComponentInstance object.
	 */
	public IPrescribedComponentInstance createPrescribedComponentInstance(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PrescribedComponentInstanceImpl.XSD_TYPE_NSURI, PrescribedComponentInstanceImpl.XSD_TYPE_NAME);
		PrescribedComponentInstanceImpl newElt = new PrescribedComponentInstanceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPrescribedComponentInstance object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPrescribedComponentInstance recontextualizePrescribedComponentInstance(IPrescribedComponentInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.instance.IComponentInstance</code>
	 * to one of type <code>IPrescribedComponentInstance</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.instance.IComponentInstance</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IPrescribedComponentInstance promoteToPrescribedComponentInstance(
	edu.uci.isr.xarch.instance.IComponentInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.instance.ComponentInstanceImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.instance.ComponentInstanceImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, PrescribedComponentInstanceImpl.XSD_TYPE_NSURI, 
					PrescribedComponentInstanceImpl.XSD_TYPE_NAME);
		}
		PrescribedComponentInstanceImpl newElt = new PrescribedComponentInstanceImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IPrescribedComponentInstance.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IPrescribedConnectorInstance object in this namespace.
	 * @return New IPrescribedConnectorInstance object.
	 */
	public IPrescribedConnectorInstance createPrescribedConnectorInstance(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PrescribedConnectorInstanceImpl.XSD_TYPE_NSURI, PrescribedConnectorInstanceImpl.XSD_TYPE_NAME);
		PrescribedConnectorInstanceImpl newElt = new PrescribedConnectorInstanceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPrescribedConnectorInstance object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPrescribedConnectorInstance recontextualizePrescribedConnectorInstance(IPrescribedConnectorInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.instance.IConnectorInstance</code>
	 * to one of type <code>IPrescribedConnectorInstance</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.instance.IConnectorInstance</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IPrescribedConnectorInstance promoteToPrescribedConnectorInstance(
	edu.uci.isr.xarch.instance.IConnectorInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.instance.ConnectorInstanceImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.instance.ConnectorInstanceImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, PrescribedConnectorInstanceImpl.XSD_TYPE_NSURI, 
					PrescribedConnectorInstanceImpl.XSD_TYPE_NAME);
		}
		PrescribedConnectorInstanceImpl newElt = new PrescribedConnectorInstanceImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IPrescribedConnectorInstance.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IPrescribedInterfaceInstance object in this namespace.
	 * @return New IPrescribedInterfaceInstance object.
	 */
	public IPrescribedInterfaceInstance createPrescribedInterfaceInstance(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PrescribedInterfaceInstanceImpl.XSD_TYPE_NSURI, PrescribedInterfaceInstanceImpl.XSD_TYPE_NAME);
		PrescribedInterfaceInstanceImpl newElt = new PrescribedInterfaceInstanceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPrescribedInterfaceInstance object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPrescribedInterfaceInstance recontextualizePrescribedInterfaceInstance(IPrescribedInterfaceInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.instance.IInterfaceInstance</code>
	 * to one of type <code>IPrescribedInterfaceInstance</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.instance.IInterfaceInstance</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IPrescribedInterfaceInstance promoteToPrescribedInterfaceInstance(
	edu.uci.isr.xarch.instance.IInterfaceInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.instance.InterfaceInstanceImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.instance.InterfaceInstanceImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, PrescribedInterfaceInstanceImpl.XSD_TYPE_NSURI, 
					PrescribedInterfaceInstanceImpl.XSD_TYPE_NAME);
		}
		PrescribedInterfaceInstanceImpl newElt = new PrescribedInterfaceInstanceImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IPrescribedInterfaceInstance.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create an IPrescribedLinkInstance object in this namespace.
	 * @return New IPrescribedLinkInstance object.
	 */
	public IPrescribedLinkInstance createPrescribedLinkInstance(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PrescribedLinkInstanceImpl.XSD_TYPE_NSURI, PrescribedLinkInstanceImpl.XSD_TYPE_NAME);
		PrescribedLinkInstanceImpl newElt = new PrescribedLinkInstanceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPrescribedLinkInstance object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPrescribedLinkInstance recontextualizePrescribedLinkInstance(IPrescribedLinkInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TypesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TypesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Promote an object of type <code>edu.uci.isr.xarch.instance.ILinkInstance</code>
	 * to one of type <code>IPrescribedLinkInstance</code>.  xArch APIs
	 * are structured in such a way that a regular cast is not possible
	 * to change interface types, so casting must be done through these
	 * promotion functions.  If the <code>edu.uci.isr.xarch.instance.ILinkInstance</code>
	 * object wraps a DOM element that is the base type, then the 
	 * <code>xsi:type</code> of the base element is promoted.  Otherwise, 
	 * it is left unchanged.
	 *
	 * This function also emits an <CODE>XArchEvent</CODE> with type
	 * PROMOTE_TYPE.  The source for this events is the pre-promoted
	 * IXArchElement object (should no longer be used), and the
	 * target is the post-promotion object.  The target name is
	 * the name of the interface class that was the target of the
	 * promotion.
	 * 
	 * @param value Object to promote.
	 * @return Promoted object.
	 */
	public IPrescribedLinkInstance promoteToPrescribedLinkInstance(
	edu.uci.isr.xarch.instance.ILinkInstance value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		if(DOMUtils.hasXSIType(elt, 
			edu.uci.isr.xarch.instance.LinkInstanceImpl.XSD_TYPE_NSURI,
			edu.uci.isr.xarch.instance.LinkInstanceImpl.XSD_TYPE_NAME)){

				DOMUtils.addXSIType(elt, PrescribedLinkInstanceImpl.XSD_TYPE_NSURI, 
					PrescribedLinkInstanceImpl.XSD_TYPE_NAME);
		}
		PrescribedLinkInstanceImpl newElt = new PrescribedLinkInstanceImpl(elt);
		newElt.setXArch(this.getXArch());

		xArch.fireXArchEvent(
			new XArchEvent(value, 
			XArchEvent.PROMOTE_EVENT,
			XArchEvent.ELEMENT_CHANGED,
			IPrescribedLinkInstance.class.getName(), newElt,
			XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, newElt))
		);

		return newElt;
	}

	/**
	 * Create a top-level element of type <code>IArchStructure</code>.
	 * This function should be used in lieu of <code>createArchStructure</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IArchStructure suitable for adding
	 * as a child of xArch.
	 */
	public IArchStructure createArchStructureElement(){
		Element elt = createElement("archStructure");
		DOMUtils.addXSIType(elt, ArchStructureImpl.XSD_TYPE_NSURI, 
			ArchStructureImpl.XSD_TYPE_NAME);
		ArchStructureImpl newElt = new ArchStructureImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IArchStructure child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IArchStructure</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IArchStructure getArchStructure(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchStructure){
				return (IArchStructure)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(TypesConstants.NS_URI))){
						if((localName != null) && (localName.equals("archStructure"))){
							ArchStructureImpl newElt = new ArchStructureImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IArchStructure children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IArchStructure</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllArchStructures(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector v = new Vector();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchStructure){
				v.addElement(o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(TypesConstants.NS_URI))){
						if((localName != null) && (localName.equals("archStructure"))){
							ArchStructureImpl newElt = new ArchStructureImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}
	/**
	 * Create a top-level element of type <code>IArchTypes</code>.
	 * This function should be used in lieu of <code>createArchTypes</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IArchTypes suitable for adding
	 * as a child of xArch.
	 */
	public IArchTypes createArchTypesElement(){
		Element elt = createElement("archTypes");
		DOMUtils.addXSIType(elt, ArchTypesImpl.XSD_TYPE_NSURI, 
			ArchTypesImpl.XSD_TYPE_NAME);
		ArchTypesImpl newElt = new ArchTypesImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IArchTypes child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IArchTypes</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IArchTypes getArchTypes(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchTypes){
				return (IArchTypes)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(TypesConstants.NS_URI))){
						if((localName != null) && (localName.equals("archTypes"))){
							ArchTypesImpl newElt = new ArchTypesImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IArchTypes children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IArchTypes</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllArchTypess(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector v = new Vector();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchTypes){
				v.addElement(o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(TypesConstants.NS_URI))){
						if((localName != null) && (localName.equals("archTypes"))){
							ArchTypesImpl newElt = new ArchTypesImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}

}

