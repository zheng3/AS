/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.uml212superstructure;

import org.w3c.dom.*;

import edu.uci.isr.xarch.*;

import java.util.*;

/**
 * DOM-Based implementation of the IActivityDiagram interface.
 *
 * @author Automatically generated by xArch apigen.
 */
public class ActivityDiagramImpl implements IActivityDiagram, DOMBased{
	
	public static final String XSD_TYPE_NSURI = Uml212superstructureConstants.NS_URI;
	public static final String XSD_TYPE_NAME = "ActivityDiagram";
	
	protected IXArch xArch;
	
	/** Tag name for ids in this object. */
	public static final String ID_ATTR_NAME = "id";
	/** Tag name for descriptions in this object. */
	public static final String DESCRIPTION_ELT_NAME = "description";
	/** Tag name for actions in this object. */
	public static final String ACTION_ELT_NAME = "action";
	/** Tag name for activityFinalNodes in this object. */
	public static final String ACTIVITY_FINAL_NODE_ELT_NAME = "activityFinalNode";
	/** Tag name for controlFlows in this object. */
	public static final String CONTROL_FLOW_ELT_NAME = "controlFlow";
	/** Tag name for decisionNodes in this object. */
	public static final String DECISION_NODE_ELT_NAME = "decisionNode";
	/** Tag name for forkNodes in this object. */
	public static final String FORK_NODE_ELT_NAME = "forkNode";
	/** Tag name for initialNodes in this object. */
	public static final String INITIAL_NODE_ELT_NAME = "initialNode";
	/** Tag name for joinNodes in this object. */
	public static final String JOIN_NODE_ELT_NAME = "joinNode";
	/** Tag name for mergeNodes in this object. */
	public static final String MERGE_NODE_ELT_NAME = "mergeNode";
	/** Tag name for objectFlows in this object. */
	public static final String OBJECT_FLOW_ELT_NAME = "objectFlow";

	
	protected Element elt;
	
	private static SequenceOrder seqOrd = new SequenceOrder(
		new QName[]{
			new QName(Uml212superstructureConstants.NS_URI, DESCRIPTION_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, ACTION_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, ACTIVITY_FINAL_NODE_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, CONTROL_FLOW_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, DECISION_NODE_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, FORK_NODE_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, INITIAL_NODE_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, JOIN_NODE_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, MERGE_NODE_ELT_NAME),
			new QName(Uml212superstructureConstants.NS_URI, OBJECT_FLOW_ELT_NAME)
		}
	);
	
	public ActivityDiagramImpl(Element elt){
		if(elt == null){
			throw new IllegalArgumentException("Element cannot be null.");
		}
		this.elt = elt;
	}

	public Node getDOMNode(){
		return elt;
	}
	
	public void setDOMNode(Node node){
		if(node.getNodeType() != Node.ELEMENT_NODE){
			throw new IllegalArgumentException("Base DOM node of this type must be an Element.");
		}
		elt = (Element)node;
	}
	
	protected static SequenceOrder getSequenceOrder(){
		return seqOrd;
	}
	
	public void setXArch(IXArch xArch){
		this.xArch = xArch;
	}
	
	public IXArch getXArch(){
		return this.xArch;
	}

	public IXArchElement cloneElement(int depth){
		synchronized(DOMUtils.getDOMLock(elt)){
			Document doc = elt.getOwnerDocument();
			if(depth == 0){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ActivityDiagramImpl cloneImpl = new ActivityDiagramImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
			else if(depth == 1){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ActivityDiagramImpl cloneImpl = new ActivityDiagramImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				
				NodeList nl = elt.getChildNodes();
				int size = nl.getLength();
				for(int i = 0; i < size; i++){
					Node n = nl.item(i);
					Node cloneNode = (Node)n.cloneNode(false);
					cloneNode = doc.importNode(cloneNode, true);
					cloneElt.appendChild(cloneNode);
				}
				return cloneImpl;
			}
			else /* depth = infinity */{
				Element cloneElt = (Element)elt.cloneNode(true);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ActivityDiagramImpl cloneImpl = new ActivityDiagramImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
		}
	}

	//Override 'equals' to be DOM-based...	
	public boolean equals(Object o){
		if(o == null){
			return false;
		}
		if(!(o instanceof DOMBased)){
			return super.equals(o);
		}
		DOMBased db = (DOMBased)o;
		Node dbNode = db.getDOMNode();
		return dbNode.equals(getDOMNode());
	}

	//Override 'hashCode' to be based on the underlying node
	public int hashCode(){
		return getDOMNode().hashCode();
	}

	/**
	 * For internal use only.
	 */
	private static Object makeDerivedWrapper(Element elt, String baseTypeName){
		synchronized(DOMUtils.getDOMLock(elt)){
			QName typeName = XArchUtils.getXSIType(elt);
			if(typeName == null){
				return null;
			}
			else{
				if(!DOMUtils.hasXSIType(elt, "http://www.ics.uci.edu/pub/arch/xArch/uml212superstructure.xsd", baseTypeName)){
					try{
						String packageTitle = XArchUtils.getPackageTitle(typeName.getNamespaceURI());
						String packageName = XArchUtils.getPackageName(packageTitle);
						String implName = XArchUtils.getImplName(packageName, typeName.getName());
						Class c = Class.forName(implName);
						java.lang.reflect.Constructor con = c.getConstructor(new Class[]{Element.class});
						Object o = con.newInstance(new Object[]{elt});
						return o;
					}
					catch(Exception e){
						//Lots of bad things could happen, but this
						//is OK, because this is best-effort anyway.
					}
				}
				return null;
			}
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IActivityDiagram.TYPE_METADATA;
	}

	public XArchInstanceMetadata getInstanceMetadata(){
		return new XArchInstanceMetadata(XArchUtils.getPackageTitle(elt.getNamespaceURI()));
	}
	/**
	 * Set the id attribute on this object.
	 * @param id attribute value.
	 */
	public void setId(String id){
		{
			String oldValue = getId();
			if(oldValue == null ? id == null : oldValue.equals(id))
				return;
			DOMUtils.removeAttribute(elt, Uml212superstructureConstants.NS_URI, ID_ATTR_NAME);
			IXArch _x = getXArch();
			if(_x != null){
				_x.fireXArchEvent(
					new XArchEvent(this, 
					XArchEvent.CLEAR_EVENT,
					XArchEvent.ATTRIBUTE_CHANGED,
					"id", oldValue,
					XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this), true)
				);
			}
		}
		DOMUtils.setAttribute(elt, Uml212superstructureConstants.NS_URI, ID_ATTR_NAME, id);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.SET_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"id", id,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	/**
	 * Removes the id attribute from this object.
	 */
	public void clearId(){
		String oldValue = getId();
		if(oldValue == null)
			return;
		DOMUtils.removeAttribute(elt, Uml212superstructureConstants.NS_URI, ID_ATTR_NAME);
		IXArch _x = getXArch();
		if(_x != null){
			_x.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.CLEAR_EVENT,
				XArchEvent.ATTRIBUTE_CHANGED,
				"id", oldValue,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
	
	/**
	 * Gets the value of the id attribute on this object.
	 * @return id attribute's value or <code>null</code> if that
	 * attribute is not set.
	 */
	public String getId(){
		return DOMUtils.getAttributeValue(elt, Uml212superstructureConstants.NS_URI, ID_ATTR_NAME);
	}
	
	/**
	 * Determines if this object's id attribute has the
	 * given value.
	 * @param id value to test.
	 * @return <code>true</code> if the values match, <code>false</code> otherwise.
	 * Matching is done by string-matching.
	 */
	public boolean hasId(String id){
		return DOMUtils.objNullEq(getId(), id);
	}


	public void setDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		{
			edu.uci.isr.xarch.instance.IDescription oldElt = getDescription();
			DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, DESCRIPTION_ELT_NAME);
			
			IXArch context = getXArch();
			if(context != null){
				context.fireXArchEvent(
					new XArchEvent(this, 
					XArchEvent.CLEAR_EVENT,
					XArchEvent.ELEMENT_CHANGED,
					"description", oldElt,
					XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this), true)
				);
			}
		}
		Element newChildElt = (Element)(((DOMBased)value).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, DESCRIPTION_ELT_NAME);
		((DOMBased)value).setDOMNode(newChildElt);
		
		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}
		
		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.SET_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"description", value,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
	
	public void clearDescription(){
		edu.uci.isr.xarch.instance.IDescription oldElt = getDescription();
		DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, DESCRIPTION_ELT_NAME);
		
		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.CLEAR_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"description", oldElt,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
	
	public edu.uci.isr.xarch.instance.IDescription getDescription(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, DESCRIPTION_ELT_NAME);
		if(nl.getLength() == 0){
			return null;
		}
		else{
			Element el = (Element)nl.item(0);
			IXArch de = getXArch();
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					return (edu.uci.isr.xarch.instance.IDescription)cachedXArchElt;
				}
			}
			
			Object o = makeDerivedWrapper(el, "Description");
			if(o != null){
				try{
					((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
					}
					return (edu.uci.isr.xarch.instance.IDescription)o;
				}
				catch(Exception e){}
			}
			edu.uci.isr.xarch.instance.DescriptionImpl eltImpl = new edu.uci.isr.xarch.instance.DescriptionImpl(el);
			eltImpl.setXArch(getXArch());
			if(de != null){
				de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
			}
			return eltImpl;
		}
	}
	
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription value){
		edu.uci.isr.xarch.instance.IDescription thisValue = getDescription();
		edu.uci.isr.xarch.instance.IDescription thatValue = value;
		
		if((thisValue == null) && (thatValue == null)){
			return true;
		}
		else if((thisValue == null) && (thatValue != null)){
			return false;
		}
		else if((thisValue != null) && (thatValue == null)){
			return false;
		}
		return thisValue.isEquivalent(thatValue);
	}

	public void addAction(IAction newAction){
		if(!(newAction instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newAction).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, ACTION_ELT_NAME);
		((DOMBased)newAction).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"action", newAction,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addActions(Collection actions){
		for(Iterator en = actions.iterator(); en.hasNext(); ){
			IAction elt = (IAction)en.next();
			addAction(elt);
		}
	}		
		
	public void clearActions(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, ACTION_ELT_NAME);
		Collection coll = getAllActions();
		removeActions(coll);
	}
	
	public void removeAction(IAction actionToRemove){
		if(!(actionToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, ACTION_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)actionToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"action", actionToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeActions(Collection actions){
		for(Iterator en = actions.iterator(); en.hasNext(); ){
			IAction elt = (IAction)en.next();
			removeAction(elt);
		}
	}
	
	public Collection getAllActions(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, ACTION_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IAction)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "Action");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IAction)o);
					}
					catch(Exception e){
						ActionImpl eltImpl = new ActionImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ActionImpl eltImpl = new ActionImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasAction(IAction actionToCheck){
		Collection c = getAllActions();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IAction elt = (IAction)en.next();
			if(elt.isEquivalent(actionToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasActions(Collection actionsToCheck){
		Vector v = new Vector();
		for(Iterator en = actionsToCheck.iterator(); en.hasNext(); ){
			IAction elt = (IAction)en.next();
			v.addElement(new Boolean(hasAction(elt)));
		}
		return v;
	}
		
	public boolean hasAllActions(Collection actionsToCheck){
		for(Iterator en = actionsToCheck.iterator(); en.hasNext(); ){
			IAction elt = (IAction)en.next();
			if(!hasAction(elt)){
				return false;
			}
		}
		return true;
	}
	public IAction getAction(String id){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, ACTION_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			IAction el = new ActionImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "Action");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (IAction)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getActions(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			IAction retElt = getAction(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public void addActivityFinalNode(IActivityFinalNode newActivityFinalNode){
		if(!(newActivityFinalNode instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newActivityFinalNode).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, ACTIVITY_FINAL_NODE_ELT_NAME);
		((DOMBased)newActivityFinalNode).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"activityFinalNode", newActivityFinalNode,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addActivityFinalNodes(Collection activityFinalNodes){
		for(Iterator en = activityFinalNodes.iterator(); en.hasNext(); ){
			IActivityFinalNode elt = (IActivityFinalNode)en.next();
			addActivityFinalNode(elt);
		}
	}		
		
	public void clearActivityFinalNodes(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, ACTIVITY_FINAL_NODE_ELT_NAME);
		Collection coll = getAllActivityFinalNodes();
		removeActivityFinalNodes(coll);
	}
	
	public void removeActivityFinalNode(IActivityFinalNode activityFinalNodeToRemove){
		if(!(activityFinalNodeToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, ACTIVITY_FINAL_NODE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)activityFinalNodeToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"activityFinalNode", activityFinalNodeToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeActivityFinalNodes(Collection activityFinalNodes){
		for(Iterator en = activityFinalNodes.iterator(); en.hasNext(); ){
			IActivityFinalNode elt = (IActivityFinalNode)en.next();
			removeActivityFinalNode(elt);
		}
	}
	
	public Collection getAllActivityFinalNodes(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, ACTIVITY_FINAL_NODE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IActivityFinalNode)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "ActivityFinalNode");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IActivityFinalNode)o);
					}
					catch(Exception e){
						ActivityFinalNodeImpl eltImpl = new ActivityFinalNodeImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ActivityFinalNodeImpl eltImpl = new ActivityFinalNodeImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasActivityFinalNode(IActivityFinalNode activityFinalNodeToCheck){
		Collection c = getAllActivityFinalNodes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IActivityFinalNode elt = (IActivityFinalNode)en.next();
			if(elt.isEquivalent(activityFinalNodeToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasActivityFinalNodes(Collection activityFinalNodesToCheck){
		Vector v = new Vector();
		for(Iterator en = activityFinalNodesToCheck.iterator(); en.hasNext(); ){
			IActivityFinalNode elt = (IActivityFinalNode)en.next();
			v.addElement(new Boolean(hasActivityFinalNode(elt)));
		}
		return v;
	}
		
	public boolean hasAllActivityFinalNodes(Collection activityFinalNodesToCheck){
		for(Iterator en = activityFinalNodesToCheck.iterator(); en.hasNext(); ){
			IActivityFinalNode elt = (IActivityFinalNode)en.next();
			if(!hasActivityFinalNode(elt)){
				return false;
			}
		}
		return true;
	}
	public void addControlFlow(IControlFlow newControlFlow){
		if(!(newControlFlow instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newControlFlow).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, CONTROL_FLOW_ELT_NAME);
		((DOMBased)newControlFlow).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"controlFlow", newControlFlow,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addControlFlows(Collection controlFlows){
		for(Iterator en = controlFlows.iterator(); en.hasNext(); ){
			IControlFlow elt = (IControlFlow)en.next();
			addControlFlow(elt);
		}
	}		
		
	public void clearControlFlows(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, CONTROL_FLOW_ELT_NAME);
		Collection coll = getAllControlFlows();
		removeControlFlows(coll);
	}
	
	public void removeControlFlow(IControlFlow controlFlowToRemove){
		if(!(controlFlowToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, CONTROL_FLOW_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)controlFlowToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"controlFlow", controlFlowToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeControlFlows(Collection controlFlows){
		for(Iterator en = controlFlows.iterator(); en.hasNext(); ){
			IControlFlow elt = (IControlFlow)en.next();
			removeControlFlow(elt);
		}
	}
	
	public Collection getAllControlFlows(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, CONTROL_FLOW_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IControlFlow)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "ControlFlow");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IControlFlow)o);
					}
					catch(Exception e){
						ControlFlowImpl eltImpl = new ControlFlowImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ControlFlowImpl eltImpl = new ControlFlowImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasControlFlow(IControlFlow controlFlowToCheck){
		Collection c = getAllControlFlows();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IControlFlow elt = (IControlFlow)en.next();
			if(elt.isEquivalent(controlFlowToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasControlFlows(Collection controlFlowsToCheck){
		Vector v = new Vector();
		for(Iterator en = controlFlowsToCheck.iterator(); en.hasNext(); ){
			IControlFlow elt = (IControlFlow)en.next();
			v.addElement(new Boolean(hasControlFlow(elt)));
		}
		return v;
	}
		
	public boolean hasAllControlFlows(Collection controlFlowsToCheck){
		for(Iterator en = controlFlowsToCheck.iterator(); en.hasNext(); ){
			IControlFlow elt = (IControlFlow)en.next();
			if(!hasControlFlow(elt)){
				return false;
			}
		}
		return true;
	}
	public void addDecisionNode(IDecisionNode newDecisionNode){
		if(!(newDecisionNode instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newDecisionNode).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, DECISION_NODE_ELT_NAME);
		((DOMBased)newDecisionNode).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"decisionNode", newDecisionNode,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addDecisionNodes(Collection decisionNodes){
		for(Iterator en = decisionNodes.iterator(); en.hasNext(); ){
			IDecisionNode elt = (IDecisionNode)en.next();
			addDecisionNode(elt);
		}
	}		
		
	public void clearDecisionNodes(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, DECISION_NODE_ELT_NAME);
		Collection coll = getAllDecisionNodes();
		removeDecisionNodes(coll);
	}
	
	public void removeDecisionNode(IDecisionNode decisionNodeToRemove){
		if(!(decisionNodeToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, DECISION_NODE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)decisionNodeToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"decisionNode", decisionNodeToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeDecisionNodes(Collection decisionNodes){
		for(Iterator en = decisionNodes.iterator(); en.hasNext(); ){
			IDecisionNode elt = (IDecisionNode)en.next();
			removeDecisionNode(elt);
		}
	}
	
	public Collection getAllDecisionNodes(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, DECISION_NODE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IDecisionNode)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "DecisionNode");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IDecisionNode)o);
					}
					catch(Exception e){
						DecisionNodeImpl eltImpl = new DecisionNodeImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					DecisionNodeImpl eltImpl = new DecisionNodeImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasDecisionNode(IDecisionNode decisionNodeToCheck){
		Collection c = getAllDecisionNodes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IDecisionNode elt = (IDecisionNode)en.next();
			if(elt.isEquivalent(decisionNodeToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasDecisionNodes(Collection decisionNodesToCheck){
		Vector v = new Vector();
		for(Iterator en = decisionNodesToCheck.iterator(); en.hasNext(); ){
			IDecisionNode elt = (IDecisionNode)en.next();
			v.addElement(new Boolean(hasDecisionNode(elt)));
		}
		return v;
	}
		
	public boolean hasAllDecisionNodes(Collection decisionNodesToCheck){
		for(Iterator en = decisionNodesToCheck.iterator(); en.hasNext(); ){
			IDecisionNode elt = (IDecisionNode)en.next();
			if(!hasDecisionNode(elt)){
				return false;
			}
		}
		return true;
	}
	public void addForkNode(IForkNode newForkNode){
		if(!(newForkNode instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newForkNode).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, FORK_NODE_ELT_NAME);
		((DOMBased)newForkNode).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"forkNode", newForkNode,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addForkNodes(Collection forkNodes){
		for(Iterator en = forkNodes.iterator(); en.hasNext(); ){
			IForkNode elt = (IForkNode)en.next();
			addForkNode(elt);
		}
	}		
		
	public void clearForkNodes(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, FORK_NODE_ELT_NAME);
		Collection coll = getAllForkNodes();
		removeForkNodes(coll);
	}
	
	public void removeForkNode(IForkNode forkNodeToRemove){
		if(!(forkNodeToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, FORK_NODE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)forkNodeToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"forkNode", forkNodeToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeForkNodes(Collection forkNodes){
		for(Iterator en = forkNodes.iterator(); en.hasNext(); ){
			IForkNode elt = (IForkNode)en.next();
			removeForkNode(elt);
		}
	}
	
	public Collection getAllForkNodes(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, FORK_NODE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IForkNode)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "ForkNode");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IForkNode)o);
					}
					catch(Exception e){
						ForkNodeImpl eltImpl = new ForkNodeImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ForkNodeImpl eltImpl = new ForkNodeImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasForkNode(IForkNode forkNodeToCheck){
		Collection c = getAllForkNodes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IForkNode elt = (IForkNode)en.next();
			if(elt.isEquivalent(forkNodeToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasForkNodes(Collection forkNodesToCheck){
		Vector v = new Vector();
		for(Iterator en = forkNodesToCheck.iterator(); en.hasNext(); ){
			IForkNode elt = (IForkNode)en.next();
			v.addElement(new Boolean(hasForkNode(elt)));
		}
		return v;
	}
		
	public boolean hasAllForkNodes(Collection forkNodesToCheck){
		for(Iterator en = forkNodesToCheck.iterator(); en.hasNext(); ){
			IForkNode elt = (IForkNode)en.next();
			if(!hasForkNode(elt)){
				return false;
			}
		}
		return true;
	}
	public void addInitialNode(IInitialNode newInitialNode){
		if(!(newInitialNode instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newInitialNode).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, INITIAL_NODE_ELT_NAME);
		((DOMBased)newInitialNode).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"initialNode", newInitialNode,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addInitialNodes(Collection initialNodes){
		for(Iterator en = initialNodes.iterator(); en.hasNext(); ){
			IInitialNode elt = (IInitialNode)en.next();
			addInitialNode(elt);
		}
	}		
		
	public void clearInitialNodes(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, INITIAL_NODE_ELT_NAME);
		Collection coll = getAllInitialNodes();
		removeInitialNodes(coll);
	}
	
	public void removeInitialNode(IInitialNode initialNodeToRemove){
		if(!(initialNodeToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, INITIAL_NODE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)initialNodeToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"initialNode", initialNodeToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeInitialNodes(Collection initialNodes){
		for(Iterator en = initialNodes.iterator(); en.hasNext(); ){
			IInitialNode elt = (IInitialNode)en.next();
			removeInitialNode(elt);
		}
	}
	
	public Collection getAllInitialNodes(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, INITIAL_NODE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IInitialNode)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "InitialNode");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IInitialNode)o);
					}
					catch(Exception e){
						InitialNodeImpl eltImpl = new InitialNodeImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					InitialNodeImpl eltImpl = new InitialNodeImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasInitialNode(IInitialNode initialNodeToCheck){
		Collection c = getAllInitialNodes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IInitialNode elt = (IInitialNode)en.next();
			if(elt.isEquivalent(initialNodeToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasInitialNodes(Collection initialNodesToCheck){
		Vector v = new Vector();
		for(Iterator en = initialNodesToCheck.iterator(); en.hasNext(); ){
			IInitialNode elt = (IInitialNode)en.next();
			v.addElement(new Boolean(hasInitialNode(elt)));
		}
		return v;
	}
		
	public boolean hasAllInitialNodes(Collection initialNodesToCheck){
		for(Iterator en = initialNodesToCheck.iterator(); en.hasNext(); ){
			IInitialNode elt = (IInitialNode)en.next();
			if(!hasInitialNode(elt)){
				return false;
			}
		}
		return true;
	}
	public void addJoinNode(IJoinNode newJoinNode){
		if(!(newJoinNode instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newJoinNode).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, JOIN_NODE_ELT_NAME);
		((DOMBased)newJoinNode).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"joinNode", newJoinNode,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addJoinNodes(Collection joinNodes){
		for(Iterator en = joinNodes.iterator(); en.hasNext(); ){
			IJoinNode elt = (IJoinNode)en.next();
			addJoinNode(elt);
		}
	}		
		
	public void clearJoinNodes(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, JOIN_NODE_ELT_NAME);
		Collection coll = getAllJoinNodes();
		removeJoinNodes(coll);
	}
	
	public void removeJoinNode(IJoinNode joinNodeToRemove){
		if(!(joinNodeToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, JOIN_NODE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)joinNodeToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"joinNode", joinNodeToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeJoinNodes(Collection joinNodes){
		for(Iterator en = joinNodes.iterator(); en.hasNext(); ){
			IJoinNode elt = (IJoinNode)en.next();
			removeJoinNode(elt);
		}
	}
	
	public Collection getAllJoinNodes(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, JOIN_NODE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IJoinNode)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "JoinNode");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IJoinNode)o);
					}
					catch(Exception e){
						JoinNodeImpl eltImpl = new JoinNodeImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					JoinNodeImpl eltImpl = new JoinNodeImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasJoinNode(IJoinNode joinNodeToCheck){
		Collection c = getAllJoinNodes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IJoinNode elt = (IJoinNode)en.next();
			if(elt.isEquivalent(joinNodeToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasJoinNodes(Collection joinNodesToCheck){
		Vector v = new Vector();
		for(Iterator en = joinNodesToCheck.iterator(); en.hasNext(); ){
			IJoinNode elt = (IJoinNode)en.next();
			v.addElement(new Boolean(hasJoinNode(elt)));
		}
		return v;
	}
		
	public boolean hasAllJoinNodes(Collection joinNodesToCheck){
		for(Iterator en = joinNodesToCheck.iterator(); en.hasNext(); ){
			IJoinNode elt = (IJoinNode)en.next();
			if(!hasJoinNode(elt)){
				return false;
			}
		}
		return true;
	}
	public void addMergeNode(IMergeNode newMergeNode){
		if(!(newMergeNode instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newMergeNode).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, MERGE_NODE_ELT_NAME);
		((DOMBased)newMergeNode).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"mergeNode", newMergeNode,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addMergeNodes(Collection mergeNodes){
		for(Iterator en = mergeNodes.iterator(); en.hasNext(); ){
			IMergeNode elt = (IMergeNode)en.next();
			addMergeNode(elt);
		}
	}		
		
	public void clearMergeNodes(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, MERGE_NODE_ELT_NAME);
		Collection coll = getAllMergeNodes();
		removeMergeNodes(coll);
	}
	
	public void removeMergeNode(IMergeNode mergeNodeToRemove){
		if(!(mergeNodeToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, MERGE_NODE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)mergeNodeToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"mergeNode", mergeNodeToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeMergeNodes(Collection mergeNodes){
		for(Iterator en = mergeNodes.iterator(); en.hasNext(); ){
			IMergeNode elt = (IMergeNode)en.next();
			removeMergeNode(elt);
		}
	}
	
	public Collection getAllMergeNodes(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, MERGE_NODE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IMergeNode)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "MergeNode");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IMergeNode)o);
					}
					catch(Exception e){
						MergeNodeImpl eltImpl = new MergeNodeImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					MergeNodeImpl eltImpl = new MergeNodeImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasMergeNode(IMergeNode mergeNodeToCheck){
		Collection c = getAllMergeNodes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IMergeNode elt = (IMergeNode)en.next();
			if(elt.isEquivalent(mergeNodeToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasMergeNodes(Collection mergeNodesToCheck){
		Vector v = new Vector();
		for(Iterator en = mergeNodesToCheck.iterator(); en.hasNext(); ){
			IMergeNode elt = (IMergeNode)en.next();
			v.addElement(new Boolean(hasMergeNode(elt)));
		}
		return v;
	}
		
	public boolean hasAllMergeNodes(Collection mergeNodesToCheck){
		for(Iterator en = mergeNodesToCheck.iterator(); en.hasNext(); ){
			IMergeNode elt = (IMergeNode)en.next();
			if(!hasMergeNode(elt)){
				return false;
			}
		}
		return true;
	}
	public void addObjectFlow(IObjectFlow newObjectFlow){
		if(!(newObjectFlow instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newObjectFlow).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, Uml212superstructureConstants.NS_URI, OBJECT_FLOW_ELT_NAME);
		((DOMBased)newObjectFlow).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"objectFlow", newObjectFlow,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addObjectFlows(Collection objectFlows){
		for(Iterator en = objectFlows.iterator(); en.hasNext(); ){
			IObjectFlow elt = (IObjectFlow)en.next();
			addObjectFlow(elt);
		}
	}		
		
	public void clearObjectFlows(){
		//DOMUtils.removeChildren(elt, Uml212superstructureConstants.NS_URI, OBJECT_FLOW_ELT_NAME);
		Collection coll = getAllObjectFlows();
		removeObjectFlows(coll);
	}
	
	public void removeObjectFlow(IObjectFlow objectFlowToRemove){
		if(!(objectFlowToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, OBJECT_FLOW_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)objectFlowToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"objectFlow", objectFlowToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeObjectFlows(Collection objectFlows){
		for(Iterator en = objectFlows.iterator(); en.hasNext(); ){
			IObjectFlow elt = (IObjectFlow)en.next();
			removeObjectFlow(elt);
		}
	}
	
	public Collection getAllObjectFlows(){
		NodeList nl = DOMUtils.getChildren(elt, Uml212superstructureConstants.NS_URI, OBJECT_FLOW_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IObjectFlow)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "ObjectFlow");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IObjectFlow)o);
					}
					catch(Exception e){
						ObjectFlowImpl eltImpl = new ObjectFlowImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ObjectFlowImpl eltImpl = new ObjectFlowImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasObjectFlow(IObjectFlow objectFlowToCheck){
		Collection c = getAllObjectFlows();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IObjectFlow elt = (IObjectFlow)en.next();
			if(elt.isEquivalent(objectFlowToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasObjectFlows(Collection objectFlowsToCheck){
		Vector v = new Vector();
		for(Iterator en = objectFlowsToCheck.iterator(); en.hasNext(); ){
			IObjectFlow elt = (IObjectFlow)en.next();
			v.addElement(new Boolean(hasObjectFlow(elt)));
		}
		return v;
	}
		
	public boolean hasAllObjectFlows(Collection objectFlowsToCheck){
		for(Iterator en = objectFlowsToCheck.iterator(); en.hasNext(); ){
			IObjectFlow elt = (IObjectFlow)en.next();
			if(!hasObjectFlow(elt)){
				return false;
			}
		}
		return true;
	}
	public boolean isEqual(IActivityDiagram ActivityDiagramToCheck){
		String thisId = getId();
		String thatId = ActivityDiagramToCheck.getId();
		
		if((thisId == null) || (thatId == null)){
			throw new IllegalArgumentException("One of the arguments is missing an ID.");
		}
		return thisId.equals(thatId);
	}
	
	public boolean isEquivalent(IActivityDiagram c){
		return (getClass().equals(c.getClass())) &&
			hasDescription(c.getDescription()) &&
			hasAllActions(c.getAllActions()) &&
			c.hasAllActions(getAllActions()) &&
			hasAllActivityFinalNodes(c.getAllActivityFinalNodes()) &&
			c.hasAllActivityFinalNodes(getAllActivityFinalNodes()) &&
			hasAllControlFlows(c.getAllControlFlows()) &&
			c.hasAllControlFlows(getAllControlFlows()) &&
			hasAllDecisionNodes(c.getAllDecisionNodes()) &&
			c.hasAllDecisionNodes(getAllDecisionNodes()) &&
			hasAllForkNodes(c.getAllForkNodes()) &&
			c.hasAllForkNodes(getAllForkNodes()) &&
			hasAllInitialNodes(c.getAllInitialNodes()) &&
			c.hasAllInitialNodes(getAllInitialNodes()) &&
			hasAllJoinNodes(c.getAllJoinNodes()) &&
			c.hasAllJoinNodes(getAllJoinNodes()) &&
			hasAllMergeNodes(c.getAllMergeNodes()) &&
			c.hasAllMergeNodes(getAllMergeNodes()) &&
			hasAllObjectFlows(c.getAllObjectFlows()) &&
			c.hasAllObjectFlows(getAllObjectFlows()) ;
	}

}
