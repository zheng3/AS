/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.hints2;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * HintedElement <code>xsi:type</code> in the
 * hints2 namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IHintedElement extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"hints2", "HintedElement", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("element", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("hint", "hints2", "Hint", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("hintedElement", "hints2", "HintedElement", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the element for this HintedElement.
	 * @param value new element
	 */
	public void setElement(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the element from this HintedElement.
	 */
	public void clearElement();

	/**
	 * Get the element from this HintedElement.
	 * @return element
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getElement();

	/**
	 * Determine if this HintedElement has the given element
	 * @param elementToCheck element to compare
	 * @return <code>true</code> if the elements are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasElement(edu.uci.isr.xarch.instance.IXMLLink elementToCheck);

	/**
	 * Add a hint to this HintedElement.
	 * @param newHint hint to add.
	 */
	public void addHint(IHint newHint);

	/**
	 * Add a collection of hints to this HintedElement.
	 * @param hints hints to add.
	 */
	public void addHints(Collection hints);

	/**
	 * Remove all hints from this HintedElement.
	 */
	public void clearHints();

	/**
	 * Remove the given hint from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param hintToRemove hint to remove.
	 */
	public void removeHint(IHint hintToRemove);

	/**
	 * Remove all the given hints from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param hints hint to remove.
	 */
	public void removeHints(Collection hints);

	/**
	 * Get all the hints from this HintedElement.
	 * @return all hints in this HintedElement.
	 */
	public Collection getAllHints();

	/**
	 * Determine if this HintedElement contains a given hint.
	 * @return <code>true</code> if this HintedElement contains the given
	 * hintToCheck, <code>false</code> otherwise.
	 */
	public boolean hasHint(IHint hintToCheck);

	/**
	 * Determine if this HintedElement contains the given set of hints.
	 * @param hintsToCheck hints to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>hints</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasHints(Collection hintsToCheck);

	/**
	 * Determine if this HintedElement contains each element in the 
	 * given set of hints.
	 * @param hintsToCheck hints to check for.
	 * @return <code>true</code> if every element in
	 * <code>hints</code> is found in this HintedElement,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllHints(Collection hintsToCheck);


	/**
	 * Add a hintedElement to this HintedElement.
	 * @param newHintedElement hintedElement to add.
	 */
	public void addHintedElement(IHintedElement newHintedElement);

	/**
	 * Add a collection of hintedElements to this HintedElement.
	 * @param hintedElements hintedElements to add.
	 */
	public void addHintedElements(Collection hintedElements);

	/**
	 * Remove all hintedElements from this HintedElement.
	 */
	public void clearHintedElements();

	/**
	 * Remove the given hintedElement from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param hintedElementToRemove hintedElement to remove.
	 */
	public void removeHintedElement(IHintedElement hintedElementToRemove);

	/**
	 * Remove all the given hintedElements from this HintedElement.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param hintedElements hintedElement to remove.
	 */
	public void removeHintedElements(Collection hintedElements);

	/**
	 * Get all the hintedElements from this HintedElement.
	 * @return all hintedElements in this HintedElement.
	 */
	public Collection getAllHintedElements();

	/**
	 * Determine if this HintedElement contains a given hintedElement.
	 * @return <code>true</code> if this HintedElement contains the given
	 * hintedElementToCheck, <code>false</code> otherwise.
	 */
	public boolean hasHintedElement(IHintedElement hintedElementToCheck);

	/**
	 * Determine if this HintedElement contains the given set of hintedElements.
	 * @param hintedElementsToCheck hintedElements to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>hintedElements</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasHintedElements(Collection hintedElementsToCheck);

	/**
	 * Determine if this HintedElement contains each element in the 
	 * given set of hintedElements.
	 * @param hintedElementsToCheck hintedElements to check for.
	 * @return <code>true</code> if every element in
	 * <code>hintedElements</code> is found in this HintedElement,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllHintedElements(Collection hintedElementsToCheck);

	/**
	 * Determine if another HintedElement is equivalent to this one, ignoring
	 * ID's.
	 * @param HintedElementToCheck HintedElement to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * HintedElement are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IHintedElement HintedElementToCheck);

}
