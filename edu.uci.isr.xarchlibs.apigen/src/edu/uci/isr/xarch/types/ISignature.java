/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.types;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Signature <code>xsi:type</code> in the
 * types namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface ISignature extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"types", "Signature", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("direction", "instance", "Direction", 0, 1),
			XArchPropertyMetadata.createElement("type", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("serviceType", "types", "SignatureServiceType", 0, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this Signature.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this Signature.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this Signature.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this Signature
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this Signature
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this Signature.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this Signature.
	 */
	public void clearDescription();

	/**
	 * Get the description from this Signature.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this Signature has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Set the direction for this Signature.
	 * @param value new direction
	 */
	public void setDirection(edu.uci.isr.xarch.instance.IDirection value);

	/**
	 * Clear the direction from this Signature.
	 */
	public void clearDirection();

	/**
	 * Get the direction from this Signature.
	 * @return direction
	 */
	public edu.uci.isr.xarch.instance.IDirection getDirection();

	/**
	 * Determine if this Signature has the given direction
	 * @param directionToCheck direction to compare
	 * @return <code>true</code> if the directions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDirection(edu.uci.isr.xarch.instance.IDirection directionToCheck);

	/**
	 * Set the type for this Signature.
	 * @param value new type
	 */
	public void setType(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the type from this Signature.
	 */
	public void clearType();

	/**
	 * Get the type from this Signature.
	 * @return type
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getType();

	/**
	 * Determine if this Signature has the given type
	 * @param typeToCheck type to compare
	 * @return <code>true</code> if the types are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasType(edu.uci.isr.xarch.instance.IXMLLink typeToCheck);

	/**
	 * Set the serviceType for this Signature.
	 * @param value new serviceType
	 */
	public void setServiceType(ISignatureServiceType value);

	/**
	 * Clear the serviceType from this Signature.
	 */
	public void clearServiceType();

	/**
	 * Get the serviceType from this Signature.
	 * @return serviceType
	 */
	public ISignatureServiceType getServiceType();

	/**
	 * Determine if this Signature has the given serviceType
	 * @param serviceTypeToCheck serviceType to compare
	 * @return <code>true</code> if the serviceTypes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasServiceType(ISignatureServiceType serviceTypeToCheck);
	/**
	 * Determine if another Signature has the same
	 * id as this one.
	 * @param SignatureToCheck Signature to compare with this
	 * one.
	 */
	public boolean isEqual(ISignature SignatureToCheck);
	/**
	 * Determine if another Signature is equivalent to this one, ignoring
	 * ID's.
	 * @param SignatureToCheck Signature to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Signature are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(ISignature SignatureToCheck);

}
