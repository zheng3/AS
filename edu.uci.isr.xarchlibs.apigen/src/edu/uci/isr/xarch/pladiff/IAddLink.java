/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * AddLink <code>xsi:type</code> in the
 * pladiff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IAddLink extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"pladiff", "AddLink", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("link", "types", "Link", 1, 1),
			XArchPropertyMetadata.createElement("interfaceEndPoint", "pladiff", "InterfaceEndPoint", 2, 2)},
		new XArchActionMetadata[]{});

	/**
	 * Set the link for this AddLink.
	 * @param value new link
	 */
	public void setLink(edu.uci.isr.xarch.types.ILink value);

	/**
	 * Clear the link from this AddLink.
	 */
	public void clearLink();

	/**
	 * Get the link from this AddLink.
	 * @return link
	 */
	public edu.uci.isr.xarch.types.ILink getLink();

	/**
	 * Determine if this AddLink has the given link
	 * @param linkToCheck link to compare
	 * @return <code>true</code> if the links are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasLink(edu.uci.isr.xarch.types.ILink linkToCheck);

	/**
	 * Add a interfaceEndPoint to this AddLink.
	 * @param newInterfaceEndPoint interfaceEndPoint to add.
	 */
	public void addInterfaceEndPoint(IInterfaceEndPoint newInterfaceEndPoint);

	/**
	 * Add a collection of interfaceEndPoints to this AddLink.
	 * @param interfaceEndPoints interfaceEndPoints to add.
	 */
	public void addInterfaceEndPoints(Collection interfaceEndPoints);

	/**
	 * Remove all interfaceEndPoints from this AddLink.
	 */
	public void clearInterfaceEndPoints();

	/**
	 * Remove the given interfaceEndPoint from this AddLink.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param interfaceEndPointToRemove interfaceEndPoint to remove.
	 */
	public void removeInterfaceEndPoint(IInterfaceEndPoint interfaceEndPointToRemove);

	/**
	 * Remove all the given interfaceEndPoints from this AddLink.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param interfaceEndPoints interfaceEndPoint to remove.
	 */
	public void removeInterfaceEndPoints(Collection interfaceEndPoints);

	/**
	 * Get all the interfaceEndPoints from this AddLink.
	 * @return all interfaceEndPoints in this AddLink.
	 */
	public Collection getAllInterfaceEndPoints();

	/**
	 * Determine if this AddLink contains a given interfaceEndPoint.
	 * @return <code>true</code> if this AddLink contains the given
	 * interfaceEndPointToCheck, <code>false</code> otherwise.
	 */
	public boolean hasInterfaceEndPoint(IInterfaceEndPoint interfaceEndPointToCheck);

	/**
	 * Determine if this AddLink contains the given set of interfaceEndPoints.
	 * @param interfaceEndPointsToCheck interfaceEndPoints to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>interfaceEndPoints</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasInterfaceEndPoints(Collection interfaceEndPointsToCheck);

	/**
	 * Determine if this AddLink contains each element in the 
	 * given set of interfaceEndPoints.
	 * @param interfaceEndPointsToCheck interfaceEndPoints to check for.
	 * @return <code>true</code> if every element in
	 * <code>interfaceEndPoints</code> is found in this AddLink,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllInterfaceEndPoints(Collection interfaceEndPointsToCheck);

	/**
	 * Determine if another AddLink is equivalent to this one, ignoring
	 * ID's.
	 * @param AddLinkToCheck AddLink to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * AddLink are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IAddLink AddLinkToCheck);

}
