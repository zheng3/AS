/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.variants;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Variant <code>xsi:type</code> in the
 * variants namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IVariant extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"variants", "Variant", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("guard", "options", "Guard", 1, 1),
			XArchPropertyMetadata.createElement("variantType", "instance", "XMLLink", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the guard for this Variant.
	 * @param value new guard
	 */
	public void setGuard(edu.uci.isr.xarch.options.IGuard value);

	/**
	 * Clear the guard from this Variant.
	 */
	public void clearGuard();

	/**
	 * Get the guard from this Variant.
	 * @return guard
	 */
	public edu.uci.isr.xarch.options.IGuard getGuard();

	/**
	 * Determine if this Variant has the given guard
	 * @param guardToCheck guard to compare
	 * @return <code>true</code> if the guards are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasGuard(edu.uci.isr.xarch.options.IGuard guardToCheck);

	/**
	 * Set the variantType for this Variant.
	 * @param value new variantType
	 */
	public void setVariantType(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the variantType from this Variant.
	 */
	public void clearVariantType();

	/**
	 * Get the variantType from this Variant.
	 * @return variantType
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getVariantType();

	/**
	 * Determine if this Variant has the given variantType
	 * @param variantTypeToCheck variantType to compare
	 * @return <code>true</code> if the variantTypes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasVariantType(edu.uci.isr.xarch.instance.IXMLLink variantTypeToCheck);
	/**
	 * Determine if another Variant is equivalent to this one, ignoring
	 * ID's.
	 * @param VariantToCheck Variant to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Variant are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IVariant VariantToCheck);

}
