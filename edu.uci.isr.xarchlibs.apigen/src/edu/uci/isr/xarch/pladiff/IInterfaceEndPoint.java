/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * InterfaceEndPoint <code>xsi:type</code> in the
 * pladiff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IInterfaceEndPoint extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"pladiff", "InterfaceEndPoint", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("interfaceDescription", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("connectingElementDescription", "instance", "Description", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the interfaceDescription for this InterfaceEndPoint.
	 * @param value new interfaceDescription
	 */
	public void setInterfaceDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the interfaceDescription from this InterfaceEndPoint.
	 */
	public void clearInterfaceDescription();

	/**
	 * Get the interfaceDescription from this InterfaceEndPoint.
	 * @return interfaceDescription
	 */
	public edu.uci.isr.xarch.instance.IDescription getInterfaceDescription();

	/**
	 * Determine if this InterfaceEndPoint has the given interfaceDescription
	 * @param interfaceDescriptionToCheck interfaceDescription to compare
	 * @return <code>true</code> if the interfaceDescriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasInterfaceDescription(edu.uci.isr.xarch.instance.IDescription interfaceDescriptionToCheck);

	/**
	 * Set the connectingElementDescription for this InterfaceEndPoint.
	 * @param value new connectingElementDescription
	 */
	public void setConnectingElementDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the connectingElementDescription from this InterfaceEndPoint.
	 */
	public void clearConnectingElementDescription();

	/**
	 * Get the connectingElementDescription from this InterfaceEndPoint.
	 * @return connectingElementDescription
	 */
	public edu.uci.isr.xarch.instance.IDescription getConnectingElementDescription();

	/**
	 * Determine if this InterfaceEndPoint has the given connectingElementDescription
	 * @param connectingElementDescriptionToCheck connectingElementDescription to compare
	 * @return <code>true</code> if the connectingElementDescriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasConnectingElementDescription(edu.uci.isr.xarch.instance.IDescription connectingElementDescriptionToCheck);
	/**
	 * Determine if another InterfaceEndPoint is equivalent to this one, ignoring
	 * ID's.
	 * @param InterfaceEndPointToCheck InterfaceEndPoint to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * InterfaceEndPoint are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IInterfaceEndPoint InterfaceEndPointToCheck);

}
