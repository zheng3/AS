/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.changes;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;
import edu.uci.isr.xarch.IXArchContext;

/**
 * The context object for the changes package.
 * This object is used to create objects that are used
 * in the changes namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public class ChangesContext implements IChangesContext {

	protected static final String DEFAULT_ELT_NAME = "anonymousInstanceTag";
	protected Document doc;
	protected IXArch xArch;

	/**
	 * Create a new ChangesContext for the given
	 * IXArch object.
	 * @param xArch XArch object to contextualize in this namespace.
	 */
	public ChangesContext(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Node docRootNode = ((DOMBased)xArch).getDOMNode();
		synchronized(DOMUtils.getDOMLock(docRootNode)){
			this.doc = docRootNode.getOwnerDocument();
			xArch.addSchemaLocation("http://www.ics.uci.edu/pub/arch/xArch/changes.xsd", "http://www.ics.uci.edu/pub/arch/xArch/changes.xsd");
			this.xArch = xArch;
		}
	}

	public IXArch getXArch(){
		return xArch;
	}
	
	protected Element createElement(String name){
		synchronized(DOMUtils.getDOMLock(doc)){
			return doc.createElementNS(ChangesConstants.NS_URI, name);
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IChangesContext.TYPE_METADATA;
	}
	/**
	 * Create an IStatusSimpleType object in this namespace.
	 * @return New IStatusSimpleType object.
	 */
	public IStatusSimpleType createStatusSimpleType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, StatusSimpleTypeImpl.XSD_TYPE_NSURI, StatusSimpleTypeImpl.XSD_TYPE_NAME);
		StatusSimpleTypeImpl newElt = new StatusSimpleTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IStatusSimpleType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IStatusSimpleType recontextualizeStatusSimpleType(IStatusSimpleType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IChangeTypeSimpleType object in this namespace.
	 * @return New IChangeTypeSimpleType object.
	 */
	public IChangeTypeSimpleType createChangeTypeSimpleType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ChangeTypeSimpleTypeImpl.XSD_TYPE_NSURI, ChangeTypeSimpleTypeImpl.XSD_TYPE_NAME);
		ChangeTypeSimpleTypeImpl newElt = new ChangeTypeSimpleTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IChangeTypeSimpleType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IChangeTypeSimpleType recontextualizeChangeTypeSimpleType(IChangeTypeSimpleType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IArchChange object in this namespace.
	 * @return New IArchChange object.
	 */
	public IArchChange createArchChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ArchChangeImpl.XSD_TYPE_NSURI, ArchChangeImpl.XSD_TYPE_NAME);
		ArchChangeImpl newElt = new ArchChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IArchChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IArchChange recontextualizeArchChange(IArchChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DescriptionImpl newElt = new edu.uci.isr.xarch.instance.DescriptionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IChanges object in this namespace.
	 * @return New IChanges object.
	 */
	public IChanges createChanges(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ChangesImpl.XSD_TYPE_NSURI, ChangesImpl.XSD_TYPE_NAME);
		ChangesImpl newElt = new ChangesImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IChanges object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IChanges recontextualizeChanges(IChanges value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IStatus object in this namespace.
	 * @return New IStatus object.
	 */
	public IStatus createStatus(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, StatusImpl.XSD_TYPE_NSURI, StatusImpl.XSD_TYPE_NAME);
		StatusImpl newElt = new StatusImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IStatus object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IStatus recontextualizeStatus(IStatus value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IChangeType object in this namespace.
	 * @return New IChangeType object.
	 */
	public IChangeType createChangeType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ChangeTypeImpl.XSD_TYPE_NSURI, ChangeTypeImpl.XSD_TYPE_NAME);
		ChangeTypeImpl newElt = new ChangeTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IChangeType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IChangeType recontextualizeChangeType(IChangeType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IComponentChange object in this namespace.
	 * @return New IComponentChange object.
	 */
	public IComponentChange createComponentChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ComponentChangeImpl.XSD_TYPE_NSURI, ComponentChangeImpl.XSD_TYPE_NAME);
		ComponentChangeImpl newElt = new ComponentChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IComponentChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IComponentChange recontextualizeComponentChange(IComponentChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.XMLLinkImpl newElt = new edu.uci.isr.xarch.instance.XMLLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.IComponent object in this namespace.
	 * @return New edu.uci.isr.xarch.types.IComponent object.
	 */
	public edu.uci.isr.xarch.types.IComponent createComponent(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.ComponentImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.ComponentImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.ComponentImpl newElt = new edu.uci.isr.xarch.types.ComponentImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.IComponent object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.IComponent recontextualizeComponent(edu.uci.isr.xarch.types.IComponent value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IInterfaceChange object in this namespace.
	 * @return New IInterfaceChange object.
	 */
	public IInterfaceChange createInterfaceChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InterfaceChangeImpl.XSD_TYPE_NSURI, InterfaceChangeImpl.XSD_TYPE_NAME);
		InterfaceChangeImpl newElt = new InterfaceChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInterfaceChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInterfaceChange recontextualizeInterfaceChange(IInterfaceChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.IInterface object in this namespace.
	 * @return New edu.uci.isr.xarch.types.IInterface object.
	 */
	public edu.uci.isr.xarch.types.IInterface createInterface(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.InterfaceImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.InterfaceImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.InterfaceImpl newElt = new edu.uci.isr.xarch.types.InterfaceImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.IInterface object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.IInterface recontextualizeInterface(edu.uci.isr.xarch.types.IInterface value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IPropertyChange object in this namespace.
	 * @return New IPropertyChange object.
	 */
	public IPropertyChange createPropertyChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, PropertyChangeImpl.XSD_TYPE_NSURI, PropertyChangeImpl.XSD_TYPE_NAME);
		PropertyChangeImpl newElt = new PropertyChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IPropertyChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IPropertyChange recontextualizePropertyChange(IPropertyChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IStringType object in this namespace.
	 * @return New IStringType object.
	 */
	public IStringType createStringType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, StringTypeImpl.XSD_TYPE_NSURI, StringTypeImpl.XSD_TYPE_NAME);
		StringTypeImpl newElt = new StringTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IStringType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IStringType recontextualizeStringType(IStringType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ILinkChange object in this namespace.
	 * @return New ILinkChange object.
	 */
	public ILinkChange createLinkChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, LinkChangeImpl.XSD_TYPE_NSURI, LinkChangeImpl.XSD_TYPE_NAME);
		LinkChangeImpl newElt = new LinkChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ILinkChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ILinkChange recontextualizeLinkChange(ILinkChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.types.ILink object in this namespace.
	 * @return New edu.uci.isr.xarch.types.ILink object.
	 */
	public edu.uci.isr.xarch.types.ILink createLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.types.LinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.types.LinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.types.LinkImpl newElt = new edu.uci.isr.xarch.types.LinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.types.ILink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.types.ILink recontextualizeLink(edu.uci.isr.xarch.types.ILink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IInteractionChange object in this namespace.
	 * @return New IInteractionChange object.
	 */
	public IInteractionChange createInteractionChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, InteractionChangeImpl.XSD_TYPE_NSURI, InteractionChangeImpl.XSD_TYPE_NAME);
		InteractionChangeImpl newElt = new InteractionChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IInteractionChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IInteractionChange recontextualizeInteractionChange(IInteractionChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.interactions.IInteraction object in this namespace.
	 * @return New edu.uci.isr.xarch.interactions.IInteraction object.
	 */
	public edu.uci.isr.xarch.interactions.IInteraction createInteraction(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.interactions.InteractionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.interactions.InteractionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.interactions.InteractionImpl newElt = new edu.uci.isr.xarch.interactions.InteractionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.interactions.IInteraction object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.interactions.IInteraction recontextualizeInteraction(edu.uci.isr.xarch.interactions.IInteraction value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IStatechartChange object in this namespace.
	 * @return New IStatechartChange object.
	 */
	public IStatechartChange createStatechartChange(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, StatechartChangeImpl.XSD_TYPE_NSURI, StatechartChangeImpl.XSD_TYPE_NAME);
		StatechartChangeImpl newElt = new StatechartChangeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IStatechartChange object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IStatechartChange recontextualizeStatechartChange(IStatechartChange value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.statecharts.IStatechart object in this namespace.
	 * @return New edu.uci.isr.xarch.statecharts.IStatechart object.
	 */
	public edu.uci.isr.xarch.statecharts.IStatechart createStatechart(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.statecharts.StatechartImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.statecharts.StatechartImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.statecharts.StatechartImpl newElt = new edu.uci.isr.xarch.statecharts.StatechartImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.statecharts.IStatechart object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.statecharts.IStatechart recontextualizeStatechart(edu.uci.isr.xarch.statecharts.IStatechart value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, ChangesConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, ChangesConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create a top-level element of type <code>IArchChange</code>.
	 * This function should be used in lieu of <code>createArchChange</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IArchChange suitable for adding
	 * as a child of xArch.
	 */
	public IArchChange createArchChangeElement(){
		Element elt = createElement("archChange");
		DOMUtils.addXSIType(elt, ArchChangeImpl.XSD_TYPE_NSURI, 
			ArchChangeImpl.XSD_TYPE_NAME);
		ArchChangeImpl newElt = new ArchChangeImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IArchChange child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IArchChange</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IArchChange getArchChange(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchChange){
				return (IArchChange)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(ChangesConstants.NS_URI))){
						if((localName != null) && (localName.equals("archChange"))){
							ArchChangeImpl newElt = new ArchChangeImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IArchChange children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IArchChange</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection getAllArchChanges(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector v = new Vector();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchChange){
				v.addElement(o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(ChangesConstants.NS_URI))){
						if((localName != null) && (localName.equals("archChange"))){
							ArchChangeImpl newElt = new ArchChangeImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}

}

