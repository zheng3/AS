/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.instance;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * ArchInstance <code>xsi:type</code> in the
 * instance namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IArchInstance extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"instance", "ArchInstance", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("id", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("componentInstance", "instance", "ComponentInstance", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("connectorInstance", "instance", "ConnectorInstance", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("linkInstance", "instance", "LinkInstance", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("group", "instance", "Group", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the id attribute on this ArchInstance.
	 * @param id id
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setId(String id);

	/**
	 * Remove the id attribute from this ArchInstance.
	 */
	public void clearId();

	/**
	 * Get the id attribute from this ArchInstance.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return id on this ArchInstance
	 */
	public String getId();

	/**
	 * Determine if the id attribute on this ArchInstance
	 * has the given value.
	 * @param id Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasId(String id);


	/**
	 * Set the description for this ArchInstance.
	 * @param value new description
	 */
	public void setDescription(IDescription value);

	/**
	 * Clear the description from this ArchInstance.
	 */
	public void clearDescription();

	/**
	 * Get the description from this ArchInstance.
	 * @return description
	 */
	public IDescription getDescription();

	/**
	 * Determine if this ArchInstance has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(IDescription descriptionToCheck);

	/**
	 * Add a componentInstance to this ArchInstance.
	 * @param newComponentInstance componentInstance to add.
	 */
	public void addComponentInstance(IComponentInstance newComponentInstance);

	/**
	 * Add a collection of componentInstances to this ArchInstance.
	 * @param componentInstances componentInstances to add.
	 */
	public void addComponentInstances(Collection componentInstances);

	/**
	 * Remove all componentInstances from this ArchInstance.
	 */
	public void clearComponentInstances();

	/**
	 * Remove the given componentInstance from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentInstanceToRemove componentInstance to remove.
	 */
	public void removeComponentInstance(IComponentInstance componentInstanceToRemove);

	/**
	 * Remove all the given componentInstances from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param componentInstances componentInstance to remove.
	 */
	public void removeComponentInstances(Collection componentInstances);

	/**
	 * Get all the componentInstances from this ArchInstance.
	 * @return all componentInstances in this ArchInstance.
	 */
	public Collection getAllComponentInstances();

	/**
	 * Determine if this ArchInstance contains a given componentInstance.
	 * @return <code>true</code> if this ArchInstance contains the given
	 * componentInstanceToCheck, <code>false</code> otherwise.
	 */
	public boolean hasComponentInstance(IComponentInstance componentInstanceToCheck);

	/**
	 * Determine if this ArchInstance contains the given set of componentInstances.
	 * @param componentInstancesToCheck componentInstances to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>componentInstances</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasComponentInstances(Collection componentInstancesToCheck);

	/**
	 * Determine if this ArchInstance contains each element in the 
	 * given set of componentInstances.
	 * @param componentInstancesToCheck componentInstances to check for.
	 * @return <code>true</code> if every element in
	 * <code>componentInstances</code> is found in this ArchInstance,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllComponentInstances(Collection componentInstancesToCheck);

	/**
	 * Gets the componentInstance from this ArchInstance with the given
	 * id.
	 * @param id ID to look for.
	 * @return componentInstance with the given ID, or <code>null</code> if not found.
	 */
	public IComponentInstance getComponentInstance(String id);

	/**
	 * Gets the componentInstances from this ArchInstance with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return componentInstances with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getComponentInstances(Collection ids);


	/**
	 * Add a connectorInstance to this ArchInstance.
	 * @param newConnectorInstance connectorInstance to add.
	 */
	public void addConnectorInstance(IConnectorInstance newConnectorInstance);

	/**
	 * Add a collection of connectorInstances to this ArchInstance.
	 * @param connectorInstances connectorInstances to add.
	 */
	public void addConnectorInstances(Collection connectorInstances);

	/**
	 * Remove all connectorInstances from this ArchInstance.
	 */
	public void clearConnectorInstances();

	/**
	 * Remove the given connectorInstance from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorInstanceToRemove connectorInstance to remove.
	 */
	public void removeConnectorInstance(IConnectorInstance connectorInstanceToRemove);

	/**
	 * Remove all the given connectorInstances from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param connectorInstances connectorInstance to remove.
	 */
	public void removeConnectorInstances(Collection connectorInstances);

	/**
	 * Get all the connectorInstances from this ArchInstance.
	 * @return all connectorInstances in this ArchInstance.
	 */
	public Collection getAllConnectorInstances();

	/**
	 * Determine if this ArchInstance contains a given connectorInstance.
	 * @return <code>true</code> if this ArchInstance contains the given
	 * connectorInstanceToCheck, <code>false</code> otherwise.
	 */
	public boolean hasConnectorInstance(IConnectorInstance connectorInstanceToCheck);

	/**
	 * Determine if this ArchInstance contains the given set of connectorInstances.
	 * @param connectorInstancesToCheck connectorInstances to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>connectorInstances</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasConnectorInstances(Collection connectorInstancesToCheck);

	/**
	 * Determine if this ArchInstance contains each element in the 
	 * given set of connectorInstances.
	 * @param connectorInstancesToCheck connectorInstances to check for.
	 * @return <code>true</code> if every element in
	 * <code>connectorInstances</code> is found in this ArchInstance,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllConnectorInstances(Collection connectorInstancesToCheck);

	/**
	 * Gets the connectorInstance from this ArchInstance with the given
	 * id.
	 * @param id ID to look for.
	 * @return connectorInstance with the given ID, or <code>null</code> if not found.
	 */
	public IConnectorInstance getConnectorInstance(String id);

	/**
	 * Gets the connectorInstances from this ArchInstance with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return connectorInstances with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getConnectorInstances(Collection ids);


	/**
	 * Add a linkInstance to this ArchInstance.
	 * @param newLinkInstance linkInstance to add.
	 */
	public void addLinkInstance(ILinkInstance newLinkInstance);

	/**
	 * Add a collection of linkInstances to this ArchInstance.
	 * @param linkInstances linkInstances to add.
	 */
	public void addLinkInstances(Collection linkInstances);

	/**
	 * Remove all linkInstances from this ArchInstance.
	 */
	public void clearLinkInstances();

	/**
	 * Remove the given linkInstance from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param linkInstanceToRemove linkInstance to remove.
	 */
	public void removeLinkInstance(ILinkInstance linkInstanceToRemove);

	/**
	 * Remove all the given linkInstances from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param linkInstances linkInstance to remove.
	 */
	public void removeLinkInstances(Collection linkInstances);

	/**
	 * Get all the linkInstances from this ArchInstance.
	 * @return all linkInstances in this ArchInstance.
	 */
	public Collection getAllLinkInstances();

	/**
	 * Determine if this ArchInstance contains a given linkInstance.
	 * @return <code>true</code> if this ArchInstance contains the given
	 * linkInstanceToCheck, <code>false</code> otherwise.
	 */
	public boolean hasLinkInstance(ILinkInstance linkInstanceToCheck);

	/**
	 * Determine if this ArchInstance contains the given set of linkInstances.
	 * @param linkInstancesToCheck linkInstances to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>linkInstances</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasLinkInstances(Collection linkInstancesToCheck);

	/**
	 * Determine if this ArchInstance contains each element in the 
	 * given set of linkInstances.
	 * @param linkInstancesToCheck linkInstances to check for.
	 * @return <code>true</code> if every element in
	 * <code>linkInstances</code> is found in this ArchInstance,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllLinkInstances(Collection linkInstancesToCheck);

	/**
	 * Gets the linkInstance from this ArchInstance with the given
	 * id.
	 * @param id ID to look for.
	 * @return linkInstance with the given ID, or <code>null</code> if not found.
	 */
	public ILinkInstance getLinkInstance(String id);

	/**
	 * Gets the linkInstances from this ArchInstance with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return linkInstances with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getLinkInstances(Collection ids);


	/**
	 * Add a group to this ArchInstance.
	 * @param newGroup group to add.
	 */
	public void addGroup(IGroup newGroup);

	/**
	 * Add a collection of groups to this ArchInstance.
	 * @param groups groups to add.
	 */
	public void addGroups(Collection groups);

	/**
	 * Remove all groups from this ArchInstance.
	 */
	public void clearGroups();

	/**
	 * Remove the given group from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param groupToRemove group to remove.
	 */
	public void removeGroup(IGroup groupToRemove);

	/**
	 * Remove all the given groups from this ArchInstance.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param groups group to remove.
	 */
	public void removeGroups(Collection groups);

	/**
	 * Get all the groups from this ArchInstance.
	 * @return all groups in this ArchInstance.
	 */
	public Collection getAllGroups();

	/**
	 * Determine if this ArchInstance contains a given group.
	 * @return <code>true</code> if this ArchInstance contains the given
	 * groupToCheck, <code>false</code> otherwise.
	 */
	public boolean hasGroup(IGroup groupToCheck);

	/**
	 * Determine if this ArchInstance contains the given set of groups.
	 * @param groupsToCheck groups to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>groups</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasGroups(Collection groupsToCheck);

	/**
	 * Determine if this ArchInstance contains each element in the 
	 * given set of groups.
	 * @param groupsToCheck groups to check for.
	 * @return <code>true</code> if every element in
	 * <code>groups</code> is found in this ArchInstance,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllGroups(Collection groupsToCheck);

	/**
	 * Gets the group from this ArchInstance with the given
	 * id.
	 * @param id ID to look for.
	 * @return group with the given ID, or <code>null</code> if not found.
	 */
	public IGroup getGroup(String id);

	/**
	 * Gets the groups from this ArchInstance with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return groups with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getGroups(Collection ids);

	/**
	 * Determine if another ArchInstance has the same
	 * id as this one.
	 * @param ArchInstanceToCheck ArchInstance to compare with this
	 * one.
	 */
	public boolean isEqual(IArchInstance ArchInstanceToCheck);
	/**
	 * Determine if another ArchInstance is equivalent to this one, ignoring
	 * ID's.
	 * @param ArchInstanceToCheck ArchInstance to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * ArchInstance are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IArchInstance ArchInstanceToCheck);

}
