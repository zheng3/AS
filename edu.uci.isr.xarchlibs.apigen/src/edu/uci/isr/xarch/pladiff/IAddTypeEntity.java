/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.pladiff;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * AddTypeEntity <code>xsi:type</code> in the
 * pladiff namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IAddTypeEntity extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"pladiff", "AddTypeEntity", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("diffLocation", "pladiff", "DiffLocation", 1, 1),
			XArchPropertyMetadata.createElement("signature", "types", "Signature", 1, 1),
			XArchPropertyMetadata.createElement("variant", "variants", "Variant", 1, 1),
			XArchPropertyMetadata.createElement("subArchitecture", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("addSignatureInterfaceMapping", "pladiff", "AddSignatureInterfaceMapping", 1, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the diffLocation for this AddTypeEntity.
	 * @param value new diffLocation
	 */
	public void setDiffLocation(IDiffLocation value);

	/**
	 * Clear the diffLocation from this AddTypeEntity.
	 */
	public void clearDiffLocation();

	/**
	 * Get the diffLocation from this AddTypeEntity.
	 * @return diffLocation
	 */
	public IDiffLocation getDiffLocation();

	/**
	 * Determine if this AddTypeEntity has the given diffLocation
	 * @param diffLocationToCheck diffLocation to compare
	 * @return <code>true</code> if the diffLocations are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDiffLocation(IDiffLocation diffLocationToCheck);

	/**
	 * Set the signature for this AddTypeEntity.
	 * @param value new signature
	 */
	public void setSignature(edu.uci.isr.xarch.types.ISignature value);

	/**
	 * Clear the signature from this AddTypeEntity.
	 */
	public void clearSignature();

	/**
	 * Get the signature from this AddTypeEntity.
	 * @return signature
	 */
	public edu.uci.isr.xarch.types.ISignature getSignature();

	/**
	 * Determine if this AddTypeEntity has the given signature
	 * @param signatureToCheck signature to compare
	 * @return <code>true</code> if the signatures are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasSignature(edu.uci.isr.xarch.types.ISignature signatureToCheck);

	/**
	 * Set the variant for this AddTypeEntity.
	 * @param value new variant
	 */
	public void setVariant(edu.uci.isr.xarch.variants.IVariant value);

	/**
	 * Clear the variant from this AddTypeEntity.
	 */
	public void clearVariant();

	/**
	 * Get the variant from this AddTypeEntity.
	 * @return variant
	 */
	public edu.uci.isr.xarch.variants.IVariant getVariant();

	/**
	 * Determine if this AddTypeEntity has the given variant
	 * @param variantToCheck variant to compare
	 * @return <code>true</code> if the variants are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasVariant(edu.uci.isr.xarch.variants.IVariant variantToCheck);

	/**
	 * Set the subArchitecture for this AddTypeEntity.
	 * @param value new subArchitecture
	 */
	public void setSubArchitecture(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the subArchitecture from this AddTypeEntity.
	 */
	public void clearSubArchitecture();

	/**
	 * Get the subArchitecture from this AddTypeEntity.
	 * @return subArchitecture
	 */
	public edu.uci.isr.xarch.instance.IDescription getSubArchitecture();

	/**
	 * Determine if this AddTypeEntity has the given subArchitecture
	 * @param subArchitectureToCheck subArchitecture to compare
	 * @return <code>true</code> if the subArchitectures are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasSubArchitecture(edu.uci.isr.xarch.instance.IDescription subArchitectureToCheck);

	/**
	 * Set the addSignatureInterfaceMapping for this AddTypeEntity.
	 * @param value new addSignatureInterfaceMapping
	 */
	public void setAddSignatureInterfaceMapping(IAddSignatureInterfaceMapping value);

	/**
	 * Clear the addSignatureInterfaceMapping from this AddTypeEntity.
	 */
	public void clearAddSignatureInterfaceMapping();

	/**
	 * Get the addSignatureInterfaceMapping from this AddTypeEntity.
	 * @return addSignatureInterfaceMapping
	 */
	public IAddSignatureInterfaceMapping getAddSignatureInterfaceMapping();

	/**
	 * Determine if this AddTypeEntity has the given addSignatureInterfaceMapping
	 * @param addSignatureInterfaceMappingToCheck addSignatureInterfaceMapping to compare
	 * @return <code>true</code> if the addSignatureInterfaceMappings are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasAddSignatureInterfaceMapping(IAddSignatureInterfaceMapping addSignatureInterfaceMappingToCheck);
	/**
	 * Determine if another AddTypeEntity is equivalent to this one, ignoring
	 * ID's.
	 * @param AddTypeEntityToCheck AddTypeEntity to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * AddTypeEntity are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IAddTypeEntity AddTypeEntityToCheck);

}
