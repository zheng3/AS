/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.javasourcecode;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * JavaSourceFile <code>xsi:type</code> in the
 * javasourcecode namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IJavaSourceFile extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"javasourcecode", "JavaSourceFile", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("fileName", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createAttribute("path", "http://www.w3.org/2001/XMLSchema", "string", null, null),
			XArchPropertyMetadata.createElement("repositoryLocation", "javasourcecode", "RepositoryLocation", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the fileName attribute on this JavaSourceFile.
	 * @param fileName fileName
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setFileName(String fileName);

	/**
	 * Remove the fileName attribute from this JavaSourceFile.
	 */
	public void clearFileName();

	/**
	 * Get the fileName attribute from this JavaSourceFile.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return fileName on this JavaSourceFile
	 */
	public String getFileName();

	/**
	 * Determine if the fileName attribute on this JavaSourceFile
	 * has the given value.
	 * @param fileName Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasFileName(String fileName);


	/**
	 * Set the path attribute on this JavaSourceFile.
	 * @param path path
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setPath(String path);

	/**
	 * Remove the path attribute from this JavaSourceFile.
	 */
	public void clearPath();

	/**
	 * Get the path attribute from this JavaSourceFile.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return path on this JavaSourceFile
	 */
	public String getPath();

	/**
	 * Determine if the path attribute on this JavaSourceFile
	 * has the given value.
	 * @param path Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasPath(String path);


	/**
	 * Add a repositoryLocation to this JavaSourceFile.
	 * @param newRepositoryLocation repositoryLocation to add.
	 */
	public void addRepositoryLocation(IRepositoryLocation newRepositoryLocation);

	/**
	 * Add a collection of repositoryLocations to this JavaSourceFile.
	 * @param repositoryLocations repositoryLocations to add.
	 */
	public void addRepositoryLocations(Collection repositoryLocations);

	/**
	 * Remove all repositoryLocations from this JavaSourceFile.
	 */
	public void clearRepositoryLocations();

	/**
	 * Remove the given repositoryLocation from this JavaSourceFile.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param repositoryLocationToRemove repositoryLocation to remove.
	 */
	public void removeRepositoryLocation(IRepositoryLocation repositoryLocationToRemove);

	/**
	 * Remove all the given repositoryLocations from this JavaSourceFile.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param repositoryLocations repositoryLocation to remove.
	 */
	public void removeRepositoryLocations(Collection repositoryLocations);

	/**
	 * Get all the repositoryLocations from this JavaSourceFile.
	 * @return all repositoryLocations in this JavaSourceFile.
	 */
	public Collection getAllRepositoryLocations();

	/**
	 * Determine if this JavaSourceFile contains a given repositoryLocation.
	 * @return <code>true</code> if this JavaSourceFile contains the given
	 * repositoryLocationToCheck, <code>false</code> otherwise.
	 */
	public boolean hasRepositoryLocation(IRepositoryLocation repositoryLocationToCheck);

	/**
	 * Determine if this JavaSourceFile contains the given set of repositoryLocations.
	 * @param repositoryLocationsToCheck repositoryLocations to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>repositoryLocations</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasRepositoryLocations(Collection repositoryLocationsToCheck);

	/**
	 * Determine if this JavaSourceFile contains each element in the 
	 * given set of repositoryLocations.
	 * @param repositoryLocationsToCheck repositoryLocations to check for.
	 * @return <code>true</code> if every element in
	 * <code>repositoryLocations</code> is found in this JavaSourceFile,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllRepositoryLocations(Collection repositoryLocationsToCheck);

	/**
	 * Determine if another JavaSourceFile is equivalent to this one, ignoring
	 * ID's.
	 * @param JavaSourceFileToCheck JavaSourceFile to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * JavaSourceFile are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IJavaSourceFile JavaSourceFileToCheck);

}
